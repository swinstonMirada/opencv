INFO:root:class: ['class Calib3d', '', [], []]
INFO:root:ok: ClassInfo [base='' ; classname='' ; classpath='' ; cname='Calib3d' ; consts='[<__main__.ConstInfo object at 0x10e27c410>, <__main__.ConstInfo object at 0x10e27c450>, <__main__.ConstInfo object at 0x10e27c490>, <__main__.ConstInfo object at 0x10e27c4d0>, <__main__.ConstInfo object at 0x10e27c510>, <__main__.ConstInfo object at 0x10e27c550>, <__main__.ConstInfo object at 0x10e27c590>, <__main__.ConstInfo object at 0x10e27c5d0>, <__main__.ConstInfo object at 0x10e27c610>]' ; imports='set([])' ; jname='Calib3d' ; methods='{}' ; methods_suffixes='{}' ; name='Calib3d' ; namespace='' ; private_consts='[]' ; props='[]']
INFO:root:=== Header: /Users/swinston/Mirada/lib/c/opencv/modules/calib3d/include/opencv2/calib3d/calib3d_c.h
INFO:root:=== Namespaces: set([''])
INFO:root:constant: ['const CV_ITERATIVE', '0', [], []]
INFO:root:ok: ConstInfo [addedManually='False' ; classname='Calib3d' ; classpath='' ; cname='CV_ITERATIVE' ; name='CV_ITERATIVE' ; namespace='' ; value='0']
INFO:root:constant: ['const CV_EPNP', '1', [], []]
INFO:root:ok: ConstInfo [addedManually='False' ; classname='Calib3d' ; classpath='' ; cname='CV_EPNP' ; name='CV_EPNP' ; namespace='' ; value='1']
INFO:root:constant: ['const CV_P3P', '2', [], []]
INFO:root:ok: ConstInfo [addedManually='False' ; classname='Calib3d' ; classpath='' ; cname='CV_P3P' ; name='CV_P3P' ; namespace='' ; value='2']
INFO:root:constant: ['const CV_DLS', '3', [], []]
INFO:root:ok: ConstInfo [addedManually='False' ; classname='Calib3d' ; classpath='' ; cname='CV_DLS' ; name='CV_DLS' ; namespace='' ; value='3']
INFO:root:constant: ['const CvLevMarq.DONE', '0', [], []]
INFO:root:class not found: ConstInfo [addedManually='False' ; classname='CvLevMarq' ; classpath='CvLevMarq' ; cname='DONE' ; name='DONE' ; namespace='' ; value='0']
INFO:root:constant: ['const CvLevMarq.STARTED', '1', [], []]
INFO:root:class not found: ConstInfo [addedManually='False' ; classname='CvLevMarq' ; classpath='CvLevMarq' ; cname='STARTED' ; name='STARTED' ; namespace='' ; value='1']
INFO:root:constant: ['const CvLevMarq.CALC_J', '2', [], []]
INFO:root:class not found: ConstInfo [addedManually='False' ; classname='CvLevMarq' ; classpath='CvLevMarq' ; cname='CALC_J' ; name='CALC_J' ; namespace='' ; value='2']
INFO:root:constant: ['const CvLevMarq.CHECK_ERR', '3', [], []]
INFO:root:class not found: ConstInfo [addedManually='False' ; classname='CvLevMarq' ; classpath='CvLevMarq' ; cname='CHECK_ERR' ; name='CHECK_ERR' ; namespace='' ; value='3']
INFO:root:=== Header: /Users/swinston/Mirada/lib/c/opencv/modules/calib3d/include/opencv2/calib3d.hpp
INFO:root:=== Namespaces: set(['', 'cv.fisheye', 'cv'])
INFO:root:constant: ['const cv.LMEDS', '4', [], []]
INFO:root:ok: ConstInfo [addedManually='False' ; classname='Calib3d' ; classpath='' ; cname='LMEDS' ; name='LMEDS' ; namespace='cv' ; value='4']
INFO:root:constant: ['const cv.RANSAC', '8', [], []]
INFO:root:ok: ConstInfo [addedManually='False' ; classname='Calib3d' ; classpath='' ; cname='RANSAC' ; name='RANSAC' ; namespace='cv' ; value='8']
INFO:root:constant: ['const cv.SOLVEPNP_ITERATIVE', '0', [], []]
INFO:root:ok: ConstInfo [addedManually='False' ; classname='Calib3d' ; classpath='' ; cname='SOLVEPNP_ITERATIVE' ; name='SOLVEPNP_ITERATIVE' ; namespace='cv' ; value='0']
INFO:root:constant: ['const cv.SOLVEPNP_EPNP', '1', [], []]
INFO:root:ok: ConstInfo [addedManually='False' ; classname='Calib3d' ; classpath='' ; cname='SOLVEPNP_EPNP' ; name='SOLVEPNP_EPNP' ; namespace='cv' ; value='1']
INFO:root:constant: ['const cv.SOLVEPNP_P3P', '2', [], []]
INFO:root:ok: ConstInfo [addedManually='False' ; classname='Calib3d' ; classpath='' ; cname='SOLVEPNP_P3P' ; name='SOLVEPNP_P3P' ; namespace='cv' ; value='2']
INFO:root:constant: ['const cv.SOLVEPNP_DLS', '3', [], []]
INFO:root:ok: ConstInfo [addedManually='False' ; classname='Calib3d' ; classpath='' ; cname='SOLVEPNP_DLS' ; name='SOLVEPNP_DLS' ; namespace='cv' ; value='3']
INFO:root:constant: ['const cv.CALIB_CB_ADAPTIVE_THRESH', '1', [], []]
INFO:root:ok: ConstInfo [addedManually='False' ; classname='Calib3d' ; classpath='' ; cname='CALIB_CB_ADAPTIVE_THRESH' ; name='CALIB_CB_ADAPTIVE_THRESH' ; namespace='cv' ; value='1']
INFO:root:constant: ['const cv.CALIB_CB_NORMALIZE_IMAGE', '2', [], []]
INFO:root:ok: ConstInfo [addedManually='False' ; classname='Calib3d' ; classpath='' ; cname='CALIB_CB_NORMALIZE_IMAGE' ; name='CALIB_CB_NORMALIZE_IMAGE' ; namespace='cv' ; value='2']
INFO:root:constant: ['const cv.CALIB_CB_FILTER_QUADS', '4', [], []]
INFO:root:ok: ConstInfo [addedManually='False' ; classname='Calib3d' ; classpath='' ; cname='CALIB_CB_FILTER_QUADS' ; name='CALIB_CB_FILTER_QUADS' ; namespace='cv' ; value='4']
INFO:root:constant: ['const cv.CALIB_CB_FAST_CHECK', '8', [], []]
INFO:root:ok: ConstInfo [addedManually='False' ; classname='Calib3d' ; classpath='' ; cname='CALIB_CB_FAST_CHECK' ; name='CALIB_CB_FAST_CHECK' ; namespace='cv' ; value='8']
INFO:root:constant: ['const cv.CALIB_CB_SYMMETRIC_GRID', '1', [], []]
INFO:root:ok: ConstInfo [addedManually='False' ; classname='Calib3d' ; classpath='' ; cname='CALIB_CB_SYMMETRIC_GRID' ; name='CALIB_CB_SYMMETRIC_GRID' ; namespace='cv' ; value='1']
INFO:root:constant: ['const cv.CALIB_CB_ASYMMETRIC_GRID', '2', [], []]
INFO:root:ok: ConstInfo [addedManually='False' ; classname='Calib3d' ; classpath='' ; cname='CALIB_CB_ASYMMETRIC_GRID' ; name='CALIB_CB_ASYMMETRIC_GRID' ; namespace='cv' ; value='2']
INFO:root:constant: ['const cv.CALIB_CB_CLUSTERING', '4', [], []]
INFO:root:ok: ConstInfo [addedManually='False' ; classname='Calib3d' ; classpath='' ; cname='CALIB_CB_CLUSTERING' ; name='CALIB_CB_CLUSTERING' ; namespace='cv' ; value='4']
INFO:root:constant: ['const cv.CALIB_USE_INTRINSIC_GUESS', '0x00001', [], []]
INFO:root:manual: ConstInfo [addedManually='False' ; classname='Calib3d' ; classpath='' ; cname='CALIB_USE_INTRINSIC_GUESS' ; name='CALIB_USE_INTRINSIC_GUESS' ; namespace='cv' ; value='0x00001']
INFO:root:constant: ['const cv.CALIB_FIX_ASPECT_RATIO', '0x00002', [], []]
INFO:root:ok: ConstInfo [addedManually='False' ; classname='Calib3d' ; classpath='' ; cname='CALIB_FIX_ASPECT_RATIO' ; name='CALIB_FIX_ASPECT_RATIO' ; namespace='cv' ; value='0x00002']
INFO:root:constant: ['const cv.CALIB_FIX_PRINCIPAL_POINT', '0x00004', [], []]
INFO:root:ok: ConstInfo [addedManually='False' ; classname='Calib3d' ; classpath='' ; cname='CALIB_FIX_PRINCIPAL_POINT' ; name='CALIB_FIX_PRINCIPAL_POINT' ; namespace='cv' ; value='0x00004']
INFO:root:constant: ['const cv.CALIB_ZERO_TANGENT_DIST', '0x00008', [], []]
INFO:root:ok: ConstInfo [addedManually='False' ; classname='Calib3d' ; classpath='' ; cname='CALIB_ZERO_TANGENT_DIST' ; name='CALIB_ZERO_TANGENT_DIST' ; namespace='cv' ; value='0x00008']
INFO:root:constant: ['const cv.CALIB_FIX_FOCAL_LENGTH', '0x00010', [], []]
INFO:root:ok: ConstInfo [addedManually='False' ; classname='Calib3d' ; classpath='' ; cname='CALIB_FIX_FOCAL_LENGTH' ; name='CALIB_FIX_FOCAL_LENGTH' ; namespace='cv' ; value='0x00010']
INFO:root:constant: ['const cv.CALIB_FIX_K1', '0x00020', [], []]
INFO:root:manual: ConstInfo [addedManually='False' ; classname='Calib3d' ; classpath='' ; cname='CALIB_FIX_K1' ; name='CALIB_FIX_K1' ; namespace='cv' ; value='0x00020']
INFO:root:constant: ['const cv.CALIB_FIX_K2', '0x00040', [], []]
INFO:root:manual: ConstInfo [addedManually='False' ; classname='Calib3d' ; classpath='' ; cname='CALIB_FIX_K2' ; name='CALIB_FIX_K2' ; namespace='cv' ; value='0x00040']
INFO:root:constant: ['const cv.CALIB_FIX_K3', '0x00080', [], []]
INFO:root:manual: ConstInfo [addedManually='False' ; classname='Calib3d' ; classpath='' ; cname='CALIB_FIX_K3' ; name='CALIB_FIX_K3' ; namespace='cv' ; value='0x00080']
INFO:root:constant: ['const cv.CALIB_FIX_K4', '0x00800', [], []]
INFO:root:manual: ConstInfo [addedManually='False' ; classname='Calib3d' ; classpath='' ; cname='CALIB_FIX_K4' ; name='CALIB_FIX_K4' ; namespace='cv' ; value='0x00800']
INFO:root:constant: ['const cv.CALIB_FIX_K5', '0x01000', [], []]
INFO:root:ok: ConstInfo [addedManually='False' ; classname='Calib3d' ; classpath='' ; cname='CALIB_FIX_K5' ; name='CALIB_FIX_K5' ; namespace='cv' ; value='0x01000']
INFO:root:constant: ['const cv.CALIB_FIX_K6', '0x02000', [], []]
INFO:root:ok: ConstInfo [addedManually='False' ; classname='Calib3d' ; classpath='' ; cname='CALIB_FIX_K6' ; name='CALIB_FIX_K6' ; namespace='cv' ; value='0x02000']
INFO:root:constant: ['const cv.CALIB_RATIONAL_MODEL', '0x04000', [], []]
INFO:root:ok: ConstInfo [addedManually='False' ; classname='Calib3d' ; classpath='' ; cname='CALIB_RATIONAL_MODEL' ; name='CALIB_RATIONAL_MODEL' ; namespace='cv' ; value='0x04000']
INFO:root:constant: ['const cv.CALIB_THIN_PRISM_MODEL', '0x08000', [], []]
INFO:root:ok: ConstInfo [addedManually='False' ; classname='Calib3d' ; classpath='' ; cname='CALIB_THIN_PRISM_MODEL' ; name='CALIB_THIN_PRISM_MODEL' ; namespace='cv' ; value='0x08000']
INFO:root:constant: ['const cv.CALIB_FIX_S1_S2_S3_S4', '0x10000', [], []]
INFO:root:ok: ConstInfo [addedManually='False' ; classname='Calib3d' ; classpath='' ; cname='CALIB_FIX_S1_S2_S3_S4' ; name='CALIB_FIX_S1_S2_S3_S4' ; namespace='cv' ; value='0x10000']
INFO:root:constant: ['const cv.CALIB_FIX_INTRINSIC', '0x00100', [], []]
INFO:root:manual: ConstInfo [addedManually='False' ; classname='Calib3d' ; classpath='' ; cname='CALIB_FIX_INTRINSIC' ; name='CALIB_FIX_INTRINSIC' ; namespace='cv' ; value='0x00100']
INFO:root:constant: ['const cv.CALIB_SAME_FOCAL_LENGTH', '0x00200', [], []]
INFO:root:ok: ConstInfo [addedManually='False' ; classname='Calib3d' ; classpath='' ; cname='CALIB_SAME_FOCAL_LENGTH' ; name='CALIB_SAME_FOCAL_LENGTH' ; namespace='cv' ; value='0x00200']
INFO:root:constant: ['const cv.CALIB_ZERO_DISPARITY', '0x00400', [], []]
INFO:root:ok: ConstInfo [addedManually='False' ; classname='Calib3d' ; classpath='' ; cname='CALIB_ZERO_DISPARITY' ; name='CALIB_ZERO_DISPARITY' ; namespace='cv' ; value='0x00400']
INFO:root:constant: ['const cv.FM_7POINT', '1', [], []]
INFO:root:ok: ConstInfo [addedManually='False' ; classname='Calib3d' ; classpath='' ; cname='FM_7POINT' ; name='FM_7POINT' ; namespace='cv' ; value='1']
INFO:root:constant: ['const cv.FM_8POINT', '2', [], []]
INFO:root:ok: ConstInfo [addedManually='False' ; classname='Calib3d' ; classpath='' ; cname='FM_8POINT' ; name='FM_8POINT' ; namespace='cv' ; value='2']
INFO:root:constant: ['const cv.FM_LMEDS', '4', [], []]
INFO:root:ok: ConstInfo [addedManually='False' ; classname='Calib3d' ; classpath='' ; cname='FM_LMEDS' ; name='FM_LMEDS' ; namespace='cv' ; value='4']
INFO:root:constant: ['const cv.FM_RANSAC', '8', [], []]
INFO:root:ok: ConstInfo [addedManually='False' ; classname='Calib3d' ; classpath='' ; cname='FM_RANSAC' ; name='FM_RANSAC' ; namespace='cv' ; value='8']
INFO:root:function: ['cv.Rodrigues', 'void', [], [['Mat', 'src', '', []], ['Mat', 'dst', '', ['/O']], ['Mat', 'jacobian', 'Mat()', ['/O']]]]
INFO:root:ok: FuncFamilyInfo [funcs='[<__main__.FuncInfo object at 0x10e29da90>]' ; isconstructor='False' ; jname='Rodrigues']
INFO:root:function: ['cv.findHomography', 'Mat', [], [['Mat', 'srcPoints', '', []], ['Mat', 'dstPoints', '', []], ['int', 'method', '0', []], ['double', 'ransacReprojThreshold', '3', []], ['Mat', 'mask', 'Mat()', ['/O']], ['int', 'maxIters', '2000', []], ['double', 'confidence', '0.995', []]]]
INFO:root:ok: FuncFamilyInfo [funcs='[<__main__.FuncInfo object at 0x10e29dc50>]' ; isconstructor='False' ; jname='findHomography']
INFO:root:function: ['cv.RQDecomp3x3', 'Vec3d', [], [['Mat', 'src', '', []], ['Mat', 'mtxR', '', ['/O']], ['Mat', 'mtxQ', '', ['/O']], ['Mat', 'Qx', 'Mat()', ['/O']], ['Mat', 'Qy', 'Mat()', ['/O']], ['Mat', 'Qz', 'Mat()', ['/O']]]]
INFO:root:ok: FuncFamilyInfo [funcs='[<__main__.FuncInfo object at 0x10e29de90>]' ; isconstructor='False' ; jname='RQDecomp3x3']
INFO:root:function: ['cv.decomposeProjectionMatrix', 'void', [], [['Mat', 'projMatrix', '', []], ['Mat', 'cameraMatrix', '', ['/O']], ['Mat', 'rotMatrix', '', ['/O']], ['Mat', 'transVect', '', ['/O']], ['Mat', 'rotMatrixX', 'Mat()', ['/O']], ['Mat', 'rotMatrixY', 'Mat()', ['/O']], ['Mat', 'rotMatrixZ', 'Mat()', ['/O']], ['Mat', 'eulerAngles', 'Mat()', ['/O']]]]
INFO:root:ok: FuncFamilyInfo [funcs='[<__main__.FuncInfo object at 0x10e2820d0>]' ; isconstructor='False' ; jname='decomposeProjectionMatrix']
INFO:root:function: ['cv.matMulDeriv', 'void', [], [['Mat', 'A', '', []], ['Mat', 'B', '', []], ['Mat', 'dABdA', '', ['/O']], ['Mat', 'dABdB', '', ['/O']]]]
INFO:root:ok: FuncFamilyInfo [funcs='[<__main__.FuncInfo object at 0x10e282390>]' ; isconstructor='False' ; jname='matMulDeriv']
INFO:root:function: ['cv.composeRT', 'void', [], [['Mat', 'rvec1', '', []], ['Mat', 'tvec1', '', []], ['Mat', 'rvec2', '', []], ['Mat', 'tvec2', '', []], ['Mat', 'rvec3', '', ['/O']], ['Mat', 'tvec3', '', ['/O']], ['Mat', 'dr3dr1', 'Mat()', ['/O']], ['Mat', 'dr3dt1', 'Mat()', ['/O']], ['Mat', 'dr3dr2', 'Mat()', ['/O']], ['Mat', 'dr3dt2', 'Mat()', ['/O']], ['Mat', 'dt3dr1', 'Mat()', ['/O']], ['Mat', 'dt3dt1', 'Mat()', ['/O']], ['Mat', 'dt3dr2', 'Mat()', ['/O']], ['Mat', 'dt3dt2', 'Mat()', ['/O']]]]
INFO:root:ok: FuncFamilyInfo [funcs='[<__main__.FuncInfo object at 0x10e282510>]' ; isconstructor='False' ; jname='composeRT']
INFO:root:function: ['cv.projectPoints', 'void', [], [['Mat', 'objectPoints', '', []], ['Mat', 'rvec', '', []], ['Mat', 'tvec', '', []], ['Mat', 'cameraMatrix', '', []], ['Mat', 'distCoeffs', '', []], ['Mat', 'imagePoints', '', ['/O']], ['Mat', 'jacobian', 'Mat()', ['/O']], ['double', 'aspectRatio', '0', []]]]
INFO:root:ok: FuncFamilyInfo [funcs='[<__main__.FuncInfo object at 0x10e282910>]' ; isconstructor='False' ; jname='projectPoints']
INFO:root:function: ['cv.solvePnP', 'bool', [], [['Mat', 'objectPoints', '', []], ['Mat', 'imagePoints', '', []], ['Mat', 'cameraMatrix', '', []], ['Mat', 'distCoeffs', '', []], ['Mat', 'rvec', '', ['/O']], ['Mat', 'tvec', '', ['/O']], ['bool', 'useExtrinsicGuess', 'false', []], ['int', 'flags', 'SOLVEPNP_ITERATIVE', []]]]
INFO:root:ok: FuncFamilyInfo [funcs='[<__main__.FuncInfo object at 0x10e282b90>]' ; isconstructor='False' ; jname='solvePnP']
INFO:root:function: ['cv.solvePnPRansac', 'bool', [], [['Mat', 'objectPoints', '', []], ['Mat', 'imagePoints', '', []], ['Mat', 'cameraMatrix', '', []], ['Mat', 'distCoeffs', '', []], ['Mat', 'rvec', '', ['/O']], ['Mat', 'tvec', '', ['/O']], ['bool', 'useExtrinsicGuess', 'false', []], ['int', 'iterationsCount', '100', []], ['float', 'reprojectionError', '8.0', []], ['double', 'confidence', '0.99', []], ['Mat', 'inliers', 'Mat()', ['/O']], ['int', 'flags', 'SOLVEPNP_ITERATIVE', []]]]
INFO:root:ok: FuncFamilyInfo [funcs='[<__main__.FuncInfo object at 0x10e282e10>]' ; isconstructor='False' ; jname='solvePnPRansac']
INFO:root:function: ['cv.initCameraMatrix2D', 'Mat', [], [['vector_Mat', 'objectPoints', '', []], ['vector_Mat', 'imagePoints', '', []], ['Size', 'imageSize', '', []], ['double', 'aspectRatio', '1.0', []]]]
INFO:root:ok: FuncFamilyInfo [funcs='[<__main__.FuncInfo object at 0x10e2861d0>]' ; isconstructor='False' ; jname='initCameraMatrix2D']
INFO:root:function: ['cv.findChessboardCorners', 'bool', [], [['Mat', 'image', '', []], ['Size', 'patternSize', '', []], ['Mat', 'corners', '', ['/O']], ['int', 'flags', 'CALIB_CB_ADAPTIVE_THRESH + CALIB_CB_NORMALIZE_IMAGE', []]]]
INFO:root:ok: FuncFamilyInfo [funcs='[<__main__.FuncInfo object at 0x10e286350>]' ; isconstructor='False' ; jname='findChessboardCorners']
INFO:root:function: ['cv.drawChessboardCorners', 'void', [], [['Mat', 'image', '', ['/IO']], ['Size', 'patternSize', '', []], ['Mat', 'corners', '', []], ['bool', 'patternWasFound', '', []]]]
INFO:root:ok: FuncFamilyInfo [funcs='[<__main__.FuncInfo object at 0x10e286510>]' ; isconstructor='False' ; jname='drawChessboardCorners']
INFO:root:function: ['cv.findCirclesGrid', 'bool', [], [['Mat', 'image', '', []], ['Size', 'patternSize', '', []], ['Mat', 'centers', '', ['/O']], ['int', 'flags', 'CALIB_CB_SYMMETRIC_GRID', []], ['Ptr_FeatureDetector', 'blobDetector', 'makePtr<SimpleBlobDetector>()', []]]]
INFO:root:ok: FuncFamilyInfo [funcs='[<__main__.FuncInfo object at 0x10e2866d0>]' ; isconstructor='False' ; jname='findCirclesGrid']
INFO:root:function: ['cv.calibrateCamera', 'double', [], [['vector_Mat', 'objectPoints', '', []], ['vector_Mat', 'imagePoints', '', []], ['Size', 'imageSize', '', []], ['Mat', 'cameraMatrix', '', ['/IO']], ['Mat', 'distCoeffs', '', ['/IO']], ['vector_Mat', 'rvecs', '', ['/O']], ['vector_Mat', 'tvecs', '', ['/O']], ['int', 'flags', '0', []], ['TermCriteria', 'criteria', 'TermCriteria( TermCriteria::COUNT + TermCriteria::EPS, 30, DBL_EPSILON)', []]]]
INFO:root:ok: FuncFamilyInfo [funcs='[<__main__.FuncInfo object at 0x10e286890>]' ; isconstructor='False' ; jname='calibrateCamera']
INFO:root:function: ['cv.calibrationMatrixValues', 'void', [], [['Mat', 'cameraMatrix', '', []], ['Size', 'imageSize', '', []], ['double', 'apertureWidth', '', []], ['double', 'apertureHeight', '', []], ['double', 'fovx', '', ['/O']], ['double', 'fovy', '', ['/O']], ['double', 'focalLength', '', ['/O']], ['Point2d', 'principalPoint', '', ['/O']], ['double', 'aspectRatio', '', ['/O']]]]
INFO:root:ok: FuncFamilyInfo [funcs='[<__main__.FuncInfo object at 0x10e286b50>]' ; isconstructor='False' ; jname='calibrationMatrixValues']
INFO:root:function: ['cv.stereoCalibrate', 'double', [], [['vector_Mat', 'objectPoints', '', []], ['vector_Mat', 'imagePoints1', '', []], ['vector_Mat', 'imagePoints2', '', []], ['Mat', 'cameraMatrix1', '', ['/IO']], ['Mat', 'distCoeffs1', '', ['/IO']], ['Mat', 'cameraMatrix2', '', ['/IO']], ['Mat', 'distCoeffs2', '', ['/IO']], ['Size', 'imageSize', '', []], ['Mat', 'R', '', ['/O']], ['Mat', 'T', '', ['/O']], ['Mat', 'E', '', ['/O']], ['Mat', 'F', '', ['/O']], ['int', 'flags', 'CALIB_FIX_INTRINSIC', []], ['TermCriteria', 'criteria', 'TermCriteria(TermCriteria::COUNT+TermCriteria::EPS, 30, 1e-6)', []]]]
INFO:root:ok: FuncFamilyInfo [funcs='[<__main__.FuncInfo object at 0x10e286e50>]' ; isconstructor='False' ; jname='stereoCalibrate']
INFO:root:function: ['cv.stereoRectify', 'void', [], [['Mat', 'cameraMatrix1', '', []], ['Mat', 'distCoeffs1', '', []], ['Mat', 'cameraMatrix2', '', []], ['Mat', 'distCoeffs2', '', []], ['Size', 'imageSize', '', []], ['Mat', 'R', '', []], ['Mat', 'T', '', []], ['Mat', 'R1', '', ['/O']], ['Mat', 'R2', '', ['/O']], ['Mat', 'P1', '', ['/O']], ['Mat', 'P2', '', ['/O']], ['Mat', 'Q', '', ['/O']], ['int', 'flags', 'CALIB_ZERO_DISPARITY', []], ['double', 'alpha', '-1', []], ['Size', 'newImageSize', 'Size()', []], ['Rect*', 'validPixROI1', '0', ['/O']], ['Rect*', 'validPixROI2', '0', ['/O']]]]
INFO:root:ok: FuncFamilyInfo [funcs='[<__main__.FuncInfo object at 0x10e287290>]' ; isconstructor='False' ; jname='stereoRectify']
INFO:root:function: ['cv.stereoRectifyUncalibrated', 'bool', [], [['Mat', 'points1', '', []], ['Mat', 'points2', '', []], ['Mat', 'F', '', []], ['Size', 'imgSize', '', []], ['Mat', 'H1', '', ['/O']], ['Mat', 'H2', '', ['/O']], ['double', 'threshold', '5', []]]]
INFO:root:ok: FuncFamilyInfo [funcs='[<__main__.FuncInfo object at 0x10e287750>]' ; isconstructor='False' ; jname='stereoRectifyUncalibrated']
INFO:root:function: ['cv.rectify3Collinear', 'float', [], [['Mat', 'cameraMatrix1', '', []], ['Mat', 'distCoeffs1', '', []], ['Mat', 'cameraMatrix2', '', []], ['Mat', 'distCoeffs2', '', []], ['Mat', 'cameraMatrix3', '', []], ['Mat', 'distCoeffs3', '', []], ['vector_Mat', 'imgpt1', '', []], ['vector_Mat', 'imgpt3', '', []], ['Size', 'imageSize', '', []], ['Mat', 'R12', '', []], ['Mat', 'T12', '', []], ['Mat', 'R13', '', []], ['Mat', 'T13', '', []], ['Mat', 'R1', '', ['/O']], ['Mat', 'R2', '', ['/O']], ['Mat', 'R3', '', ['/O']], ['Mat', 'P1', '', ['/O']], ['Mat', 'P2', '', ['/O']], ['Mat', 'P3', '', ['/O']], ['Mat', 'Q', '', ['/O']], ['double', 'alpha', '', []], ['Size', 'newImgSize', '', []], ['Rect*', 'roi1', '', ['/O']], ['Rect*', 'roi2', '', ['/O']], ['int', 'flags', '', []]]]
INFO:root:ok: FuncFamilyInfo [funcs='[<__main__.FuncInfo object at 0x10e2879d0>]' ; isconstructor='False' ; jname='rectify3Collinear']
INFO:root:function: ['cv.getOptimalNewCameraMatrix', 'Mat', [], [['Mat', 'cameraMatrix', '', []], ['Mat', 'distCoeffs', '', []], ['Size', 'imageSize', '', []], ['double', 'alpha', '', []], ['Size', 'newImgSize', 'Size()', []], ['Rect*', 'validPixROI', '0', ['/O']], ['bool', 'centerPrincipalPoint', 'false', []]]]
INFO:root:ok: FuncFamilyInfo [funcs='[<__main__.FuncInfo object at 0x10e2880d0>]' ; isconstructor='False' ; jname='getOptimalNewCameraMatrix']
INFO:root:function: ['cv.convertPointsToHomogeneous', 'void', [], [['Mat', 'src', '', []], ['Mat', 'dst', '', ['/O']]]]
INFO:root:ok: FuncFamilyInfo [funcs='[<__main__.FuncInfo object at 0x10e288350>]' ; isconstructor='False' ; jname='convertPointsToHomogeneous']
INFO:root:function: ['cv.convertPointsFromHomogeneous', 'void', [], [['Mat', 'src', '', []], ['Mat', 'dst', '', ['/O']]]]
INFO:root:ok: FuncFamilyInfo [funcs='[<__main__.FuncInfo object at 0x10e288490>]' ; isconstructor='False' ; jname='convertPointsFromHomogeneous']
INFO:root:function: ['cv.findFundamentalMat', 'Mat', [], [['Mat', 'points1', '', []], ['Mat', 'points2', '', []], ['int', 'method', 'FM_RANSAC', []], ['double', 'param1', '3.', []], ['double', 'param2', '0.99', []], ['Mat', 'mask', 'Mat()', ['/O']]]]
INFO:root:ok: FuncFamilyInfo [funcs='[<__main__.FuncInfo object at 0x10e288590>]' ; isconstructor='False' ; jname='findFundamentalMat']
INFO:root:function: ['cv.findEssentialMat', 'Mat', [], [['Mat', 'points1', '', []], ['Mat', 'points2', '', []], ['double', 'focal', '1.0', []], ['Point2d', 'pp', 'Point2d(0, 0)', []], ['int', 'method', 'RANSAC', []], ['double', 'prob', '0.999', []], ['double', 'threshold', '1.0', []], ['Mat', 'mask', 'Mat()', ['/O']]]]
INFO:root:ok: FuncFamilyInfo [funcs='[<__main__.FuncInfo object at 0x10e288790>]' ; isconstructor='False' ; jname='findEssentialMat']
INFO:root:function: ['cv.decomposeEssentialMat', 'void', [], [['Mat', 'E', '', []], ['Mat', 'R1', '', ['/O']], ['Mat', 'R2', '', ['/O']], ['Mat', 't', '', ['/O']]]]
INFO:root:ok: FuncFamilyInfo [funcs='[<__main__.FuncInfo object at 0x10e288a10>]' ; isconstructor='False' ; jname='decomposeEssentialMat']
INFO:root:function: ['cv.recoverPose', 'int', [], [['Mat', 'E', '', []], ['Mat', 'points1', '', []], ['Mat', 'points2', '', []], ['Mat', 'R', '', ['/O']], ['Mat', 't', '', ['/O']], ['double', 'focal', '1.0', []], ['Point2d', 'pp', 'Point2d(0, 0)', []], ['Mat', 'mask', 'Mat()', ['/IO']]]]
INFO:root:ok: FuncFamilyInfo [funcs='[<__main__.FuncInfo object at 0x10e288bd0>]' ; isconstructor='False' ; jname='recoverPose']
INFO:root:function: ['cv.computeCorrespondEpilines', 'void', [], [['Mat', 'points', '', []], ['int', 'whichImage', '', []], ['Mat', 'F', '', []], ['Mat', 'lines', '', ['/O']]]]
INFO:root:ok: FuncFamilyInfo [funcs='[<__main__.FuncInfo object at 0x10e288e50>]' ; isconstructor='False' ; jname='computeCorrespondEpilines']
INFO:root:function: ['cv.triangulatePoints', 'void', [], [['Mat', 'projMatr1', '', []], ['Mat', 'projMatr2', '', []], ['Mat', 'projPoints1', '', []], ['Mat', 'projPoints2', '', []], ['Mat', 'points4D', '', ['/O']]]]
INFO:root:ok: FuncFamilyInfo [funcs='[<__main__.FuncInfo object at 0x10e28a050>]' ; isconstructor='False' ; jname='triangulatePoints']
INFO:root:function: ['cv.correctMatches', 'void', [], [['Mat', 'F', '', []], ['Mat', 'points1', '', []], ['Mat', 'points2', '', []], ['Mat', 'newPoints1', '', ['/O']], ['Mat', 'newPoints2', '', ['/O']]]]
INFO:root:ok: FuncFamilyInfo [funcs='[<__main__.FuncInfo object at 0x10e28a210>]' ; isconstructor='False' ; jname='correctMatches']
INFO:root:function: ['cv.filterSpeckles', 'void', [], [['Mat', 'img', '', ['/IO']], ['double', 'newVal', '', []], ['int', 'maxSpeckleSize', '', []], ['double', 'maxDiff', '', []], ['Mat', 'buf', 'Mat()', ['/IO']]]]
INFO:root:ok: FuncFamilyInfo [funcs='[<__main__.FuncInfo object at 0x10e28a3d0>]' ; isconstructor='False' ; jname='filterSpeckles']
INFO:root:function: ['cv.getValidDisparityROI', 'Rect', [], [['Rect', 'roi1', '', []], ['Rect', 'roi2', '', []], ['int', 'minDisparity', '', []], ['int', 'numberOfDisparities', '', []], ['int', 'SADWindowSize', '', []]]]
INFO:root:ok: FuncFamilyInfo [funcs='[<__main__.FuncInfo object at 0x10e28a590>]' ; isconstructor='False' ; jname='getValidDisparityROI']
INFO:root:function: ['cv.validateDisparity', 'void', [], [['Mat', 'disparity', '', ['/IO']], ['Mat', 'cost', '', []], ['int', 'minDisparity', '', []], ['int', 'numberOfDisparities', '', []], ['int', 'disp12MaxDisp', '1', []]]]
INFO:root:ok: FuncFamilyInfo [funcs='[<__main__.FuncInfo object at 0x10e28a790>]' ; isconstructor='False' ; jname='validateDisparity']
INFO:root:function: ['cv.reprojectImageTo3D', 'void', [], [['Mat', 'disparity', '', []], ['Mat', '_3dImage', '', ['/O']], ['Mat', 'Q', '', []], ['bool', 'handleMissingValues', 'false', []], ['int', 'ddepth', '-1', []]]]
INFO:root:ok: FuncFamilyInfo [funcs='[<__main__.FuncInfo object at 0x10e28a950>]' ; isconstructor='False' ; jname='reprojectImageTo3D']
INFO:root:function: ['cv.estimateAffine3D', 'int', [], [['Mat', 'src', '', []], ['Mat', 'dst', '', []], ['Mat', 'out', '', ['/O']], ['Mat', 'inliers', '', ['/O']], ['double', 'ransacThreshold', '3', []], ['double', 'confidence', '0.99', []]]]
INFO:root:ok: FuncFamilyInfo [funcs='[<__main__.FuncInfo object at 0x10e28ab10>]' ; isconstructor='False' ; jname='estimateAffine3D']
INFO:root:function: ['cv.decomposeHomographyMat', 'int', [], [['Mat', 'H', '', []], ['Mat', 'K', '', []], ['vector_Mat', 'rotations', '', ['/O']], ['vector_Mat', 'translations', '', ['/O']], ['vector_Mat', 'normals', '', ['/O']]]]
INFO:root:ok: FuncFamilyInfo [funcs='[<__main__.FuncInfo object at 0x10e28ad10>]' ; isconstructor='False' ; jname='decomposeHomographyMat']
INFO:root:class: ['class cv.StereoMatcher', ': cv::Algorithm', [], []]
INFO:root:ok: ClassInfo [base='Algorithm' ; classname='' ; classpath='' ; cname='StereoMatcher' ; consts='[]' ; imports='set(['org.opencv.core.Algorithm'])' ; jname='StereoMatcher' ; methods='{}' ; methods_suffixes='{}' ; name='StereoMatcher' ; namespace='cv' ; private_consts='[]' ; props='[]']
INFO:root:constant: ['const cv.StereoMatcher.DISP_SHIFT', '4', [], []]
INFO:root:ok: ConstInfo [addedManually='False' ; classname='StereoMatcher' ; classpath='StereoMatcher' ; cname='DISP_SHIFT' ; name='DISP_SHIFT' ; namespace='cv' ; value='4']
INFO:root:constant: ['const cv.StereoMatcher.DISP_SCALE', '(1 << DISP_SHIFT)', [], []]
INFO:root:ok: ConstInfo [addedManually='False' ; classname='StereoMatcher' ; classpath='StereoMatcher' ; cname='DISP_SCALE' ; name='DISP_SCALE' ; namespace='cv' ; value='(1 << DISP_SHIFT)']
INFO:root:function: ['cv.StereoMatcher.compute', 'void', [], [['Mat', 'left', '', []], ['Mat', 'right', '', []], ['Mat', 'disparity', '', ['/O']]]]
INFO:root:ok: FuncFamilyInfo [funcs='[<__main__.FuncInfo object at 0x10e2a50d0>]' ; isconstructor='False' ; jname='compute']
INFO:root:function: ['cv.StereoMatcher.getMinDisparity', 'int', [], []]
INFO:root:ok: FuncFamilyInfo [funcs='[<__main__.FuncInfo object at 0x10e2a5090>]' ; isconstructor='False' ; jname='getMinDisparity']
INFO:root:function: ['cv.StereoMatcher.setMinDisparity', 'void', [], [['int', 'minDisparity', '', []]]]
INFO:root:ok: FuncFamilyInfo [funcs='[<__main__.FuncInfo object at 0x10e2a51d0>]' ; isconstructor='False' ; jname='setMinDisparity']
INFO:root:function: ['cv.StereoMatcher.getNumDisparities', 'int', [], []]
INFO:root:ok: FuncFamilyInfo [funcs='[<__main__.FuncInfo object at 0x10e2a5250>]' ; isconstructor='False' ; jname='getNumDisparities']
INFO:root:function: ['cv.StereoMatcher.setNumDisparities', 'void', [], [['int', 'numDisparities', '', []]]]
INFO:root:ok: FuncFamilyInfo [funcs='[<__main__.FuncInfo object at 0x10e2a5390>]' ; isconstructor='False' ; jname='setNumDisparities']
INFO:root:function: ['cv.StereoMatcher.getBlockSize', 'int', [], []]
INFO:root:ok: FuncFamilyInfo [funcs='[<__main__.FuncInfo object at 0x10e2a5310>]' ; isconstructor='False' ; jname='getBlockSize']
INFO:root:function: ['cv.StereoMatcher.setBlockSize', 'void', [], [['int', 'blockSize', '', []]]]
INFO:root:ok: FuncFamilyInfo [funcs='[<__main__.FuncInfo object at 0x10e2a5490>]' ; isconstructor='False' ; jname='setBlockSize']
INFO:root:function: ['cv.StereoMatcher.getSpeckleWindowSize', 'int', [], []]
INFO:root:ok: FuncFamilyInfo [funcs='[<__main__.FuncInfo object at 0x10e2a5450>]' ; isconstructor='False' ; jname='getSpeckleWindowSize']
INFO:root:function: ['cv.StereoMatcher.setSpeckleWindowSize', 'void', [], [['int', 'speckleWindowSize', '', []]]]
INFO:root:ok: FuncFamilyInfo [funcs='[<__main__.FuncInfo object at 0x10e2a5590>]' ; isconstructor='False' ; jname='setSpeckleWindowSize']
INFO:root:function: ['cv.StereoMatcher.getSpeckleRange', 'int', [], []]
INFO:root:ok: FuncFamilyInfo [funcs='[<__main__.FuncInfo object at 0x10e2a5710>]' ; isconstructor='False' ; jname='getSpeckleRange']
INFO:root:function: ['cv.StereoMatcher.setSpeckleRange', 'void', [], [['int', 'speckleRange', '', []]]]
INFO:root:ok: FuncFamilyInfo [funcs='[<__main__.FuncInfo object at 0x10e2a5750>]' ; isconstructor='False' ; jname='setSpeckleRange']
INFO:root:function: ['cv.StereoMatcher.getDisp12MaxDiff', 'int', [], []]
INFO:root:ok: FuncFamilyInfo [funcs='[<__main__.FuncInfo object at 0x10e2a57d0>]' ; isconstructor='False' ; jname='getDisp12MaxDiff']
INFO:root:function: ['cv.StereoMatcher.setDisp12MaxDiff', 'void', [], [['int', 'disp12MaxDiff', '', []]]]
INFO:root:ok: FuncFamilyInfo [funcs='[<__main__.FuncInfo object at 0x10e2a5910>]' ; isconstructor='False' ; jname='setDisp12MaxDiff']
INFO:root:class: ['class cv.StereoBM', ': cv::StereoMatcher', [], []]
INFO:root:ok: ClassInfo [base='StereoMatcher' ; classname='' ; classpath='' ; cname='StereoBM' ; consts='[]' ; imports='set([])' ; jname='StereoBM' ; methods='{}' ; methods_suffixes='{}' ; name='StereoBM' ; namespace='cv' ; private_consts='[]' ; props='[]']
INFO:root:constant: ['const cv.StereoBM.PREFILTER_NORMALIZED_RESPONSE', '0', [], []]
INFO:root:ok: ConstInfo [addedManually='False' ; classname='StereoBM' ; classpath='StereoBM' ; cname='PREFILTER_NORMALIZED_RESPONSE' ; name='PREFILTER_NORMALIZED_RESPONSE' ; namespace='cv' ; value='0']
INFO:root:constant: ['const cv.StereoBM.PREFILTER_XSOBEL', '1', [], []]
INFO:root:ok: ConstInfo [addedManually='False' ; classname='StereoBM' ; classpath='StereoBM' ; cname='PREFILTER_XSOBEL' ; name='PREFILTER_XSOBEL' ; namespace='cv' ; value='1']
INFO:root:function: ['cv.StereoBM.getPreFilterType', 'int', [], []]
INFO:root:ok: FuncFamilyInfo [funcs='[<__main__.FuncInfo object at 0x10e2a59d0>]' ; isconstructor='False' ; jname='getPreFilterType']
INFO:root:function: ['cv.StereoBM.setPreFilterType', 'void', [], [['int', 'preFilterType', '', []]]]
INFO:root:ok: FuncFamilyInfo [funcs='[<__main__.FuncInfo object at 0x10e2a5b10>]' ; isconstructor='False' ; jname='setPreFilterType']
INFO:root:function: ['cv.StereoBM.getPreFilterSize', 'int', [], []]
INFO:root:ok: FuncFamilyInfo [funcs='[<__main__.FuncInfo object at 0x10e2a5b50>]' ; isconstructor='False' ; jname='getPreFilterSize']
INFO:root:function: ['cv.StereoBM.setPreFilterSize', 'void', [], [['int', 'preFilterSize', '', []]]]
INFO:root:ok: FuncFamilyInfo [funcs='[<__main__.FuncInfo object at 0x10e2a5c10>]' ; isconstructor='False' ; jname='setPreFilterSize']
INFO:root:function: ['cv.StereoBM.getPreFilterCap', 'int', [], []]
INFO:root:ok: FuncFamilyInfo [funcs='[<__main__.FuncInfo object at 0x10e2a5ad0>]' ; isconstructor='False' ; jname='getPreFilterCap']
INFO:root:function: ['cv.StereoBM.setPreFilterCap', 'void', [], [['int', 'preFilterCap', '', []]]]
INFO:root:ok: FuncFamilyInfo [funcs='[<__main__.FuncInfo object at 0x10e2a5d50>]' ; isconstructor='False' ; jname='setPreFilterCap']
INFO:root:function: ['cv.StereoBM.getTextureThreshold', 'int', [], []]
INFO:root:ok: FuncFamilyInfo [funcs='[<__main__.FuncInfo object at 0x10e2a5d10>]' ; isconstructor='False' ; jname='getTextureThreshold']
INFO:root:function: ['cv.StereoBM.setTextureThreshold', 'void', [], [['int', 'textureThreshold', '', []]]]
INFO:root:ok: FuncFamilyInfo [funcs='[<__main__.FuncInfo object at 0x10e2a5ed0>]' ; isconstructor='False' ; jname='setTextureThreshold']
INFO:root:function: ['cv.StereoBM.getUniquenessRatio', 'int', [], []]
INFO:root:ok: FuncFamilyInfo [funcs='[<__main__.FuncInfo object at 0x10e2a5e50>]' ; isconstructor='False' ; jname='getUniquenessRatio']
INFO:root:function: ['cv.StereoBM.setUniquenessRatio', 'void', [], [['int', 'uniquenessRatio', '', []]]]
INFO:root:ok: FuncFamilyInfo [funcs='[<__main__.FuncInfo object at 0x10e2a5fd0>]' ; isconstructor='False' ; jname='setUniquenessRatio']
INFO:root:function: ['cv.StereoBM.getSmallerBlockSize', 'int', [], []]
INFO:root:ok: FuncFamilyInfo [funcs='[<__main__.FuncInfo object at 0x10e2a7050>]' ; isconstructor='False' ; jname='getSmallerBlockSize']
INFO:root:function: ['cv.StereoBM.setSmallerBlockSize', 'void', [], [['int', 'blockSize', '', []]]]
INFO:root:ok: FuncFamilyInfo [funcs='[<__main__.FuncInfo object at 0x10e2a7190>]' ; isconstructor='False' ; jname='setSmallerBlockSize']
INFO:root:function: ['cv.StereoBM.getROI1', 'Rect', [], []]
INFO:root:ok: FuncFamilyInfo [funcs='[<__main__.FuncInfo object at 0x10e2a7110>]' ; isconstructor='False' ; jname='getROI1']
INFO:root:function: ['cv.StereoBM.setROI1', 'void', [], [['Rect', 'roi1', '', []]]]
INFO:root:ok: FuncFamilyInfo [funcs='[<__main__.FuncInfo object at 0x10e2a7290>]' ; isconstructor='False' ; jname='setROI1']
INFO:root:function: ['cv.StereoBM.getROI2', 'Rect', [], []]
INFO:root:ok: FuncFamilyInfo [funcs='[<__main__.FuncInfo object at 0x10e2a7250>]' ; isconstructor='False' ; jname='getROI2']
INFO:root:function: ['cv.StereoBM.setROI2', 'void', [], [['Rect', 'roi2', '', []]]]
INFO:root:ok: FuncFamilyInfo [funcs='[<__main__.FuncInfo object at 0x10e2a73d0>]' ; isconstructor='False' ; jname='setROI2']
INFO:root:function: ['cv.createStereoBM', 'Ptr_StereoBM', [], [['int', 'numDisparities', '0', []], ['int', 'blockSize', '21', []]]]
INFO:root:ok: FuncFamilyInfo [funcs='[<__main__.FuncInfo object at 0x10e2a7410>]' ; isconstructor='False' ; jname='createStereoBM']
INFO:root:class: ['class cv.StereoSGBM', ': cv::StereoMatcher', [], []]
INFO:root:ok: ClassInfo [base='StereoMatcher' ; classname='' ; classpath='' ; cname='StereoSGBM' ; consts='[]' ; imports='set([])' ; jname='StereoSGBM' ; methods='{}' ; methods_suffixes='{}' ; name='StereoSGBM' ; namespace='cv' ; private_consts='[]' ; props='[]']
INFO:root:constant: ['const cv.StereoSGBM.MODE_SGBM', '0', [], []]
INFO:root:ok: ConstInfo [addedManually='False' ; classname='StereoSGBM' ; classpath='StereoSGBM' ; cname='MODE_SGBM' ; name='MODE_SGBM' ; namespace='cv' ; value='0']
INFO:root:constant: ['const cv.StereoSGBM.MODE_HH', '1', [], []]
INFO:root:ok: ConstInfo [addedManually='False' ; classname='StereoSGBM' ; classpath='StereoSGBM' ; cname='MODE_HH' ; name='MODE_HH' ; namespace='cv' ; value='1']
INFO:root:function: ['cv.StereoSGBM.getPreFilterCap', 'int', [], []]
INFO:root:ok: FuncFamilyInfo [funcs='[<__main__.FuncInfo object at 0x10e2a7650>]' ; isconstructor='False' ; jname='getPreFilterCap']
INFO:root:function: ['cv.StereoSGBM.setPreFilterCap', 'void', [], [['int', 'preFilterCap', '', []]]]
INFO:root:ok: FuncFamilyInfo [funcs='[<__main__.FuncInfo object at 0x10e2a7710>]' ; isconstructor='False' ; jname='setPreFilterCap']
INFO:root:function: ['cv.StereoSGBM.getUniquenessRatio', 'int', [], []]
INFO:root:ok: FuncFamilyInfo [funcs='[<__main__.FuncInfo object at 0x10e2a7750>]' ; isconstructor='False' ; jname='getUniquenessRatio']
INFO:root:function: ['cv.StereoSGBM.setUniquenessRatio', 'void', [], [['int', 'uniquenessRatio', '', []]]]
INFO:root:ok: FuncFamilyInfo [funcs='[<__main__.FuncInfo object at 0x10e2a7850>]' ; isconstructor='False' ; jname='setUniquenessRatio']
INFO:root:function: ['cv.StereoSGBM.getP1', 'int', [], []]
INFO:root:ok: FuncFamilyInfo [funcs='[<__main__.FuncInfo object at 0x10e2a77d0>]' ; isconstructor='False' ; jname='getP1']
INFO:root:function: ['cv.StereoSGBM.setP1', 'void', [], [['int', 'P1', '', []]]]
INFO:root:ok: FuncFamilyInfo [funcs='[<__main__.FuncInfo object at 0x10e2a7950>]' ; isconstructor='False' ; jname='setP1']
INFO:root:function: ['cv.StereoSGBM.getP2', 'int', [], []]
INFO:root:ok: FuncFamilyInfo [funcs='[<__main__.FuncInfo object at 0x10e2a7910>]' ; isconstructor='False' ; jname='getP2']
INFO:root:function: ['cv.StereoSGBM.setP2', 'void', [], [['int', 'P2', '', []]]]
INFO:root:ok: FuncFamilyInfo [funcs='[<__main__.FuncInfo object at 0x10e2a7a90>]' ; isconstructor='False' ; jname='setP2']
INFO:root:function: ['cv.StereoSGBM.getMode', 'int', [], []]
INFO:root:ok: FuncFamilyInfo [funcs='[<__main__.FuncInfo object at 0x10e2a7ad0>]' ; isconstructor='False' ; jname='getMode']
INFO:root:function: ['cv.StereoSGBM.setMode', 'void', [], [['int', 'mode', '', []]]]
INFO:root:ok: FuncFamilyInfo [funcs='[<__main__.FuncInfo object at 0x10e2a7bd0>]' ; isconstructor='False' ; jname='setMode']
INFO:root:function: ['cv.createStereoSGBM', 'Ptr_StereoSGBM', [], [['int', 'minDisparity', '', []], ['int', 'numDisparities', '', []], ['int', 'blockSize', '', []], ['int', 'P1', '0', []], ['int', 'P2', '0', []], ['int', 'disp12MaxDiff', '0', []], ['int', 'preFilterCap', '0', []], ['int', 'uniquenessRatio', '0', []], ['int', 'speckleWindowSize', '0', []], ['int', 'speckleRange', '0', []], ['int', 'mode', 'StereoSGBM::MODE_SGBM', []]]]
INFO:root:ok: FuncFamilyInfo [funcs='[<__main__.FuncInfo object at 0x10e2a7c10>]' ; isconstructor='False' ; jname='createStereoSGBM']
INFO:root:constant: ['const cv.fisheye.CALIB_USE_INTRINSIC_GUESS', '1', [], []]
INFO:root:manual: ConstInfo [addedManually='False' ; classname='Calib3d' ; classpath='' ; cname='CALIB_USE_INTRINSIC_GUESS' ; name='CALIB_USE_INTRINSIC_GUESS' ; namespace='cv.fisheye' ; value='1']
INFO:root:constant: ['const cv.fisheye.CALIB_RECOMPUTE_EXTRINSIC', '2', [], []]
INFO:root:manual: ConstInfo [addedManually='False' ; classname='Calib3d' ; classpath='' ; cname='CALIB_RECOMPUTE_EXTRINSIC' ; name='CALIB_RECOMPUTE_EXTRINSIC' ; namespace='cv.fisheye' ; value='2']
INFO:root:constant: ['const cv.fisheye.CALIB_CHECK_COND', '4', [], []]
INFO:root:manual: ConstInfo [addedManually='False' ; classname='Calib3d' ; classpath='' ; cname='CALIB_CHECK_COND' ; name='CALIB_CHECK_COND' ; namespace='cv.fisheye' ; value='4']
INFO:root:constant: ['const cv.fisheye.CALIB_FIX_SKEW', '8', [], []]
INFO:root:manual: ConstInfo [addedManually='False' ; classname='Calib3d' ; classpath='' ; cname='CALIB_FIX_SKEW' ; name='CALIB_FIX_SKEW' ; namespace='cv.fisheye' ; value='8']
INFO:root:constant: ['const cv.fisheye.CALIB_FIX_K1', '16', [], []]
INFO:root:manual: ConstInfo [addedManually='False' ; classname='Calib3d' ; classpath='' ; cname='CALIB_FIX_K1' ; name='CALIB_FIX_K1' ; namespace='cv.fisheye' ; value='16']
INFO:root:constant: ['const cv.fisheye.CALIB_FIX_K2', '32', [], []]
INFO:root:manual: ConstInfo [addedManually='False' ; classname='Calib3d' ; classpath='' ; cname='CALIB_FIX_K2' ; name='CALIB_FIX_K2' ; namespace='cv.fisheye' ; value='32']
INFO:root:constant: ['const cv.fisheye.CALIB_FIX_K3', '64', [], []]
INFO:root:manual: ConstInfo [addedManually='False' ; classname='Calib3d' ; classpath='' ; cname='CALIB_FIX_K3' ; name='CALIB_FIX_K3' ; namespace='cv.fisheye' ; value='64']
INFO:root:constant: ['const cv.fisheye.CALIB_FIX_K4', '128', [], []]
INFO:root:manual: ConstInfo [addedManually='False' ; classname='Calib3d' ; classpath='' ; cname='CALIB_FIX_K4' ; name='CALIB_FIX_K4' ; namespace='cv.fisheye' ; value='128']
INFO:root:constant: ['const cv.fisheye.CALIB_FIX_INTRINSIC', '256', [], []]
INFO:root:manual: ConstInfo [addedManually='False' ; classname='Calib3d' ; classpath='' ; cname='CALIB_FIX_INTRINSIC' ; name='CALIB_FIX_INTRINSIC' ; namespace='cv.fisheye' ; value='256']
INFO:root:=== Header: /Users/swinston/Mirada/lib/c/opencv/modules/calib3d/include/opencv2/calib3d/calib3d.hpp
INFO:root:=== Namespaces: set(['', 'cv.fisheye', 'cv'])
