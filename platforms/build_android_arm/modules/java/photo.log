INFO:root:class: ['class Photo', '', [], []]
INFO:root:ok: ClassInfo [base='' ; classname='' ; classpath='' ; cname='Photo' ; consts='[]' ; imports='set([])' ; jname='Photo' ; methods='{}' ; methods_suffixes='{}' ; name='Photo' ; namespace='' ; private_consts='[]' ; props='[]']
INFO:root:=== Header: /Users/swinston/Mirada/lib/c/opencv/modules/photo/include/opencv2/photo/photo_c.h
INFO:root:=== Namespaces: set([''])
INFO:root:constant: ['const CV_INPAINT_NS', '0', [], []]
INFO:root:ok: ConstInfo [addedManually='False' ; classname='Photo' ; classpath='' ; cname='CV_INPAINT_NS' ; name='CV_INPAINT_NS' ; namespace='' ; value='0']
INFO:root:constant: ['const CV_INPAINT_TELEA', '1', [], []]
INFO:root:ok: ConstInfo [addedManually='False' ; classname='Photo' ; classpath='' ; cname='CV_INPAINT_TELEA' ; name='CV_INPAINT_TELEA' ; namespace='' ; value='1']
INFO:root:=== Header: /Users/swinston/Mirada/lib/c/opencv/modules/photo/include/opencv2/photo.hpp
INFO:root:=== Namespaces: set(['', 'cv'])
INFO:root:constant: ['const cv.INPAINT_NS', '0', [], []]
INFO:root:ok: ConstInfo [addedManually='False' ; classname='Photo' ; classpath='' ; cname='INPAINT_NS' ; name='INPAINT_NS' ; namespace='cv' ; value='0']
INFO:root:constant: ['const cv.INPAINT_TELEA', '1', [], []]
INFO:root:ok: ConstInfo [addedManually='False' ; classname='Photo' ; classpath='' ; cname='INPAINT_TELEA' ; name='INPAINT_TELEA' ; namespace='cv' ; value='1']
INFO:root:constant: ['const cv.NORMAL_CLONE', '1', [], []]
INFO:root:ok: ConstInfo [addedManually='False' ; classname='Photo' ; classpath='' ; cname='NORMAL_CLONE' ; name='NORMAL_CLONE' ; namespace='cv' ; value='1']
INFO:root:constant: ['const cv.MIXED_CLONE', '2', [], []]
INFO:root:ok: ConstInfo [addedManually='False' ; classname='Photo' ; classpath='' ; cname='MIXED_CLONE' ; name='MIXED_CLONE' ; namespace='cv' ; value='2']
INFO:root:constant: ['const cv.MONOCHROME_TRANSFER', '3', [], []]
INFO:root:ok: ConstInfo [addedManually='False' ; classname='Photo' ; classpath='' ; cname='MONOCHROME_TRANSFER' ; name='MONOCHROME_TRANSFER' ; namespace='cv' ; value='3']
INFO:root:constant: ['const cv.RECURS_FILTER', '1', [], []]
INFO:root:ok: ConstInfo [addedManually='False' ; classname='Photo' ; classpath='' ; cname='RECURS_FILTER' ; name='RECURS_FILTER' ; namespace='cv' ; value='1']
INFO:root:constant: ['const cv.NORMCONV_FILTER', '2', [], []]
INFO:root:ok: ConstInfo [addedManually='False' ; classname='Photo' ; classpath='' ; cname='NORMCONV_FILTER' ; name='NORMCONV_FILTER' ; namespace='cv' ; value='2']
INFO:root:function: ['cv.inpaint', 'void', [], [['Mat', 'src', '', []], ['Mat', 'inpaintMask', '', []], ['Mat', 'dst', '', ['/O']], ['double', 'inpaintRadius', '', []], ['int', 'flags', '', []]]]
INFO:root:ok: FuncFamilyInfo [funcs='[<__main__.FuncInfo object at 0x1063d9410>]' ; isconstructor='False' ; jname='inpaint']
INFO:root:function: ['cv.fastNlMeansDenoising', 'void', [], [['Mat', 'src', '', []], ['Mat', 'dst', '', ['/O']], ['float', 'h', '3', []], ['int', 'templateWindowSize', '7', []], ['int', 'searchWindowSize', '21', []]]]
INFO:root:ok: FuncFamilyInfo [funcs='[<__main__.FuncInfo object at 0x1063d96d0>]' ; isconstructor='False' ; jname='fastNlMeansDenoising']
INFO:root:function: ['cv.fastNlMeansDenoisingColored', 'void', [], [['Mat', 'src', '', []], ['Mat', 'dst', '', ['/O']], ['float', 'h', '3', []], ['float', 'hColor', '3', []], ['int', 'templateWindowSize', '7', []], ['int', 'searchWindowSize', '21', []]]]
INFO:root:ok: FuncFamilyInfo [funcs='[<__main__.FuncInfo object at 0x1063d98d0>]' ; isconstructor='False' ; jname='fastNlMeansDenoisingColored']
INFO:root:function: ['cv.fastNlMeansDenoisingMulti', 'void', [], [['vector_Mat', 'srcImgs', '', []], ['Mat', 'dst', '', ['/O']], ['int', 'imgToDenoiseIndex', '', []], ['int', 'temporalWindowSize', '', []], ['float', 'h', '3', []], ['int', 'templateWindowSize', '7', []], ['int', 'searchWindowSize', '21', []]]]
INFO:root:ok: FuncFamilyInfo [funcs='[<__main__.FuncInfo object at 0x1063d9b10>]' ; isconstructor='False' ; jname='fastNlMeansDenoisingMulti']
INFO:root:function: ['cv.fastNlMeansDenoisingColoredMulti', 'void', [], [['vector_Mat', 'srcImgs', '', []], ['Mat', 'dst', '', ['/O']], ['int', 'imgToDenoiseIndex', '', []], ['int', 'temporalWindowSize', '', []], ['float', 'h', '3', []], ['float', 'hColor', '3', []], ['int', 'templateWindowSize', '7', []], ['int', 'searchWindowSize', '21', []]]]
INFO:root:ok: FuncFamilyInfo [funcs='[<__main__.FuncInfo object at 0x1063d9d90>]' ; isconstructor='False' ; jname='fastNlMeansDenoisingColoredMulti']
INFO:root:function: ['cv.denoise_TVL1', 'void', [], [['vector_Mat', 'observations', '', []], ['Mat', 'result', '', []], ['double', 'lambda', '1.0', []], ['int', 'niters', '30', []]]]
INFO:root:ok: FuncFamilyInfo [funcs='[<__main__.FuncInfo object at 0x1063ce050>]' ; isconstructor='False' ; jname='denoise_TVL1']
INFO:root:constant: ['const cv.LDR_SIZE', '256', [], []]
INFO:root:ok: ConstInfo [addedManually='False' ; classname='Photo' ; classpath='' ; cname='LDR_SIZE' ; name='LDR_SIZE' ; namespace='cv' ; value='256']
INFO:root:class: ['class cv.Tonemap', ': cv::Algorithm', [], []]
INFO:root:ok: ClassInfo [base='Algorithm' ; classname='' ; classpath='' ; cname='Tonemap' ; consts='[]' ; imports='set(['org.opencv.core.Algorithm'])' ; jname='Tonemap' ; methods='{}' ; methods_suffixes='{}' ; name='Tonemap' ; namespace='cv' ; private_consts='[]' ; props='[]']
INFO:root:function: ['cv.Tonemap.process', 'void', [], [['Mat', 'src', '', []], ['Mat', 'dst', '', ['/O']]]]
INFO:root:ok: FuncFamilyInfo [funcs='[<__main__.FuncInfo object at 0x1063ce290>]' ; isconstructor='False' ; jname='process']
INFO:root:function: ['cv.Tonemap.getGamma', 'float', [], []]
INFO:root:ok: FuncFamilyInfo [funcs='[<__main__.FuncInfo object at 0x1063ce350>]' ; isconstructor='False' ; jname='getGamma']
INFO:root:function: ['cv.Tonemap.setGamma', 'void', [], [['float', 'gamma', '', []]]]
INFO:root:ok: FuncFamilyInfo [funcs='[<__main__.FuncInfo object at 0x1063ce410>]' ; isconstructor='False' ; jname='setGamma']
INFO:root:function: ['cv.createTonemap', 'Ptr_Tonemap', [], [['float', 'gamma', '1.0f', []]]]
INFO:root:ok: FuncFamilyInfo [funcs='[<__main__.FuncInfo object at 0x1063ce450>]' ; isconstructor='False' ; jname='createTonemap']
INFO:root:class: ['class cv.TonemapDrago', ': cv::Tonemap', [], []]
INFO:root:ok: ClassInfo [base='Tonemap' ; classname='' ; classpath='' ; cname='TonemapDrago' ; consts='[]' ; imports='set([])' ; jname='TonemapDrago' ; methods='{}' ; methods_suffixes='{}' ; name='TonemapDrago' ; namespace='cv' ; private_consts='[]' ; props='[]']
INFO:root:function: ['cv.TonemapDrago.getSaturation', 'float', [], []]
INFO:root:ok: FuncFamilyInfo [funcs='[<__main__.FuncInfo object at 0x1063ce650>]' ; isconstructor='False' ; jname='getSaturation']
INFO:root:function: ['cv.TonemapDrago.setSaturation', 'void', [], [['float', 'saturation', '', []]]]
INFO:root:ok: FuncFamilyInfo [funcs='[<__main__.FuncInfo object at 0x1063ce5d0>]' ; isconstructor='False' ; jname='setSaturation']
INFO:root:function: ['cv.TonemapDrago.getBias', 'float', [], []]
INFO:root:ok: FuncFamilyInfo [funcs='[<__main__.FuncInfo object at 0x1063ce6d0>]' ; isconstructor='False' ; jname='getBias']
INFO:root:function: ['cv.TonemapDrago.setBias', 'void', [], [['float', 'bias', '', []]]]
INFO:root:ok: FuncFamilyInfo [funcs='[<__main__.FuncInfo object at 0x1063ce7d0>]' ; isconstructor='False' ; jname='setBias']
INFO:root:function: ['cv.createTonemapDrago', 'Ptr_TonemapDrago', [], [['float', 'gamma', '1.0f', []], ['float', 'saturation', '1.0f', []], ['float', 'bias', '0.85f', []]]]
INFO:root:ok: FuncFamilyInfo [funcs='[<__main__.FuncInfo object at 0x1063ce810>]' ; isconstructor='False' ; jname='createTonemapDrago']
INFO:root:class: ['class cv.TonemapDurand', ': cv::Tonemap', [], []]
INFO:root:ok: ClassInfo [base='Tonemap' ; classname='' ; classpath='' ; cname='TonemapDurand' ; consts='[]' ; imports='set([])' ; jname='TonemapDurand' ; methods='{}' ; methods_suffixes='{}' ; name='TonemapDurand' ; namespace='cv' ; private_consts='[]' ; props='[]']
INFO:root:function: ['cv.TonemapDurand.getSaturation', 'float', [], []]
INFO:root:ok: FuncFamilyInfo [funcs='[<__main__.FuncInfo object at 0x1063cea50>]' ; isconstructor='False' ; jname='getSaturation']
INFO:root:function: ['cv.TonemapDurand.setSaturation', 'void', [], [['float', 'saturation', '', []]]]
INFO:root:ok: FuncFamilyInfo [funcs='[<__main__.FuncInfo object at 0x1063ce9d0>]' ; isconstructor='False' ; jname='setSaturation']
INFO:root:function: ['cv.TonemapDurand.getContrast', 'float', [], []]
INFO:root:ok: FuncFamilyInfo [funcs='[<__main__.FuncInfo object at 0x1063cead0>]' ; isconstructor='False' ; jname='getContrast']
INFO:root:function: ['cv.TonemapDurand.setContrast', 'void', [], [['float', 'contrast', '', []]]]
INFO:root:ok: FuncFamilyInfo [funcs='[<__main__.FuncInfo object at 0x1063ceb90>]' ; isconstructor='False' ; jname='setContrast']
INFO:root:function: ['cv.TonemapDurand.getSigmaSpace', 'float', [], []]
INFO:root:ok: FuncFamilyInfo [funcs='[<__main__.FuncInfo object at 0x1063cec50>]' ; isconstructor='False' ; jname='getSigmaSpace']
INFO:root:function: ['cv.TonemapDurand.setSigmaSpace', 'void', [], [['float', 'sigma_space', '', []]]]
INFO:root:ok: FuncFamilyInfo [funcs='[<__main__.FuncInfo object at 0x1063cecd0>]' ; isconstructor='False' ; jname='setSigmaSpace']
INFO:root:function: ['cv.TonemapDurand.getSigmaColor', 'float', [], []]
INFO:root:ok: FuncFamilyInfo [funcs='[<__main__.FuncInfo object at 0x1063ced10>]' ; isconstructor='False' ; jname='getSigmaColor']
INFO:root:function: ['cv.TonemapDurand.setSigmaColor', 'void', [], [['float', 'sigma_color', '', []]]]
INFO:root:ok: FuncFamilyInfo [funcs='[<__main__.FuncInfo object at 0x1063cee10>]' ; isconstructor='False' ; jname='setSigmaColor']
INFO:root:function: ['cv.createTonemapDurand', 'Ptr_TonemapDurand', [], [['float', 'gamma', '1.0f', []], ['float', 'contrast', '4.0f', []], ['float', 'saturation', '1.0f', []], ['float', 'sigma_space', '2.0f', []], ['float', 'sigma_color', '2.0f', []]]]
INFO:root:ok: FuncFamilyInfo [funcs='[<__main__.FuncInfo object at 0x1063cedd0>]' ; isconstructor='False' ; jname='createTonemapDurand']
INFO:root:class: ['class cv.TonemapReinhard', ': cv::Tonemap', [], []]
INFO:root:ok: ClassInfo [base='Tonemap' ; classname='' ; classpath='' ; cname='TonemapReinhard' ; consts='[]' ; imports='set([])' ; jname='TonemapReinhard' ; methods='{}' ; methods_suffixes='{}' ; name='TonemapReinhard' ; namespace='cv' ; private_consts='[]' ; props='[]']
INFO:root:function: ['cv.TonemapReinhard.getIntensity', 'float', [], []]
INFO:root:ok: FuncFamilyInfo [funcs='[<__main__.FuncInfo object at 0x1063d0190>]' ; isconstructor='False' ; jname='getIntensity']
INFO:root:function: ['cv.TonemapReinhard.setIntensity', 'void', [], [['float', 'intensity', '', []]]]
INFO:root:ok: FuncFamilyInfo [funcs='[<__main__.FuncInfo object at 0x1063d01d0>]' ; isconstructor='False' ; jname='setIntensity']
INFO:root:function: ['cv.TonemapReinhard.getLightAdaptation', 'float', [], []]
INFO:root:ok: FuncFamilyInfo [funcs='[<__main__.FuncInfo object at 0x1063d0210>]' ; isconstructor='False' ; jname='getLightAdaptation']
INFO:root:function: ['cv.TonemapReinhard.setLightAdaptation', 'void', [], [['float', 'light_adapt', '', []]]]
INFO:root:ok: FuncFamilyInfo [funcs='[<__main__.FuncInfo object at 0x1063d0310>]' ; isconstructor='False' ; jname='setLightAdaptation']
INFO:root:function: ['cv.TonemapReinhard.getColorAdaptation', 'float', [], []]
INFO:root:ok: FuncFamilyInfo [funcs='[<__main__.FuncInfo object at 0x1063d0290>]' ; isconstructor='False' ; jname='getColorAdaptation']
INFO:root:function: ['cv.TonemapReinhard.setColorAdaptation', 'void', [], [['float', 'color_adapt', '', []]]]
INFO:root:ok: FuncFamilyInfo [funcs='[<__main__.FuncInfo object at 0x1063d0450>]' ; isconstructor='False' ; jname='setColorAdaptation']
INFO:root:function: ['cv.createTonemapReinhard', 'Ptr_TonemapReinhard', [], [['float', 'gamma', '1.0f', []], ['float', 'intensity', '0.0f', []], ['float', 'light_adapt', '1.0f', []], ['float', 'color_adapt', '0.0f', []]]]
INFO:root:ok: FuncFamilyInfo [funcs='[<__main__.FuncInfo object at 0x1063d03d0>]' ; isconstructor='False' ; jname='createTonemapReinhard']
INFO:root:class: ['class cv.TonemapMantiuk', ': cv::Tonemap', [], []]
INFO:root:ok: ClassInfo [base='Tonemap' ; classname='' ; classpath='' ; cname='TonemapMantiuk' ; consts='[]' ; imports='set([])' ; jname='TonemapMantiuk' ; methods='{}' ; methods_suffixes='{}' ; name='TonemapMantiuk' ; namespace='cv' ; private_consts='[]' ; props='[]']
INFO:root:function: ['cv.TonemapMantiuk.getScale', 'float', [], []]
INFO:root:ok: FuncFamilyInfo [funcs='[<__main__.FuncInfo object at 0x1063d06d0>]' ; isconstructor='False' ; jname='getScale']
INFO:root:function: ['cv.TonemapMantiuk.setScale', 'void', [], [['float', 'scale', '', []]]]
INFO:root:ok: FuncFamilyInfo [funcs='[<__main__.FuncInfo object at 0x1063d0750>]' ; isconstructor='False' ; jname='setScale']
INFO:root:function: ['cv.TonemapMantiuk.getSaturation', 'float', [], []]
INFO:root:ok: FuncFamilyInfo [funcs='[<__main__.FuncInfo object at 0x1063d0710>]' ; isconstructor='False' ; jname='getSaturation']
INFO:root:function: ['cv.TonemapMantiuk.setSaturation', 'void', [], [['float', 'saturation', '', []]]]
INFO:root:ok: FuncFamilyInfo [funcs='[<__main__.FuncInfo object at 0x1063d0850>]' ; isconstructor='False' ; jname='setSaturation']
INFO:root:function: ['cv.createTonemapMantiuk', 'Ptr_TonemapMantiuk', [], [['float', 'gamma', '1.0f', []], ['float', 'scale', '0.7f', []], ['float', 'saturation', '1.0f', []]]]
INFO:root:ok: FuncFamilyInfo [funcs='[<__main__.FuncInfo object at 0x1063d08d0>]' ; isconstructor='False' ; jname='createTonemapMantiuk']
INFO:root:class: ['class cv.AlignExposures', ': cv::Algorithm', [], []]
INFO:root:ok: ClassInfo [base='Algorithm' ; classname='' ; classpath='' ; cname='AlignExposures' ; consts='[]' ; imports='set(['org.opencv.core.Algorithm'])' ; jname='AlignExposures' ; methods='{}' ; methods_suffixes='{}' ; name='AlignExposures' ; namespace='cv' ; private_consts='[]' ; props='[]']
INFO:root:function: ['cv.AlignExposures.process', 'void', [], [['vector_Mat', 'src', '', []], ['vector_Mat', 'dst', '', []], ['Mat', 'times', '', []], ['Mat', 'response', '', []]]]
INFO:root:ok: FuncFamilyInfo [funcs='[<__main__.FuncInfo object at 0x1063d0b50>]' ; isconstructor='False' ; jname='process']
INFO:root:class: ['class cv.AlignMTB', ': cv::AlignExposures', [], []]
INFO:root:ok: ClassInfo [base='AlignExposures' ; classname='' ; classpath='' ; cname='AlignMTB' ; consts='[]' ; imports='set([])' ; jname='AlignMTB' ; methods='{}' ; methods_suffixes='{}' ; name='AlignMTB' ; namespace='cv' ; private_consts='[]' ; props='[]']
INFO:root:function: ['cv.AlignMTB.process', 'void', [], [['vector_Mat', 'src', '', []], ['vector_Mat', 'dst', '', []], ['Mat', 'times', '', []], ['Mat', 'response', '', []]]]
INFO:root:ok: FuncFamilyInfo [funcs='[<__main__.FuncInfo object at 0x1063d0d10>]' ; isconstructor='False' ; jname='process']
INFO:root:function: ['cv.AlignMTB.process', 'void', [], [['vector_Mat', 'src', '', []], ['vector_Mat', 'dst', '', []]]]
INFO:root:ok: FuncFamilyInfo [funcs='[<__main__.FuncInfo object at 0x1063d0e90>]' ; isconstructor='False' ; jname='process']
INFO:root:function: ['cv.AlignMTB.calculateShift', 'Point', [], [['Mat', 'img0', '', []], ['Mat', 'img1', '', []]]]
INFO:root:ok: FuncFamilyInfo [funcs='[<__main__.FuncInfo object at 0x1063d0ed0>]' ; isconstructor='False' ; jname='calculateShift']
INFO:root:function: ['cv.AlignMTB.shiftMat', 'void', [], [['Mat', 'src', '', []], ['Mat', 'dst', '', ['/O']], ['Point', 'shift', '', []]]]
INFO:root:ok: FuncFamilyInfo [funcs='[<__main__.FuncInfo object at 0x1063e6090>]' ; isconstructor='False' ; jname='shiftMat']
INFO:root:function: ['cv.AlignMTB.computeBitmaps', 'void', [], [['Mat', 'img', '', []], ['Mat', 'tb', '', ['/O']], ['Mat', 'eb', '', ['/O']]]]
INFO:root:ok: FuncFamilyInfo [funcs='[<__main__.FuncInfo object at 0x1063e6190>]' ; isconstructor='False' ; jname='computeBitmaps']
INFO:root:function: ['cv.AlignMTB.getMaxBits', 'int', [], []]
INFO:root:ok: FuncFamilyInfo [funcs='[<__main__.FuncInfo object at 0x1063e6310>]' ; isconstructor='False' ; jname='getMaxBits']
INFO:root:function: ['cv.AlignMTB.setMaxBits', 'void', [], [['int', 'max_bits', '', []]]]
INFO:root:ok: FuncFamilyInfo [funcs='[<__main__.FuncInfo object at 0x1063e6390>]' ; isconstructor='False' ; jname='setMaxBits']
INFO:root:function: ['cv.AlignMTB.getExcludeRange', 'int', [], []]
INFO:root:ok: FuncFamilyInfo [funcs='[<__main__.FuncInfo object at 0x1063e6450>]' ; isconstructor='False' ; jname='getExcludeRange']
INFO:root:function: ['cv.AlignMTB.setExcludeRange', 'void', [], [['int', 'exclude_range', '', []]]]
INFO:root:ok: FuncFamilyInfo [funcs='[<__main__.FuncInfo object at 0x1063e64d0>]' ; isconstructor='False' ; jname='setExcludeRange']
INFO:root:function: ['cv.AlignMTB.getCut', 'bool', [], []]
INFO:root:ok: FuncFamilyInfo [funcs='[<__main__.FuncInfo object at 0x1063e6510>]' ; isconstructor='False' ; jname='getCut']
INFO:root:function: ['cv.AlignMTB.setCut', 'void', [], [['bool', 'value', '', []]]]
INFO:root:ok: FuncFamilyInfo [funcs='[<__main__.FuncInfo object at 0x1063e6610>]' ; isconstructor='False' ; jname='setCut']
INFO:root:function: ['cv.createAlignMTB', 'Ptr_AlignMTB', [], [['int', 'max_bits', '6', []], ['int', 'exclude_range', '4', []], ['bool', 'cut', 'true', []]]]
INFO:root:ok: FuncFamilyInfo [funcs='[<__main__.FuncInfo object at 0x1063e6690>]' ; isconstructor='False' ; jname='createAlignMTB']
INFO:root:class: ['class cv.CalibrateCRF', ': cv::Algorithm', [], []]
INFO:root:ok: ClassInfo [base='Algorithm' ; classname='' ; classpath='' ; cname='CalibrateCRF' ; consts='[]' ; imports='set(['org.opencv.core.Algorithm'])' ; jname='CalibrateCRF' ; methods='{}' ; methods_suffixes='{}' ; name='CalibrateCRF' ; namespace='cv' ; private_consts='[]' ; props='[]']
INFO:root:function: ['cv.CalibrateCRF.process', 'void', [], [['vector_Mat', 'src', '', []], ['Mat', 'dst', '', ['/O']], ['Mat', 'times', '', []]]]
INFO:root:ok: FuncFamilyInfo [funcs='[<__main__.FuncInfo object at 0x1063e6890>]' ; isconstructor='False' ; jname='process']
INFO:root:class: ['class cv.CalibrateDebevec', ': cv::CalibrateCRF', [], []]
INFO:root:ok: ClassInfo [base='CalibrateCRF' ; classname='' ; classpath='' ; cname='CalibrateDebevec' ; consts='[]' ; imports='set([])' ; jname='CalibrateDebevec' ; methods='{}' ; methods_suffixes='{}' ; name='CalibrateDebevec' ; namespace='cv' ; private_consts='[]' ; props='[]']
INFO:root:function: ['cv.CalibrateDebevec.getLambda', 'float', [], []]
INFO:root:ok: FuncFamilyInfo [funcs='[<__main__.FuncInfo object at 0x1063e6a50>]' ; isconstructor='False' ; jname='getLambda']
INFO:root:function: ['cv.CalibrateDebevec.setLambda', 'void', [], [['float', 'lambda', '', []]]]
INFO:root:ok: FuncFamilyInfo [funcs='[<__main__.FuncInfo object at 0x1063e6ad0>]' ; isconstructor='False' ; jname='setLambda']
INFO:root:function: ['cv.CalibrateDebevec.getSamples', 'int', [], []]
INFO:root:ok: FuncFamilyInfo [funcs='[<__main__.FuncInfo object at 0x1063e6a90>]' ; isconstructor='False' ; jname='getSamples']
INFO:root:function: ['cv.CalibrateDebevec.setSamples', 'void', [], [['int', 'samples', '', []]]]
INFO:root:ok: FuncFamilyInfo [funcs='[<__main__.FuncInfo object at 0x1063e6c10>]' ; isconstructor='False' ; jname='setSamples']
INFO:root:function: ['cv.CalibrateDebevec.getRandom', 'bool', [], []]
INFO:root:ok: FuncFamilyInfo [funcs='[<__main__.FuncInfo object at 0x1063e6cd0>]' ; isconstructor='False' ; jname='getRandom']
INFO:root:function: ['cv.CalibrateDebevec.setRandom', 'void', [], [['bool', 'random', '', []]]]
INFO:root:ok: FuncFamilyInfo [funcs='[<__main__.FuncInfo object at 0x1063e6d50>]' ; isconstructor='False' ; jname='setRandom']
INFO:root:function: ['cv.createCalibrateDebevec', 'Ptr_CalibrateDebevec', [], [['int', 'samples', '70', []], ['float', 'lambda', '10.0f', []], ['bool', 'random', 'false', []]]]
INFO:root:ok: FuncFamilyInfo [funcs='[<__main__.FuncInfo object at 0x1063e6e10>]' ; isconstructor='False' ; jname='createCalibrateDebevec']
INFO:root:class: ['class cv.CalibrateRobertson', ': cv::CalibrateCRF', [], []]
INFO:root:ok: ClassInfo [base='CalibrateCRF' ; classname='' ; classpath='' ; cname='CalibrateRobertson' ; consts='[]' ; imports='set([])' ; jname='CalibrateRobertson' ; methods='{}' ; methods_suffixes='{}' ; name='CalibrateRobertson' ; namespace='cv' ; private_consts='[]' ; props='[]']
INFO:root:function: ['cv.CalibrateRobertson.getMaxIter', 'int', [], []]
INFO:root:ok: FuncFamilyInfo [funcs='[<__main__.FuncInfo object at 0x1063e9050>]' ; isconstructor='False' ; jname='getMaxIter']
INFO:root:function: ['cv.CalibrateRobertson.setMaxIter', 'void', [], [['int', 'max_iter', '', []]]]
INFO:root:ok: FuncFamilyInfo [funcs='[<__main__.FuncInfo object at 0x1063e9110>]' ; isconstructor='False' ; jname='setMaxIter']
INFO:root:function: ['cv.CalibrateRobertson.getThreshold', 'float', [], []]
INFO:root:ok: FuncFamilyInfo [funcs='[<__main__.FuncInfo object at 0x1063e9090>]' ; isconstructor='False' ; jname='getThreshold']
INFO:root:function: ['cv.CalibrateRobertson.setThreshold', 'void', [], [['float', 'threshold', '', []]]]
INFO:root:ok: FuncFamilyInfo [funcs='[<__main__.FuncInfo object at 0x1063e91d0>]' ; isconstructor='False' ; jname='setThreshold']
INFO:root:function: ['cv.CalibrateRobertson.getRadiance', 'Mat', [], []]
INFO:root:ok: FuncFamilyInfo [funcs='[<__main__.FuncInfo object at 0x1063e9250>]' ; isconstructor='False' ; jname='getRadiance']
INFO:root:function: ['cv.createCalibrateRobertson', 'Ptr_CalibrateRobertson', [], [['int', 'max_iter', '30', []], ['float', 'threshold', '0.01f', []]]]
INFO:root:ok: FuncFamilyInfo [funcs='[<__main__.FuncInfo object at 0x1063e9390>]' ; isconstructor='False' ; jname='createCalibrateRobertson']
INFO:root:class: ['class cv.MergeExposures', ': cv::Algorithm', [], []]
INFO:root:ok: ClassInfo [base='Algorithm' ; classname='' ; classpath='' ; cname='MergeExposures' ; consts='[]' ; imports='set(['org.opencv.core.Algorithm'])' ; jname='MergeExposures' ; methods='{}' ; methods_suffixes='{}' ; name='MergeExposures' ; namespace='cv' ; private_consts='[]' ; props='[]']
INFO:root:function: ['cv.MergeExposures.process', 'void', [], [['vector_Mat', 'src', '', []], ['Mat', 'dst', '', ['/O']], ['Mat', 'times', '', []], ['Mat', 'response', '', []]]]
INFO:root:ok: FuncFamilyInfo [funcs='[<__main__.FuncInfo object at 0x1063e9510>]' ; isconstructor='False' ; jname='process']
INFO:root:class: ['class cv.MergeDebevec', ': cv::MergeExposures', [], []]
INFO:root:ok: ClassInfo [base='MergeExposures' ; classname='' ; classpath='' ; cname='MergeDebevec' ; consts='[]' ; imports='set([])' ; jname='MergeDebevec' ; methods='{}' ; methods_suffixes='{}' ; name='MergeDebevec' ; namespace='cv' ; private_consts='[]' ; props='[]']
INFO:root:function: ['cv.MergeDebevec.process', 'void', [], [['vector_Mat', 'src', '', []], ['Mat', 'dst', '', ['/O']], ['Mat', 'times', '', []], ['Mat', 'response', '', []]]]
INFO:root:ok: FuncFamilyInfo [funcs='[<__main__.FuncInfo object at 0x1063e9750>]' ; isconstructor='False' ; jname='process']
INFO:root:function: ['cv.MergeDebevec.process', 'void', [], [['vector_Mat', 'src', '', []], ['Mat', 'dst', '', ['/O']], ['Mat', 'times', '', []]]]
INFO:root:ok: FuncFamilyInfo [funcs='[<__main__.FuncInfo object at 0x1063e9850>]' ; isconstructor='False' ; jname='process']
INFO:root:function: ['cv.createMergeDebevec', 'Ptr_MergeDebevec', [], []]
INFO:root:ok: FuncFamilyInfo [funcs='[<__main__.FuncInfo object at 0x1063e98d0>]' ; isconstructor='False' ; jname='createMergeDebevec']
INFO:root:class: ['class cv.MergeMertens', ': cv::MergeExposures', [], []]
INFO:root:ok: ClassInfo [base='MergeExposures' ; classname='' ; classpath='' ; cname='MergeMertens' ; consts='[]' ; imports='set([])' ; jname='MergeMertens' ; methods='{}' ; methods_suffixes='{}' ; name='MergeMertens' ; namespace='cv' ; private_consts='[]' ; props='[]']
INFO:root:function: ['cv.MergeMertens.process', 'void', [], [['vector_Mat', 'src', '', []], ['Mat', 'dst', '', ['/O']], ['Mat', 'times', '', []], ['Mat', 'response', '', []]]]
INFO:root:ok: FuncFamilyInfo [funcs='[<__main__.FuncInfo object at 0x1063e99d0>]' ; isconstructor='False' ; jname='process']
INFO:root:function: ['cv.MergeMertens.process', 'void', [], [['vector_Mat', 'src', '', []], ['Mat', 'dst', '', ['/O']]]]
INFO:root:ok: FuncFamilyInfo [funcs='[<__main__.FuncInfo object at 0x1063e9b90>]' ; isconstructor='False' ; jname='process']
INFO:root:function: ['cv.MergeMertens.getContrastWeight', 'float', [], []]
INFO:root:ok: FuncFamilyInfo [funcs='[<__main__.FuncInfo object at 0x1063e9c10>]' ; isconstructor='False' ; jname='getContrastWeight']
INFO:root:function: ['cv.MergeMertens.setContrastWeight', 'void', [], [['float', 'contrast_weiht', '', []]]]
INFO:root:ok: FuncFamilyInfo [funcs='[<__main__.FuncInfo object at 0x1063e9d10>]' ; isconstructor='False' ; jname='setContrastWeight']
INFO:root:function: ['cv.MergeMertens.getSaturationWeight', 'float', [], []]
INFO:root:ok: FuncFamilyInfo [funcs='[<__main__.FuncInfo object at 0x1063e9cd0>]' ; isconstructor='False' ; jname='getSaturationWeight']
INFO:root:function: ['cv.MergeMertens.setSaturationWeight', 'void', [], [['float', 'saturation_weight', '', []]]]
INFO:root:ok: FuncFamilyInfo [funcs='[<__main__.FuncInfo object at 0x1063e9e50>]' ; isconstructor='False' ; jname='setSaturationWeight']
INFO:root:function: ['cv.MergeMertens.getExposureWeight', 'float', [], []]
INFO:root:ok: FuncFamilyInfo [funcs='[<__main__.FuncInfo object at 0x1063e9dd0>]' ; isconstructor='False' ; jname='getExposureWeight']
INFO:root:function: ['cv.MergeMertens.setExposureWeight', 'void', [], [['float', 'exposure_weight', '', []]]]
INFO:root:ok: FuncFamilyInfo [funcs='[<__main__.FuncInfo object at 0x1063e9f90>]' ; isconstructor='False' ; jname='setExposureWeight']
INFO:root:function: ['cv.createMergeMertens', 'Ptr_MergeMertens', [], [['float', 'contrast_weight', '1.0f', []], ['float', 'saturation_weight', '1.0f', []], ['float', 'exposure_weight', '0.0f', []]]]
INFO:root:ok: FuncFamilyInfo [funcs='[<__main__.FuncInfo object at 0x1063ec050>]' ; isconstructor='False' ; jname='createMergeMertens']
INFO:root:class: ['class cv.MergeRobertson', ': cv::MergeExposures', [], []]
INFO:root:ok: ClassInfo [base='MergeExposures' ; classname='' ; classpath='' ; cname='MergeRobertson' ; consts='[]' ; imports='set([])' ; jname='MergeRobertson' ; methods='{}' ; methods_suffixes='{}' ; name='MergeRobertson' ; namespace='cv' ; private_consts='[]' ; props='[]']
INFO:root:function: ['cv.MergeRobertson.process', 'void', [], [['vector_Mat', 'src', '', []], ['Mat', 'dst', '', ['/O']], ['Mat', 'times', '', []], ['Mat', 'response', '', []]]]
INFO:root:ok: FuncFamilyInfo [funcs='[<__main__.FuncInfo object at 0x1063ec1d0>]' ; isconstructor='False' ; jname='process']
INFO:root:function: ['cv.MergeRobertson.process', 'void', [], [['vector_Mat', 'src', '', []], ['Mat', 'dst', '', ['/O']], ['Mat', 'times', '', []]]]
INFO:root:ok: FuncFamilyInfo [funcs='[<__main__.FuncInfo object at 0x1063ec250>]' ; isconstructor='False' ; jname='process']
INFO:root:function: ['cv.createMergeRobertson', 'Ptr_MergeRobertson', [], []]
INFO:root:ok: FuncFamilyInfo [funcs='[<__main__.FuncInfo object at 0x1063ec390>]' ; isconstructor='False' ; jname='createMergeRobertson']
INFO:root:function: ['cv.decolor', 'void', [], [['Mat', 'src', '', []], ['Mat', 'grayscale', '', ['/O']], ['Mat', 'color_boost', '', ['/O']]]]
INFO:root:ok: FuncFamilyInfo [funcs='[<__main__.FuncInfo object at 0x1063ec490>]' ; isconstructor='False' ; jname='decolor']
INFO:root:function: ['cv.seamlessClone', 'void', [], [['Mat', 'src', '', []], ['Mat', 'dst', '', []], ['Mat', 'mask', '', []], ['Point', 'p', '', []], ['Mat', 'blend', '', ['/O']], ['int', 'flags', '', []]]]
INFO:root:ok: FuncFamilyInfo [funcs='[<__main__.FuncInfo object at 0x1063ec650>]' ; isconstructor='False' ; jname='seamlessClone']
INFO:root:function: ['cv.colorChange', 'void', [], [['Mat', 'src', '', []], ['Mat', 'mask', '', []], ['Mat', 'dst', '', ['/O']], ['float', 'red_mul', '1.0f', []], ['float', 'green_mul', '1.0f', []], ['float', 'blue_mul', '1.0f', []]]]
INFO:root:ok: FuncFamilyInfo [funcs='[<__main__.FuncInfo object at 0x1063ec850>]' ; isconstructor='False' ; jname='colorChange']
INFO:root:function: ['cv.illuminationChange', 'void', [], [['Mat', 'src', '', []], ['Mat', 'mask', '', []], ['Mat', 'dst', '', ['/O']], ['float', 'alpha', '0.2f', []], ['float', 'beta', '0.4f', []]]]
INFO:root:ok: FuncFamilyInfo [funcs='[<__main__.FuncInfo object at 0x1063eca50>]' ; isconstructor='False' ; jname='illuminationChange']
INFO:root:function: ['cv.textureFlattening', 'void', [], [['Mat', 'src', '', []], ['Mat', 'mask', '', []], ['Mat', 'dst', '', ['/O']], ['double', 'low_threshold', '30', []], ['double', 'high_threshold', '45', []], ['int', 'kernel_size', '3', []]]]
INFO:root:ok: FuncFamilyInfo [funcs='[<__main__.FuncInfo object at 0x1063ecc10>]' ; isconstructor='False' ; jname='textureFlattening']
INFO:root:function: ['cv.edgePreservingFilter', 'void', [], [['Mat', 'src', '', []], ['Mat', 'dst', '', ['/O']], ['int', 'flags', '1', []], ['float', 'sigma_s', '60', []], ['float', 'sigma_r', '0.4f', []]]]
INFO:root:ok: FuncFamilyInfo [funcs='[<__main__.FuncInfo object at 0x1063ece10>]' ; isconstructor='False' ; jname='edgePreservingFilter']
INFO:root:function: ['cv.detailEnhance', 'void', [], [['Mat', 'src', '', []], ['Mat', 'dst', '', ['/O']], ['float', 'sigma_s', '10', []], ['float', 'sigma_r', '0.15f', []]]]
INFO:root:ok: FuncFamilyInfo [funcs='[<__main__.FuncInfo object at 0x1063ed050>]' ; isconstructor='False' ; jname='detailEnhance']
INFO:root:function: ['cv.pencilSketch', 'void', [], [['Mat', 'src', '', []], ['Mat', 'dst1', '', ['/O']], ['Mat', 'dst2', '', ['/O']], ['float', 'sigma_s', '60', []], ['float', 'sigma_r', '0.07f', []], ['float', 'shade_factor', '0.02f', []]]]
INFO:root:ok: FuncFamilyInfo [funcs='[<__main__.FuncInfo object at 0x1063ed1d0>]' ; isconstructor='False' ; jname='pencilSketch']
INFO:root:function: ['cv.stylization', 'void', [], [['Mat', 'src', '', []], ['Mat', 'dst', '', ['/O']], ['float', 'sigma_s', '60', []], ['float', 'sigma_r', '0.45f', []]]]
INFO:root:ok: FuncFamilyInfo [funcs='[<__main__.FuncInfo object at 0x1063ed3d0>]' ; isconstructor='False' ; jname='stylization']
INFO:root:=== Header: /Users/swinston/Mirada/lib/c/opencv/modules/photo/include/opencv2/photo/cuda.hpp
INFO:root:=== Namespaces: set(['', 'cv.cuda', 'cv'])
INFO:root:=== Header: /Users/swinston/Mirada/lib/c/opencv/modules/photo/include/opencv2/photo/photo.hpp
INFO:root:=== Namespaces: set(['', 'cv.cuda', 'cv'])
