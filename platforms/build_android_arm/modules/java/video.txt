PORTED FUNCs LIST (76 of 76):

 void calc(Mat I0, Mat I1, Mat& flow)
 void collectGarbage()
 void apply(Mat image, Mat& fgmask, double learningRate = -1)
 void getBackgroundImage(Mat& backgroundImage)
 RotatedRect CamShift(Mat probImage, Rect& window, TermCriteria criteria)
 int buildOpticalFlowPyramid(Mat img, vector_Mat& pyramid, Size winSize, int maxLevel, bool withDerivatives = true, int pyrBorder = BORDER_REFLECT_101, int derivBorder = BORDER_CONSTANT, bool tryReuseInputImage = true)
 void calcOpticalFlowFarneback(Mat prev, Mat next, Mat& flow, double pyr_scale, int levels, int winsize, int iterations, int poly_n, double poly_sigma, int flags)
 void calcOpticalFlowPyrLK(Mat prevImg, Mat nextImg, vector_Point2f prevPts, vector_Point2f& nextPts, vector_uchar& status, vector_float& err, Size winSize = Size(21,21), int maxLevel = 3, TermCriteria criteria = TermCriteria(TermCriteria::COUNT+TermCriteria::EPS, 30, 0.01), int flags = 0, double minEigThreshold = 1e-4)
 Ptr_BackgroundSubtractorKNN createBackgroundSubtractorKNN(int history = 500, double dist2Threshold = 400.0, bool detectShadows = true)
 Ptr_BackgroundSubtractorMOG2 createBackgroundSubtractorMOG2(int history = 500, double varThreshold = 16, bool detectShadows = true)
 Ptr_DenseOpticalFlow createOptFlow_DualTVL1()
 Mat estimateRigidTransform(Mat src, Mat dst, bool fullAffine)
 double findTransformECC(Mat templateImage, Mat inputImage, Mat& warpMatrix, int motionType = MOTION_AFFINE, TermCriteria criteria = TermCriteria(TermCriteria::COUNT+TermCriteria::EPS, 50, 0.001))
 int meanShift(Mat probImage, Rect& window, TermCriteria criteria)
  KalmanFilter()
  KalmanFilter(int dynamParams, int measureParams, int controlParams = 0, int type = CV_32F)
 Mat correct(Mat measurement)
 Mat predict(Mat control = Mat())
Mat KalmanFilter::statePre
void KalmanFilter::statePre
Mat KalmanFilter::statePost
void KalmanFilter::statePost
Mat KalmanFilter::transitionMatrix
void KalmanFilter::transitionMatrix
Mat KalmanFilter::controlMatrix
void KalmanFilter::controlMatrix
Mat KalmanFilter::measurementMatrix
void KalmanFilter::measurementMatrix
Mat KalmanFilter::processNoiseCov
void KalmanFilter::processNoiseCov
Mat KalmanFilter::measurementNoiseCov
void KalmanFilter::measurementNoiseCov
Mat KalmanFilter::errorCovPre
void KalmanFilter::errorCovPre
Mat KalmanFilter::gain
void KalmanFilter::gain
Mat KalmanFilter::errorCovPost
void KalmanFilter::errorCovPost
 double getBackgroundRatio()
 double getComplexityReductionThreshold()
 bool getDetectShadows()
 int getHistory()
 int getNMixtures()
 double getShadowThreshold()
 int getShadowValue()
 double getVarInit()
 double getVarMax()
 double getVarMin()
 double getVarThreshold()
 double getVarThresholdGen()
 void setBackgroundRatio(double ratio)
 void setComplexityReductionThreshold(double ct)
 void setDetectShadows(bool detectShadows)
 void setHistory(int history)
 void setNMixtures(int nmixtures)
 void setShadowThreshold(double threshold)
 void setShadowValue(int value)
 void setVarInit(double varInit)
 void setVarMax(double varMax)
 void setVarMin(double varMin)
 void setVarThreshold(double varThreshold)
 void setVarThresholdGen(double varThresholdGen)
 bool getDetectShadows()
 double getDist2Threshold()
 int getHistory()
 int getNSamples()
 double getShadowThreshold()
 int getShadowValue()
 int getkNNSamples()
 void setDetectShadows(bool detectShadows)
 void setDist2Threshold(double _dist2Threshold)
 void setHistory(int history)
 void setNSamples(int _nN)
 void setShadowThreshold(double threshold)
 void setShadowValue(int value)
 void setkNNSamples(int _nkNN)

SKIPPED FUNCs LIST (0 of 76):


0 def args - 48 funcs
1 def args - 2 funcs
2 def args - 2 funcs
3 def args - 2 funcs
4 def args - 1 funcs
5 def args - 1 funcs

class as MAP:
	

class SIMPLE:
	