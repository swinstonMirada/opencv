INFO:root:class: ['class Features2d', '', [], []]
INFO:root:ok: ClassInfo [base='' ; classname='' ; classpath='' ; cname='Features2d' ; consts='[]' ; imports='set([])' ; jname='Features2d' ; methods='{}' ; methods_suffixes='{}' ; name='Features2d' ; namespace='' ; private_consts='[]' ; props='[]']
INFO:root:=== Header: /Users/swinston/Mirada/lib/c/opencv/modules/features2d/../java/generator/src/cpp/features2d_manual.hpp
INFO:root:=== Namespaces: set(['cv'])
INFO:root:class: ['class cv.javaFeatureDetector', '', ['=FeatureDetector'], []]
INFO:root:ok: ClassInfo [base='' ; classname='' ; classpath='' ; cname='javaFeatureDetector' ; consts='[]' ; imports='set([])' ; jname='FeatureDetector' ; methods='{}' ; methods_suffixes='{}' ; name='javaFeatureDetector' ; namespace='cv' ; private_consts='[]' ; props='[]']
INFO:root:function: ['cv.javaFeatureDetector.detect', 'void', [], [['Mat', 'image', '', []], ['vector_KeyPoint', 'keypoints', '', ['/O']], ['Mat', 'mask', 'Mat()', []]]]
INFO:root:ok: FuncFamilyInfo [funcs='[<__main__.FuncInfo object at 0x10b49a4d0>]' ; isconstructor='False' ; jname='detect']
INFO:root:function: ['cv.javaFeatureDetector.detect', 'void', [], [['vector_Mat', 'images', '', []], ['vector_vector_KeyPoint', 'keypoints', '', ['/O']], ['vector_Mat', 'masks', 'std::vector<Mat>()', []]]]
INFO:root:ok: FuncFamilyInfo [funcs='[<__main__.FuncInfo object at 0x10b49a510>]' ; isconstructor='False' ; jname='detect']
INFO:root:function: ['cv.javaFeatureDetector.empty', 'bool', [], []]
INFO:root:ok: FuncFamilyInfo [funcs='[<__main__.FuncInfo object at 0x10b49a690>]' ; isconstructor='False' ; jname='empty']
INFO:root:constant: ['const cv.javaFeatureDetector.FAST', '1', [], []]
INFO:root:ok: ConstInfo [addedManually='False' ; classname='javaFeatureDetector' ; classpath='javaFeatureDetector' ; cname='FAST' ; name='FAST' ; namespace='cv' ; value='1']
INFO:root:constant: ['const cv.javaFeatureDetector.STAR', '2', [], []]
INFO:root:ok: ConstInfo [addedManually='False' ; classname='javaFeatureDetector' ; classpath='javaFeatureDetector' ; cname='STAR' ; name='STAR' ; namespace='cv' ; value='2']
INFO:root:constant: ['const cv.javaFeatureDetector.SIFT', '3', [], []]
INFO:root:ok: ConstInfo [addedManually='False' ; classname='javaFeatureDetector' ; classpath='javaFeatureDetector' ; cname='SIFT' ; name='SIFT' ; namespace='cv' ; value='3']
INFO:root:constant: ['const cv.javaFeatureDetector.SURF', '4', [], []]
INFO:root:ok: ConstInfo [addedManually='False' ; classname='javaFeatureDetector' ; classpath='javaFeatureDetector' ; cname='SURF' ; name='SURF' ; namespace='cv' ; value='4']
INFO:root:constant: ['const cv.javaFeatureDetector.ORB', '5', [], []]
INFO:root:ok: ConstInfo [addedManually='False' ; classname='javaFeatureDetector' ; classpath='javaFeatureDetector' ; cname='ORB' ; name='ORB' ; namespace='cv' ; value='5']
INFO:root:constant: ['const cv.javaFeatureDetector.MSER', '6', [], []]
INFO:root:ok: ConstInfo [addedManually='False' ; classname='javaFeatureDetector' ; classpath='javaFeatureDetector' ; cname='MSER' ; name='MSER' ; namespace='cv' ; value='6']
INFO:root:constant: ['const cv.javaFeatureDetector.GFTT', '7', [], []]
INFO:root:ok: ConstInfo [addedManually='False' ; classname='javaFeatureDetector' ; classpath='javaFeatureDetector' ; cname='GFTT' ; name='GFTT' ; namespace='cv' ; value='7']
INFO:root:constant: ['const cv.javaFeatureDetector.HARRIS', '8', [], []]
INFO:root:ok: ConstInfo [addedManually='False' ; classname='javaFeatureDetector' ; classpath='javaFeatureDetector' ; cname='HARRIS' ; name='HARRIS' ; namespace='cv' ; value='8']
INFO:root:constant: ['const cv.javaFeatureDetector.SIMPLEBLOB', '9', [], []]
INFO:root:ok: ConstInfo [addedManually='False' ; classname='javaFeatureDetector' ; classpath='javaFeatureDetector' ; cname='SIMPLEBLOB' ; name='SIMPLEBLOB' ; namespace='cv' ; value='9']
INFO:root:constant: ['const cv.javaFeatureDetector.DENSE', '10', [], []]
INFO:root:ok: ConstInfo [addedManually='False' ; classname='javaFeatureDetector' ; classpath='javaFeatureDetector' ; cname='DENSE' ; name='DENSE' ; namespace='cv' ; value='10']
INFO:root:constant: ['const cv.javaFeatureDetector.BRISK', '11', [], []]
INFO:root:ok: ConstInfo [addedManually='False' ; classname='javaFeatureDetector' ; classpath='javaFeatureDetector' ; cname='BRISK' ; name='BRISK' ; namespace='cv' ; value='11']
INFO:root:constant: ['const cv.javaFeatureDetector.AKAZE', '12', [], []]
INFO:root:ok: ConstInfo [addedManually='False' ; classname='javaFeatureDetector' ; classpath='javaFeatureDetector' ; cname='AKAZE' ; name='AKAZE' ; namespace='cv' ; value='12']
INFO:root:constant: ['const cv.javaFeatureDetector.GRIDDETECTOR', '1000', [], []]
INFO:root:ok: ConstInfo [addedManually='False' ; classname='javaFeatureDetector' ; classpath='javaFeatureDetector' ; cname='GRIDDETECTOR' ; name='GRIDDETECTOR' ; namespace='cv' ; value='1000']
INFO:root:constant: ['const cv.javaFeatureDetector.GRID_FAST', 'GRIDDETECTOR + FAST', [], []]
INFO:root:ok: ConstInfo [addedManually='False' ; classname='javaFeatureDetector' ; classpath='javaFeatureDetector' ; cname='GRID_FAST' ; name='GRID_FAST' ; namespace='cv' ; value='GRIDDETECTOR + FAST']
INFO:root:constant: ['const cv.javaFeatureDetector.GRID_STAR', 'GRIDDETECTOR + STAR', [], []]
INFO:root:ok: ConstInfo [addedManually='False' ; classname='javaFeatureDetector' ; classpath='javaFeatureDetector' ; cname='GRID_STAR' ; name='GRID_STAR' ; namespace='cv' ; value='GRIDDETECTOR + STAR']
INFO:root:constant: ['const cv.javaFeatureDetector.GRID_SIFT', 'GRIDDETECTOR + SIFT', [], []]
INFO:root:ok: ConstInfo [addedManually='False' ; classname='javaFeatureDetector' ; classpath='javaFeatureDetector' ; cname='GRID_SIFT' ; name='GRID_SIFT' ; namespace='cv' ; value='GRIDDETECTOR + SIFT']
INFO:root:constant: ['const cv.javaFeatureDetector.GRID_SURF', 'GRIDDETECTOR + SURF', [], []]
INFO:root:ok: ConstInfo [addedManually='False' ; classname='javaFeatureDetector' ; classpath='javaFeatureDetector' ; cname='GRID_SURF' ; name='GRID_SURF' ; namespace='cv' ; value='GRIDDETECTOR + SURF']
INFO:root:constant: ['const cv.javaFeatureDetector.GRID_ORB', 'GRIDDETECTOR + ORB', [], []]
INFO:root:ok: ConstInfo [addedManually='False' ; classname='javaFeatureDetector' ; classpath='javaFeatureDetector' ; cname='GRID_ORB' ; name='GRID_ORB' ; namespace='cv' ; value='GRIDDETECTOR + ORB']
INFO:root:constant: ['const cv.javaFeatureDetector.GRID_MSER', 'GRIDDETECTOR + MSER', [], []]
INFO:root:ok: ConstInfo [addedManually='False' ; classname='javaFeatureDetector' ; classpath='javaFeatureDetector' ; cname='GRID_MSER' ; name='GRID_MSER' ; namespace='cv' ; value='GRIDDETECTOR + MSER']
INFO:root:constant: ['const cv.javaFeatureDetector.GRID_GFTT', 'GRIDDETECTOR + GFTT', [], []]
INFO:root:ok: ConstInfo [addedManually='False' ; classname='javaFeatureDetector' ; classpath='javaFeatureDetector' ; cname='GRID_GFTT' ; name='GRID_GFTT' ; namespace='cv' ; value='GRIDDETECTOR + GFTT']
INFO:root:constant: ['const cv.javaFeatureDetector.GRID_HARRIS', 'GRIDDETECTOR + HARRIS', [], []]
INFO:root:ok: ConstInfo [addedManually='False' ; classname='javaFeatureDetector' ; classpath='javaFeatureDetector' ; cname='GRID_HARRIS' ; name='GRID_HARRIS' ; namespace='cv' ; value='GRIDDETECTOR + HARRIS']
INFO:root:constant: ['const cv.javaFeatureDetector.GRID_SIMPLEBLOB', 'GRIDDETECTOR + SIMPLEBLOB', [], []]
INFO:root:ok: ConstInfo [addedManually='False' ; classname='javaFeatureDetector' ; classpath='javaFeatureDetector' ; cname='GRID_SIMPLEBLOB' ; name='GRID_SIMPLEBLOB' ; namespace='cv' ; value='GRIDDETECTOR + SIMPLEBLOB']
INFO:root:constant: ['const cv.javaFeatureDetector.GRID_DENSE', 'GRIDDETECTOR + DENSE', [], []]
INFO:root:ok: ConstInfo [addedManually='False' ; classname='javaFeatureDetector' ; classpath='javaFeatureDetector' ; cname='GRID_DENSE' ; name='GRID_DENSE' ; namespace='cv' ; value='GRIDDETECTOR + DENSE']
INFO:root:constant: ['const cv.javaFeatureDetector.GRID_BRISK', 'GRIDDETECTOR + BRISK', [], []]
INFO:root:ok: ConstInfo [addedManually='False' ; classname='javaFeatureDetector' ; classpath='javaFeatureDetector' ; cname='GRID_BRISK' ; name='GRID_BRISK' ; namespace='cv' ; value='GRIDDETECTOR + BRISK']
INFO:root:constant: ['const cv.javaFeatureDetector.GRID_AKAZE', 'GRIDDETECTOR + AKAZE', [], []]
INFO:root:ok: ConstInfo [addedManually='False' ; classname='javaFeatureDetector' ; classpath='javaFeatureDetector' ; cname='GRID_AKAZE' ; name='GRID_AKAZE' ; namespace='cv' ; value='GRIDDETECTOR + AKAZE']
INFO:root:constant: ['const cv.javaFeatureDetector.PYRAMIDDETECTOR', '2000', [], []]
INFO:root:ok: ConstInfo [addedManually='False' ; classname='javaFeatureDetector' ; classpath='javaFeatureDetector' ; cname='PYRAMIDDETECTOR' ; name='PYRAMIDDETECTOR' ; namespace='cv' ; value='2000']
INFO:root:constant: ['const cv.javaFeatureDetector.PYRAMID_FAST', 'PYRAMIDDETECTOR + FAST', [], []]
INFO:root:ok: ConstInfo [addedManually='False' ; classname='javaFeatureDetector' ; classpath='javaFeatureDetector' ; cname='PYRAMID_FAST' ; name='PYRAMID_FAST' ; namespace='cv' ; value='PYRAMIDDETECTOR + FAST']
INFO:root:constant: ['const cv.javaFeatureDetector.PYRAMID_STAR', 'PYRAMIDDETECTOR + STAR', [], []]
INFO:root:ok: ConstInfo [addedManually='False' ; classname='javaFeatureDetector' ; classpath='javaFeatureDetector' ; cname='PYRAMID_STAR' ; name='PYRAMID_STAR' ; namespace='cv' ; value='PYRAMIDDETECTOR + STAR']
INFO:root:constant: ['const cv.javaFeatureDetector.PYRAMID_SIFT', 'PYRAMIDDETECTOR + SIFT', [], []]
INFO:root:ok: ConstInfo [addedManually='False' ; classname='javaFeatureDetector' ; classpath='javaFeatureDetector' ; cname='PYRAMID_SIFT' ; name='PYRAMID_SIFT' ; namespace='cv' ; value='PYRAMIDDETECTOR + SIFT']
INFO:root:constant: ['const cv.javaFeatureDetector.PYRAMID_SURF', 'PYRAMIDDETECTOR + SURF', [], []]
INFO:root:ok: ConstInfo [addedManually='False' ; classname='javaFeatureDetector' ; classpath='javaFeatureDetector' ; cname='PYRAMID_SURF' ; name='PYRAMID_SURF' ; namespace='cv' ; value='PYRAMIDDETECTOR + SURF']
INFO:root:constant: ['const cv.javaFeatureDetector.PYRAMID_ORB', 'PYRAMIDDETECTOR + ORB', [], []]
INFO:root:ok: ConstInfo [addedManually='False' ; classname='javaFeatureDetector' ; classpath='javaFeatureDetector' ; cname='PYRAMID_ORB' ; name='PYRAMID_ORB' ; namespace='cv' ; value='PYRAMIDDETECTOR + ORB']
INFO:root:constant: ['const cv.javaFeatureDetector.PYRAMID_MSER', 'PYRAMIDDETECTOR + MSER', [], []]
INFO:root:ok: ConstInfo [addedManually='False' ; classname='javaFeatureDetector' ; classpath='javaFeatureDetector' ; cname='PYRAMID_MSER' ; name='PYRAMID_MSER' ; namespace='cv' ; value='PYRAMIDDETECTOR + MSER']
INFO:root:constant: ['const cv.javaFeatureDetector.PYRAMID_GFTT', 'PYRAMIDDETECTOR + GFTT', [], []]
INFO:root:ok: ConstInfo [addedManually='False' ; classname='javaFeatureDetector' ; classpath='javaFeatureDetector' ; cname='PYRAMID_GFTT' ; name='PYRAMID_GFTT' ; namespace='cv' ; value='PYRAMIDDETECTOR + GFTT']
INFO:root:constant: ['const cv.javaFeatureDetector.PYRAMID_HARRIS', 'PYRAMIDDETECTOR + HARRIS', [], []]
INFO:root:ok: ConstInfo [addedManually='False' ; classname='javaFeatureDetector' ; classpath='javaFeatureDetector' ; cname='PYRAMID_HARRIS' ; name='PYRAMID_HARRIS' ; namespace='cv' ; value='PYRAMIDDETECTOR + HARRIS']
INFO:root:constant: ['const cv.javaFeatureDetector.PYRAMID_SIMPLEBLOB', 'PYRAMIDDETECTOR + SIMPLEBLOB', [], []]
INFO:root:ok: ConstInfo [addedManually='False' ; classname='javaFeatureDetector' ; classpath='javaFeatureDetector' ; cname='PYRAMID_SIMPLEBLOB' ; name='PYRAMID_SIMPLEBLOB' ; namespace='cv' ; value='PYRAMIDDETECTOR + SIMPLEBLOB']
INFO:root:constant: ['const cv.javaFeatureDetector.PYRAMID_DENSE', 'PYRAMIDDETECTOR + DENSE', [], []]
INFO:root:ok: ConstInfo [addedManually='False' ; classname='javaFeatureDetector' ; classpath='javaFeatureDetector' ; cname='PYRAMID_DENSE' ; name='PYRAMID_DENSE' ; namespace='cv' ; value='PYRAMIDDETECTOR + DENSE']
INFO:root:constant: ['const cv.javaFeatureDetector.PYRAMID_BRISK', 'PYRAMIDDETECTOR + BRISK', [], []]
INFO:root:ok: ConstInfo [addedManually='False' ; classname='javaFeatureDetector' ; classpath='javaFeatureDetector' ; cname='PYRAMID_BRISK' ; name='PYRAMID_BRISK' ; namespace='cv' ; value='PYRAMIDDETECTOR + BRISK']
INFO:root:constant: ['const cv.javaFeatureDetector.PYRAMID_AKAZE', 'PYRAMIDDETECTOR + AKAZE', [], []]
INFO:root:ok: ConstInfo [addedManually='False' ; classname='javaFeatureDetector' ; classpath='javaFeatureDetector' ; cname='PYRAMID_AKAZE' ; name='PYRAMID_AKAZE' ; namespace='cv' ; value='PYRAMIDDETECTOR + AKAZE']
INFO:root:constant: ['const cv.javaFeatureDetector.DYNAMICDETECTOR', '3000', [], []]
INFO:root:ok: ConstInfo [addedManually='False' ; classname='javaFeatureDetector' ; classpath='javaFeatureDetector' ; cname='DYNAMICDETECTOR' ; name='DYNAMICDETECTOR' ; namespace='cv' ; value='3000']
INFO:root:constant: ['const cv.javaFeatureDetector.DYNAMIC_FAST', 'DYNAMICDETECTOR + FAST', [], []]
INFO:root:ok: ConstInfo [addedManually='False' ; classname='javaFeatureDetector' ; classpath='javaFeatureDetector' ; cname='DYNAMIC_FAST' ; name='DYNAMIC_FAST' ; namespace='cv' ; value='DYNAMICDETECTOR + FAST']
INFO:root:constant: ['const cv.javaFeatureDetector.DYNAMIC_STAR', 'DYNAMICDETECTOR + STAR', [], []]
INFO:root:ok: ConstInfo [addedManually='False' ; classname='javaFeatureDetector' ; classpath='javaFeatureDetector' ; cname='DYNAMIC_STAR' ; name='DYNAMIC_STAR' ; namespace='cv' ; value='DYNAMICDETECTOR + STAR']
INFO:root:constant: ['const cv.javaFeatureDetector.DYNAMIC_SIFT', 'DYNAMICDETECTOR + SIFT', [], []]
INFO:root:ok: ConstInfo [addedManually='False' ; classname='javaFeatureDetector' ; classpath='javaFeatureDetector' ; cname='DYNAMIC_SIFT' ; name='DYNAMIC_SIFT' ; namespace='cv' ; value='DYNAMICDETECTOR + SIFT']
INFO:root:constant: ['const cv.javaFeatureDetector.DYNAMIC_SURF', 'DYNAMICDETECTOR + SURF', [], []]
INFO:root:ok: ConstInfo [addedManually='False' ; classname='javaFeatureDetector' ; classpath='javaFeatureDetector' ; cname='DYNAMIC_SURF' ; name='DYNAMIC_SURF' ; namespace='cv' ; value='DYNAMICDETECTOR + SURF']
INFO:root:constant: ['const cv.javaFeatureDetector.DYNAMIC_ORB', 'DYNAMICDETECTOR + ORB', [], []]
INFO:root:ok: ConstInfo [addedManually='False' ; classname='javaFeatureDetector' ; classpath='javaFeatureDetector' ; cname='DYNAMIC_ORB' ; name='DYNAMIC_ORB' ; namespace='cv' ; value='DYNAMICDETECTOR + ORB']
INFO:root:constant: ['const cv.javaFeatureDetector.DYNAMIC_MSER', 'DYNAMICDETECTOR + MSER', [], []]
INFO:root:ok: ConstInfo [addedManually='False' ; classname='javaFeatureDetector' ; classpath='javaFeatureDetector' ; cname='DYNAMIC_MSER' ; name='DYNAMIC_MSER' ; namespace='cv' ; value='DYNAMICDETECTOR + MSER']
INFO:root:constant: ['const cv.javaFeatureDetector.DYNAMIC_GFTT', 'DYNAMICDETECTOR + GFTT', [], []]
INFO:root:ok: ConstInfo [addedManually='False' ; classname='javaFeatureDetector' ; classpath='javaFeatureDetector' ; cname='DYNAMIC_GFTT' ; name='DYNAMIC_GFTT' ; namespace='cv' ; value='DYNAMICDETECTOR + GFTT']
INFO:root:constant: ['const cv.javaFeatureDetector.DYNAMIC_HARRIS', 'DYNAMICDETECTOR + HARRIS', [], []]
INFO:root:ok: ConstInfo [addedManually='False' ; classname='javaFeatureDetector' ; classpath='javaFeatureDetector' ; cname='DYNAMIC_HARRIS' ; name='DYNAMIC_HARRIS' ; namespace='cv' ; value='DYNAMICDETECTOR + HARRIS']
INFO:root:constant: ['const cv.javaFeatureDetector.DYNAMIC_SIMPLEBLOB', 'DYNAMICDETECTOR + SIMPLEBLOB', [], []]
INFO:root:ok: ConstInfo [addedManually='False' ; classname='javaFeatureDetector' ; classpath='javaFeatureDetector' ; cname='DYNAMIC_SIMPLEBLOB' ; name='DYNAMIC_SIMPLEBLOB' ; namespace='cv' ; value='DYNAMICDETECTOR + SIMPLEBLOB']
INFO:root:constant: ['const cv.javaFeatureDetector.DYNAMIC_DENSE', 'DYNAMICDETECTOR + DENSE', [], []]
INFO:root:ok: ConstInfo [addedManually='False' ; classname='javaFeatureDetector' ; classpath='javaFeatureDetector' ; cname='DYNAMIC_DENSE' ; name='DYNAMIC_DENSE' ; namespace='cv' ; value='DYNAMICDETECTOR + DENSE']
INFO:root:constant: ['const cv.javaFeatureDetector.DYNAMIC_BRISK', 'DYNAMICDETECTOR + BRISK', [], []]
INFO:root:ok: ConstInfo [addedManually='False' ; classname='javaFeatureDetector' ; classpath='javaFeatureDetector' ; cname='DYNAMIC_BRISK' ; name='DYNAMIC_BRISK' ; namespace='cv' ; value='DYNAMICDETECTOR + BRISK']
INFO:root:constant: ['const cv.javaFeatureDetector.DYNAMIC_AKAZE', 'DYNAMICDETECTOR + AKAZE', [], []]
INFO:root:ok: ConstInfo [addedManually='False' ; classname='javaFeatureDetector' ; classpath='javaFeatureDetector' ; cname='DYNAMIC_AKAZE' ; name='DYNAMIC_AKAZE' ; namespace='cv' ; value='DYNAMICDETECTOR + AKAZE']
INFO:root:function: ['cv.javaFeatureDetector.create', 'javaFeatureDetector*', ['/S'], [['int', 'detectorType', '', []]]]
INFO:root:ok: FuncFamilyInfo [funcs='[<__main__.FuncInfo object at 0x10b4b0150>]' ; isconstructor='False' ; jname='create']
INFO:root:function: ['cv.javaFeatureDetector.write', 'void', [], [['String', 'fileName', '', []]]]
INFO:root:ok: FuncFamilyInfo [funcs='[<__main__.FuncInfo object at 0x10b4b01d0>]' ; isconstructor='False' ; jname='write']
INFO:root:function: ['cv.javaFeatureDetector.read', 'void', [], [['String', 'fileName', '', []]]]
INFO:root:ok: FuncFamilyInfo [funcs='[<__main__.FuncInfo object at 0x10b4b0250>]' ; isconstructor='False' ; jname='read']
INFO:root:class: ['class cv.javaDescriptorMatcher', '', ['=DescriptorMatcher'], []]
INFO:root:ok: ClassInfo [base='' ; classname='' ; classpath='' ; cname='javaDescriptorMatcher' ; consts='[]' ; imports='set([])' ; jname='DescriptorMatcher' ; methods='{}' ; methods_suffixes='{}' ; name='javaDescriptorMatcher' ; namespace='cv' ; private_consts='[]' ; props='[]']
INFO:root:function: ['cv.javaDescriptorMatcher.isMaskSupported', 'bool', [], []]
INFO:root:ok: FuncFamilyInfo [funcs='[<__main__.FuncInfo object at 0x10b4b03d0>]' ; isconstructor='False' ; jname='isMaskSupported']
INFO:root:function: ['cv.javaDescriptorMatcher.add', 'void', [], [['vector_Mat', 'descriptors', '', []]]]
INFO:root:ok: FuncFamilyInfo [funcs='[<__main__.FuncInfo object at 0x10b4b0410>]' ; isconstructor='False' ; jname='add']
INFO:root:function: ['cv.javaDescriptorMatcher.getTrainDescriptors', 'vector_Mat', [], []]
INFO:root:ok: FuncFamilyInfo [funcs='[<__main__.FuncInfo object at 0x10b4b0590>]' ; isconstructor='False' ; jname='getTrainDescriptors']
INFO:root:function: ['cv.javaDescriptorMatcher.clear', 'void', [], []]
INFO:root:ok: FuncFamilyInfo [funcs='[<__main__.FuncInfo object at 0x10b4b0650>]' ; isconstructor='False' ; jname='clear']
INFO:root:function: ['cv.javaDescriptorMatcher.empty', 'bool', [], []]
INFO:root:ok: FuncFamilyInfo [funcs='[<__main__.FuncInfo object at 0x10b4b0690>]' ; isconstructor='False' ; jname='empty']
INFO:root:function: ['cv.javaDescriptorMatcher.train', 'void', [], []]
INFO:root:ok: FuncFamilyInfo [funcs='[<__main__.FuncInfo object at 0x10b4b07d0>]' ; isconstructor='False' ; jname='train']
INFO:root:function: ['cv.javaDescriptorMatcher.match', 'void', [], [['Mat', 'queryDescriptors', '', []], ['Mat', 'trainDescriptors', '', []], ['vector_DMatch', 'matches', '', ['/O']], ['Mat', 'mask', 'Mat()', []]]]
INFO:root:ok: FuncFamilyInfo [funcs='[<__main__.FuncInfo object at 0x10b4b0890>]' ; isconstructor='False' ; jname='match']
INFO:root:function: ['cv.javaDescriptorMatcher.knnMatch', 'void', [], [['Mat', 'queryDescriptors', '', []], ['Mat', 'trainDescriptors', '', []], ['vector_vector_DMatch', 'matches', '', ['/O']], ['int', 'k', '', []], ['Mat', 'mask', 'Mat()', []], ['bool', 'compactResult', 'false', []]]]
INFO:root:ok: FuncFamilyInfo [funcs='[<__main__.FuncInfo object at 0x10b4b0a50>]' ; isconstructor='False' ; jname='knnMatch']
INFO:root:function: ['cv.javaDescriptorMatcher.radiusMatch', 'void', [], [['Mat', 'queryDescriptors', '', []], ['Mat', 'trainDescriptors', '', []], ['vector_vector_DMatch', 'matches', '', ['/O']], ['float', 'maxDistance', '', []], ['Mat', 'mask', 'Mat()', []], ['bool', 'compactResult', 'false', []]]]
INFO:root:ok: FuncFamilyInfo [funcs='[<__main__.FuncInfo object at 0x10b4b0c90>]' ; isconstructor='False' ; jname='radiusMatch']
INFO:root:function: ['cv.javaDescriptorMatcher.match', 'void', [], [['Mat', 'queryDescriptors', '', []], ['vector_DMatch', 'matches', '', ['/O']], ['vector_Mat', 'masks', 'std::vector<Mat>()', []]]]
INFO:root:ok: FuncFamilyInfo [funcs='[<__main__.FuncInfo object at 0x10b4b0ed0>]' ; isconstructor='False' ; jname='match']
INFO:root:function: ['cv.javaDescriptorMatcher.knnMatch', 'void', [], [['Mat', 'queryDescriptors', '', []], ['vector_vector_DMatch', 'matches', '', ['/O']], ['int', 'k', '', []], ['vector_Mat', 'masks', 'std::vector<Mat>()', []], ['bool', 'compactResult', 'false', []]]]
INFO:root:ok: FuncFamilyInfo [funcs='[<__main__.FuncInfo object at 0x10b4b0f10>]' ; isconstructor='False' ; jname='knnMatch']
INFO:root:function: ['cv.javaDescriptorMatcher.radiusMatch', 'void', [], [['Mat', 'queryDescriptors', '', []], ['vector_vector_DMatch', 'matches', '', ['/O']], ['float', 'maxDistance', '', []], ['vector_Mat', 'masks', 'std::vector<Mat>()', []], ['bool', 'compactResult', 'false', []]]]
INFO:root:ok: FuncFamilyInfo [funcs='[<__main__.FuncInfo object at 0x10b4b2090>]' ; isconstructor='False' ; jname='radiusMatch']
INFO:root:constant: ['const cv.javaDescriptorMatcher.FLANNBASED', '1', [], []]
INFO:root:ok: ConstInfo [addedManually='False' ; classname='javaDescriptorMatcher' ; classpath='javaDescriptorMatcher' ; cname='FLANNBASED' ; name='FLANNBASED' ; namespace='cv' ; value='1']
INFO:root:constant: ['const cv.javaDescriptorMatcher.BRUTEFORCE', '2', [], []]
INFO:root:ok: ConstInfo [addedManually='False' ; classname='javaDescriptorMatcher' ; classpath='javaDescriptorMatcher' ; cname='BRUTEFORCE' ; name='BRUTEFORCE' ; namespace='cv' ; value='2']
INFO:root:constant: ['const cv.javaDescriptorMatcher.BRUTEFORCE_L1', '3', [], []]
INFO:root:ok: ConstInfo [addedManually='False' ; classname='javaDescriptorMatcher' ; classpath='javaDescriptorMatcher' ; cname='BRUTEFORCE_L1' ; name='BRUTEFORCE_L1' ; namespace='cv' ; value='3']
INFO:root:constant: ['const cv.javaDescriptorMatcher.BRUTEFORCE_HAMMING', '4', [], []]
INFO:root:ok: ConstInfo [addedManually='False' ; classname='javaDescriptorMatcher' ; classpath='javaDescriptorMatcher' ; cname='BRUTEFORCE_HAMMING' ; name='BRUTEFORCE_HAMMING' ; namespace='cv' ; value='4']
INFO:root:constant: ['const cv.javaDescriptorMatcher.BRUTEFORCE_HAMMINGLUT', '5', [], []]
INFO:root:ok: ConstInfo [addedManually='False' ; classname='javaDescriptorMatcher' ; classpath='javaDescriptorMatcher' ; cname='BRUTEFORCE_HAMMINGLUT' ; name='BRUTEFORCE_HAMMINGLUT' ; namespace='cv' ; value='5']
INFO:root:constant: ['const cv.javaDescriptorMatcher.BRUTEFORCE_SL2', '6', [], []]
INFO:root:ok: ConstInfo [addedManually='False' ; classname='javaDescriptorMatcher' ; classpath='javaDescriptorMatcher' ; cname='BRUTEFORCE_SL2' ; name='BRUTEFORCE_SL2' ; namespace='cv' ; value='6']
INFO:root:function: ['cv.javaDescriptorMatcher.jclone', 'javaDescriptorMatcher*', ['=clone'], [['bool', 'emptyTrainData', 'false', []]]]
INFO:root:ok: FuncFamilyInfo [funcs='[<__main__.FuncInfo object at 0x10b4b2650>]' ; isconstructor='False' ; jname='clone']
INFO:root:function: ['cv.javaDescriptorMatcher.create', 'javaDescriptorMatcher*', ['/S'], [['int', 'matcherType', '', []]]]
INFO:root:ok: FuncFamilyInfo [funcs='[<__main__.FuncInfo object at 0x10b4b2750>]' ; isconstructor='False' ; jname='create']
INFO:root:function: ['cv.javaDescriptorMatcher.write', 'void', [], [['String', 'fileName', '', []]]]
INFO:root:ok: FuncFamilyInfo [funcs='[<__main__.FuncInfo object at 0x10b4b2910>]' ; isconstructor='False' ; jname='write']
INFO:root:function: ['cv.javaDescriptorMatcher.read', 'void', [], [['String', 'fileName', '', []]]]
INFO:root:ok: FuncFamilyInfo [funcs='[<__main__.FuncInfo object at 0x10b4b2a10>]' ; isconstructor='False' ; jname='read']
INFO:root:class: ['class cv.javaDescriptorExtractor', '', ['=DescriptorExtractor'], []]
INFO:root:ok: ClassInfo [base='' ; classname='' ; classpath='' ; cname='javaDescriptorExtractor' ; consts='[]' ; imports='set([])' ; jname='DescriptorExtractor' ; methods='{}' ; methods_suffixes='{}' ; name='javaDescriptorExtractor' ; namespace='cv' ; private_consts='[]' ; props='[]']
INFO:root:function: ['cv.javaDescriptorExtractor.compute', 'void', [], [['Mat', 'image', '', []], ['vector_KeyPoint', 'keypoints', '', ['/IO']], ['Mat', 'descriptors', '', []]]]
INFO:root:ok: FuncFamilyInfo [funcs='[<__main__.FuncInfo object at 0x10b4b2bd0>]' ; isconstructor='False' ; jname='compute']
INFO:root:function: ['cv.javaDescriptorExtractor.compute', 'void', [], [['vector_Mat', 'images', '', []], ['vector_vector_KeyPoint', 'keypoints', '', ['/IO']], ['vector_Mat', 'descriptors', '', ['/O']]]]
INFO:root:ok: FuncFamilyInfo [funcs='[<__main__.FuncInfo object at 0x10b4b2d50>]' ; isconstructor='False' ; jname='compute']
INFO:root:function: ['cv.javaDescriptorExtractor.descriptorSize', 'int', [], []]
INFO:root:ok: FuncFamilyInfo [funcs='[<__main__.FuncInfo object at 0x10b4b2dd0>]' ; isconstructor='False' ; jname='descriptorSize']
INFO:root:function: ['cv.javaDescriptorExtractor.descriptorType', 'int', [], []]
INFO:root:ok: FuncFamilyInfo [funcs='[<__main__.FuncInfo object at 0x10b4b2f10>]' ; isconstructor='False' ; jname='descriptorType']
INFO:root:function: ['cv.javaDescriptorExtractor.empty', 'bool', [], []]
INFO:root:ok: FuncFamilyInfo [funcs='[<__main__.FuncInfo object at 0x10b4b3050>]' ; isconstructor='False' ; jname='empty']
INFO:root:constant: ['const cv.javaDescriptorExtractor.SIFT', '1', [], []]
INFO:root:ok: ConstInfo [addedManually='False' ; classname='javaDescriptorExtractor' ; classpath='javaDescriptorExtractor' ; cname='SIFT' ; name='SIFT' ; namespace='cv' ; value='1']
INFO:root:constant: ['const cv.javaDescriptorExtractor.SURF', '2', [], []]
INFO:root:ok: ConstInfo [addedManually='False' ; classname='javaDescriptorExtractor' ; classpath='javaDescriptorExtractor' ; cname='SURF' ; name='SURF' ; namespace='cv' ; value='2']
INFO:root:constant: ['const cv.javaDescriptorExtractor.ORB', '3', [], []]
INFO:root:ok: ConstInfo [addedManually='False' ; classname='javaDescriptorExtractor' ; classpath='javaDescriptorExtractor' ; cname='ORB' ; name='ORB' ; namespace='cv' ; value='3']
INFO:root:constant: ['const cv.javaDescriptorExtractor.BRIEF', '4', [], []]
INFO:root:ok: ConstInfo [addedManually='False' ; classname='javaDescriptorExtractor' ; classpath='javaDescriptorExtractor' ; cname='BRIEF' ; name='BRIEF' ; namespace='cv' ; value='4']
INFO:root:constant: ['const cv.javaDescriptorExtractor.BRISK', '5', [], []]
INFO:root:ok: ConstInfo [addedManually='False' ; classname='javaDescriptorExtractor' ; classpath='javaDescriptorExtractor' ; cname='BRISK' ; name='BRISK' ; namespace='cv' ; value='5']
INFO:root:constant: ['const cv.javaDescriptorExtractor.FREAK', '6', [], []]
INFO:root:ok: ConstInfo [addedManually='False' ; classname='javaDescriptorExtractor' ; classpath='javaDescriptorExtractor' ; cname='FREAK' ; name='FREAK' ; namespace='cv' ; value='6']
INFO:root:constant: ['const cv.javaDescriptorExtractor.AKAZE', '7', [], []]
INFO:root:ok: ConstInfo [addedManually='False' ; classname='javaDescriptorExtractor' ; classpath='javaDescriptorExtractor' ; cname='AKAZE' ; name='AKAZE' ; namespace='cv' ; value='7']
INFO:root:constant: ['const cv.javaDescriptorExtractor.OPPONENTEXTRACTOR', '1000', [], []]
INFO:root:ok: ConstInfo [addedManually='False' ; classname='javaDescriptorExtractor' ; classpath='javaDescriptorExtractor' ; cname='OPPONENTEXTRACTOR' ; name='OPPONENTEXTRACTOR' ; namespace='cv' ; value='1000']
INFO:root:constant: ['const cv.javaDescriptorExtractor.OPPONENT_SIFT', 'OPPONENTEXTRACTOR + SIFT', [], []]
INFO:root:ok: ConstInfo [addedManually='False' ; classname='javaDescriptorExtractor' ; classpath='javaDescriptorExtractor' ; cname='OPPONENT_SIFT' ; name='OPPONENT_SIFT' ; namespace='cv' ; value='OPPONENTEXTRACTOR + SIFT']
INFO:root:constant: ['const cv.javaDescriptorExtractor.OPPONENT_SURF', 'OPPONENTEXTRACTOR + SURF', [], []]
INFO:root:ok: ConstInfo [addedManually='False' ; classname='javaDescriptorExtractor' ; classpath='javaDescriptorExtractor' ; cname='OPPONENT_SURF' ; name='OPPONENT_SURF' ; namespace='cv' ; value='OPPONENTEXTRACTOR + SURF']
INFO:root:constant: ['const cv.javaDescriptorExtractor.OPPONENT_ORB', 'OPPONENTEXTRACTOR + ORB', [], []]
INFO:root:ok: ConstInfo [addedManually='False' ; classname='javaDescriptorExtractor' ; classpath='javaDescriptorExtractor' ; cname='OPPONENT_ORB' ; name='OPPONENT_ORB' ; namespace='cv' ; value='OPPONENTEXTRACTOR + ORB']
INFO:root:constant: ['const cv.javaDescriptorExtractor.OPPONENT_BRIEF', 'OPPONENTEXTRACTOR + BRIEF', [], []]
INFO:root:ok: ConstInfo [addedManually='False' ; classname='javaDescriptorExtractor' ; classpath='javaDescriptorExtractor' ; cname='OPPONENT_BRIEF' ; name='OPPONENT_BRIEF' ; namespace='cv' ; value='OPPONENTEXTRACTOR + BRIEF']
INFO:root:constant: ['const cv.javaDescriptorExtractor.OPPONENT_BRISK', 'OPPONENTEXTRACTOR + BRISK', [], []]
INFO:root:ok: ConstInfo [addedManually='False' ; classname='javaDescriptorExtractor' ; classpath='javaDescriptorExtractor' ; cname='OPPONENT_BRISK' ; name='OPPONENT_BRISK' ; namespace='cv' ; value='OPPONENTEXTRACTOR + BRISK']
INFO:root:constant: ['const cv.javaDescriptorExtractor.OPPONENT_FREAK', 'OPPONENTEXTRACTOR + FREAK', [], []]
INFO:root:ok: ConstInfo [addedManually='False' ; classname='javaDescriptorExtractor' ; classpath='javaDescriptorExtractor' ; cname='OPPONENT_FREAK' ; name='OPPONENT_FREAK' ; namespace='cv' ; value='OPPONENTEXTRACTOR + FREAK']
INFO:root:constant: ['const cv.javaDescriptorExtractor.OPPONENT_AKAZE', 'OPPONENTEXTRACTOR + AKAZE', [], []]
INFO:root:ok: ConstInfo [addedManually='False' ; classname='javaDescriptorExtractor' ; classpath='javaDescriptorExtractor' ; cname='OPPONENT_AKAZE' ; name='OPPONENT_AKAZE' ; namespace='cv' ; value='OPPONENTEXTRACTOR + AKAZE']
INFO:root:function: ['cv.javaDescriptorExtractor.create', 'javaDescriptorExtractor*', ['/S'], [['int', 'extractorType', '', []]]]
INFO:root:ok: FuncFamilyInfo [funcs='[<__main__.FuncInfo object at 0x10b4b38d0>]' ; isconstructor='False' ; jname='create']
INFO:root:function: ['cv.javaDescriptorExtractor.write', 'void', [], [['String', 'fileName', '', []]]]
INFO:root:ok: FuncFamilyInfo [funcs='[<__main__.FuncInfo object at 0x10b4b3910>]' ; isconstructor='False' ; jname='write']
INFO:root:function: ['cv.javaDescriptorExtractor.read', 'void', [], [['String', 'fileName', '', []]]]
INFO:root:ok: FuncFamilyInfo [funcs='[<__main__.FuncInfo object at 0x10b4b3a90>]' ; isconstructor='False' ; jname='read']
INFO:root:constant: ['const cv.DRAW_OVER_OUTIMG', '1', [], []]
INFO:root:ok: ConstInfo [addedManually='False' ; classname='Features2d' ; classpath='' ; cname='DRAW_OVER_OUTIMG' ; name='DRAW_OVER_OUTIMG' ; namespace='cv' ; value='1']
INFO:root:constant: ['const cv.NOT_DRAW_SINGLE_POINTS', '2', [], []]
INFO:root:ok: ConstInfo [addedManually='False' ; classname='Features2d' ; classpath='' ; cname='NOT_DRAW_SINGLE_POINTS' ; name='NOT_DRAW_SINGLE_POINTS' ; namespace='cv' ; value='2']
INFO:root:constant: ['const cv.DRAW_RICH_KEYPOINTS', '4', [], []]
INFO:root:ok: ConstInfo [addedManually='False' ; classname='Features2d' ; classpath='' ; cname='DRAW_RICH_KEYPOINTS' ; name='DRAW_RICH_KEYPOINTS' ; namespace='cv' ; value='4']
INFO:root:function: ['cv.drawKeypoints', 'void', [], [['Mat', 'image', '', []], ['vector_KeyPoint', 'keypoints', '', []], ['Mat', 'outImage', '', []], ['Scalar', 'color', 'Scalar::all(-1)', []], ['int', 'flags', '0', []]]]
INFO:root:ok: FuncFamilyInfo [funcs='[<__main__.FuncInfo object at 0x10b4b3d10>]' ; isconstructor='False' ; jname='drawKeypoints']
INFO:root:function: ['cv.drawMatches', 'void', [], [['Mat', 'img1', '', []], ['vector_KeyPoint', 'keypoints1', '', []], ['Mat', 'img2', '', []], ['vector_KeyPoint', 'keypoints2', '', []], ['vector_DMatch', 'matches1to2', '', []], ['Mat', 'outImg', '', []], ['Scalar', 'matchColor', 'Scalar::all(-1)', []], ['Scalar', 'singlePointColor', 'Scalar::all(-1)', []], ['vector_char', 'matchesMask', 'std::vector<char>()', []], ['int', 'flags', '0', []]]]
INFO:root:ok: FuncFamilyInfo [funcs='[<__main__.FuncInfo object at 0x10b4b3e50>]' ; isconstructor='False' ; jname='drawMatches']
INFO:root:function: ['cv.drawMatches', 'void', ['=drawMatches2'], [['Mat', 'img1', '', []], ['vector_KeyPoint', 'keypoints1', '', []], ['Mat', 'img2', '', []], ['vector_KeyPoint', 'keypoints2', '', []], ['vector_vector_DMatch', 'matches1to2', '', []], ['Mat', 'outImg', '', []], ['Scalar', 'matchColor', 'Scalar::all(-1)', []], ['Scalar', 'singlePointColor', 'Scalar::all(-1)', []], ['vector_vector_char', 'matchesMask', 'std::vector<std::vector<char> >()', []], ['int', 'flags', '0', []]]]
INFO:root:ok: FuncFamilyInfo [funcs='[<__main__.FuncInfo object at 0x10b4b4190>]' ; isconstructor='False' ; jname='drawMatches2']
