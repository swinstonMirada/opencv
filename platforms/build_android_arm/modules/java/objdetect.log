INFO:root:class: ['class Objdetect', '', [], []]
INFO:root:ok: ClassInfo [base='' ; classname='' ; classpath='' ; cname='Objdetect' ; consts='[]' ; imports='set([])' ; jname='Objdetect' ; methods='{}' ; methods_suffixes='{}' ; name='Objdetect' ; namespace='' ; private_consts='[]' ; props='[]']
INFO:root:=== Header: /Users/swinston/Mirada/lib/c/opencv/modules/objdetect/include/opencv2/objdetect/objdetect_c.h
INFO:root:=== Namespaces: set([''])
INFO:root:=== Header: /Users/swinston/Mirada/lib/c/opencv/modules/objdetect/include/opencv2/objdetect.hpp
INFO:root:=== Namespaces: set(['', 'cv'])
INFO:root:function: ['cv.groupRectangles', 'void', [], [['vector_Rect', 'rectList', '', ['/IO']], ['vector_int', 'weights', '', ['/O']], ['int', 'groupThreshold', '', []], ['double', 'eps', '0.2', []]]]
INFO:root:ok: FuncFamilyInfo [funcs='[<__main__.FuncInfo object at 0x10cc13450>]' ; isconstructor='False' ; jname='groupRectangles']
INFO:root:constant: ['const cv.CASCADE_DO_CANNY_PRUNING', '1', [], []]
INFO:root:ok: ConstInfo [addedManually='False' ; classname='Objdetect' ; classpath='' ; cname='CASCADE_DO_CANNY_PRUNING' ; name='CASCADE_DO_CANNY_PRUNING' ; namespace='cv' ; value='1']
INFO:root:constant: ['const cv.CASCADE_SCALE_IMAGE', '2', [], []]
INFO:root:ok: ConstInfo [addedManually='False' ; classname='Objdetect' ; classpath='' ; cname='CASCADE_SCALE_IMAGE' ; name='CASCADE_SCALE_IMAGE' ; namespace='cv' ; value='2']
INFO:root:constant: ['const cv.CASCADE_FIND_BIGGEST_OBJECT', '4', [], []]
INFO:root:ok: ConstInfo [addedManually='False' ; classname='Objdetect' ; classpath='' ; cname='CASCADE_FIND_BIGGEST_OBJECT' ; name='CASCADE_FIND_BIGGEST_OBJECT' ; namespace='cv' ; value='4']
INFO:root:constant: ['const cv.CASCADE_DO_ROUGH_SEARCH', '8', [], []]
INFO:root:ok: ConstInfo [addedManually='False' ; classname='Objdetect' ; classpath='' ; cname='CASCADE_DO_ROUGH_SEARCH' ; name='CASCADE_DO_ROUGH_SEARCH' ; namespace='cv' ; value='8']
INFO:root:class: ['class cv.BaseCascadeClassifier', ': cv::Algorithm', [], []]
INFO:root:ok: ClassInfo [base='Algorithm' ; classname='' ; classpath='' ; cname='BaseCascadeClassifier' ; consts='[]' ; imports='set(['org.opencv.core.Algorithm'])' ; jname='BaseCascadeClassifier' ; methods='{}' ; methods_suffixes='{}' ; name='BaseCascadeClassifier' ; namespace='cv' ; private_consts='[]' ; props='[]']
INFO:root:class: ['class cv.CascadeClassifier', '', [], []]
INFO:root:ok: ClassInfo [base='' ; classname='' ; classpath='' ; cname='CascadeClassifier' ; consts='[]' ; imports='set([])' ; jname='CascadeClassifier' ; methods='{}' ; methods_suffixes='{}' ; name='CascadeClassifier' ; namespace='cv' ; private_consts='[]' ; props='[]']
INFO:root:function: ['cv.CascadeClassifier.CascadeClassifier', '', [], []]
INFO:root:ok: FuncFamilyInfo [funcs='[<__main__.FuncInfo object at 0x10cc13c90>]' ; isconstructor='True' ; jname='CascadeClassifier']
INFO:root:function: ['cv.CascadeClassifier.CascadeClassifier', '', [], [['String', 'filename', '', []]]]
INFO:root:ok: FuncFamilyInfo [funcs='[<__main__.FuncInfo object at 0x10cc13d10>]' ; isconstructor='True' ; jname='CascadeClassifier']
INFO:root:function: ['cv.CascadeClassifier.empty', 'bool', [], []]
INFO:root:ok: FuncFamilyInfo [funcs='[<__main__.FuncInfo object at 0x10cc13d90>]' ; isconstructor='False' ; jname='empty']
INFO:root:function: ['cv.CascadeClassifier.load', 'bool', [], [['String', 'filename', '', []]]]
INFO:root:ok: FuncFamilyInfo [funcs='[<__main__.FuncInfo object at 0x10cc13d50>]' ; isconstructor='False' ; jname='load']
INFO:root:function: ['cv.CascadeClassifier.read', 'bool', [], [['FileNode', 'node', '', []]]]
INFO:root:ok: FuncFamilyInfo [funcs='[<__main__.FuncInfo object at 0x10cc13e90>]' ; isconstructor='False' ; jname='read']
INFO:root:function: ['cv.CascadeClassifier.detectMultiScale', 'void', [], [['Mat', 'image', '', []], ['vector_Rect', 'objects', '', ['/O']], ['double', 'scaleFactor', '1.1', []], ['int', 'minNeighbors', '3', []], ['int', 'flags', '0', []], ['Size', 'minSize', 'Size()', []], ['Size', 'maxSize', 'Size()', []]]]
INFO:root:ok: FuncFamilyInfo [funcs='[<__main__.FuncInfo object at 0x10cc13f50>]' ; isconstructor='False' ; jname='detectMultiScale']
INFO:root:function: ['cv.CascadeClassifier.detectMultiScale', 'void', ['=detectMultiScale2'], [['Mat', 'image', '', []], ['vector_Rect', 'objects', '', ['/O']], ['vector_int', 'numDetections', '', ['/O']], ['double', 'scaleFactor', '1.1', []], ['int', 'minNeighbors', '3', []], ['int', 'flags', '0', []], ['Size', 'minSize', 'Size()', []], ['Size', 'maxSize', 'Size()', []]]]
INFO:root:ok: FuncFamilyInfo [funcs='[<__main__.FuncInfo object at 0x10cc221d0>]' ; isconstructor='False' ; jname='detectMultiScale2']
INFO:root:function: ['cv.CascadeClassifier.detectMultiScale', 'void', ['=detectMultiScale3'], [['Mat', 'image', '', []], ['vector_Rect', 'objects', '', ['/O']], ['vector_int', 'rejectLevels', '', ['/O']], ['vector_double', 'levelWeights', '', ['/O']], ['double', 'scaleFactor', '1.1', []], ['int', 'minNeighbors', '3', []], ['int', 'flags', '0', []], ['Size', 'minSize', 'Size()', []], ['Size', 'maxSize', 'Size()', []], ['bool', 'outputRejectLevels', 'false', []]]]
INFO:root:ok: FuncFamilyInfo [funcs='[<__main__.FuncInfo object at 0x10cc22450>]' ; isconstructor='False' ; jname='detectMultiScale3']
INFO:root:function: ['cv.CascadeClassifier.isOldFormatCascade', 'bool', [], []]
INFO:root:ok: FuncFamilyInfo [funcs='[<__main__.FuncInfo object at 0x10cc22750>]' ; isconstructor='False' ; jname='isOldFormatCascade']
INFO:root:function: ['cv.CascadeClassifier.getOriginalWindowSize', 'Size', [], []]
INFO:root:ok: FuncFamilyInfo [funcs='[<__main__.FuncInfo object at 0x10cc22810>]' ; isconstructor='False' ; jname='getOriginalWindowSize']
INFO:root:function: ['cv.CascadeClassifier.getFeatureType', 'int', [], []]
INFO:root:ok: FuncFamilyInfo [funcs='[<__main__.FuncInfo object at 0x10cc22790>]' ; isconstructor='False' ; jname='getFeatureType']
INFO:root:function: ['cv.CascadeClassifier.convert', 'bool', ['/S'], [['String', 'oldcascade', '', []], ['String', 'newcascade', '', []]]]
INFO:root:ok: FuncFamilyInfo [funcs='[<__main__.FuncInfo object at 0x10cc228d0>]' ; isconstructor='False' ; jname='convert']
INFO:root:class: ['struct cv.HOGDescriptor', '', [], [['Size', 'winSize', '', []], ['Size', 'blockSize', '', []], ['Size', 'blockStride', '', []], ['Size', 'cellSize', '', []], ['int', 'nbins', '', []], ['int', 'derivAperture', '', []], ['double', 'winSigma', '', []], ['int', 'histogramNormType', '', []], ['double', 'L2HysThreshold', '', []], ['bool', 'gammaCorrection', '', []], ['vector_float', 'svmDetector', '', []], ['int', 'nlevels', '', []]]]
INFO:root:ok: ClassInfo [base='' ; classname='' ; classpath='' ; cname='HOGDescriptor' ; consts='[]' ; imports='set([])' ; jname='HOGDescriptor' ; methods='{}' ; methods_suffixes='{}' ; name='HOGDescriptor' ; namespace='cv' ; private_consts='[]' ; props='[<__main__.ClassPropInfo object at 0x10cc22ad0>, <__main__.ClassPropInfo object at 0x10cc22a90>, <__main__.ClassPropInfo object at 0x10cc22a50>, <__main__.ClassPropInfo object at 0x10cc22b10>, <__main__.ClassPropInfo object at 0x10cc22b50>, <__main__.ClassPropInfo object at 0x10cc22b90>, <__main__.ClassPropInfo object at 0x10cc22bd0>, <__main__.ClassPropInfo object at 0x10cc22c10>, <__main__.ClassPropInfo object at 0x10cc22c50>, <__main__.ClassPropInfo object at 0x10cc22c90>, <__main__.ClassPropInfo object at 0x10cc22cd0>, <__main__.ClassPropInfo object at 0x10cc22d10>]']
INFO:root:constant: ['const cv.HOGDescriptor.L2Hys', '0', [], []]
INFO:root:ok: ConstInfo [addedManually='False' ; classname='HOGDescriptor' ; classpath='HOGDescriptor' ; cname='L2Hys' ; name='L2Hys' ; namespace='cv' ; value='0']
INFO:root:constant: ['const cv.HOGDescriptor.DEFAULT_NLEVELS', '64', [], []]
INFO:root:ok: ConstInfo [addedManually='False' ; classname='HOGDescriptor' ; classpath='HOGDescriptor' ; cname='DEFAULT_NLEVELS' ; name='DEFAULT_NLEVELS' ; namespace='cv' ; value='64']
INFO:root:function: ['cv.HOGDescriptor.HOGDescriptor', '', [], []]
INFO:root:ok: FuncFamilyInfo [funcs='[<__main__.FuncInfo object at 0x10cc22e50>]' ; isconstructor='True' ; jname='HOGDescriptor']
INFO:root:function: ['cv.HOGDescriptor.HOGDescriptor', '', [], [['Size', '_winSize', '', []], ['Size', '_blockSize', '', []], ['Size', '_blockStride', '', []], ['Size', '_cellSize', '', []], ['int', '_nbins', '', []], ['int', '_derivAperture', '1', []], ['double', '_winSigma', '-1', []], ['int', '_histogramNormType', 'HOGDescriptor::L2Hys', []], ['double', '_L2HysThreshold', '0.2', []], ['bool', '_gammaCorrection', 'false', []], ['int', '_nlevels', 'HOGDescriptor::DEFAULT_NLEVELS', []]]]
INFO:root:ok: FuncFamilyInfo [funcs='[<__main__.FuncInfo object at 0x10cc22d90>]' ; isconstructor='True' ; jname='HOGDescriptor']
INFO:root:function: ['cv.HOGDescriptor.HOGDescriptor', '', [], [['String', 'filename', '', []]]]
INFO:root:ok: FuncFamilyInfo [funcs='[<__main__.FuncInfo object at 0x10cc22f50>]' ; isconstructor='True' ; jname='HOGDescriptor']
INFO:root:function: ['cv.HOGDescriptor.getDescriptorSize', 'size_t', [], []]
INFO:root:ok: FuncFamilyInfo [funcs='[<__main__.FuncInfo object at 0x10cc24250>]' ; isconstructor='False' ; jname='getDescriptorSize']
INFO:root:function: ['cv.HOGDescriptor.checkDetectorSize', 'bool', [], []]
INFO:root:ok: FuncFamilyInfo [funcs='[<__main__.FuncInfo object at 0x10cc242d0>]' ; isconstructor='False' ; jname='checkDetectorSize']
INFO:root:function: ['cv.HOGDescriptor.getWinSigma', 'double', [], []]
INFO:root:ok: FuncFamilyInfo [funcs='[<__main__.FuncInfo object at 0x10cc24350>]' ; isconstructor='False' ; jname='getWinSigma']
INFO:root:function: ['cv.HOGDescriptor.setSVMDetector', 'void', [], [['Mat', '_svmdetector', '', []]]]
INFO:root:ok: FuncFamilyInfo [funcs='[<__main__.FuncInfo object at 0x10cc24390>]' ; isconstructor='False' ; jname='setSVMDetector']
INFO:root:function: ['cv.HOGDescriptor.load', 'bool', [], [['String', 'filename', '', []], ['String', 'objname', 'String()', []]]]
INFO:root:ok: FuncFamilyInfo [funcs='[<__main__.FuncInfo object at 0x10cc24450>]' ; isconstructor='False' ; jname='load']
INFO:root:function: ['cv.HOGDescriptor.save', 'void', [], [['String', 'filename', '', []], ['String', 'objname', 'String()', []]]]
INFO:root:ok: FuncFamilyInfo [funcs='[<__main__.FuncInfo object at 0x10cc24550>]' ; isconstructor='False' ; jname='save']
INFO:root:function: ['cv.HOGDescriptor.compute', 'void', [], [['Mat', 'img', '', []], ['vector_float', 'descriptors', '', ['/O']], ['Size', 'winStride', 'Size()', []], ['Size', 'padding', 'Size()', []], ['vector_Point', 'locations', 'std::vector<Point>()', []]]]
INFO:root:ok: FuncFamilyInfo [funcs='[<__main__.FuncInfo object at 0x10cc24650>]' ; isconstructor='False' ; jname='compute']
INFO:root:function: ['cv.HOGDescriptor.detect', 'void', [], [['Mat', 'img', '', []], ['vector_Point', 'foundLocations', '', ['/O']], ['vector_double', 'weights', '', ['/O']], ['double', 'hitThreshold', '0', []], ['Size', 'winStride', 'Size()', []], ['Size', 'padding', 'Size()', []], ['vector_Point', 'searchLocations', 'std::vector<Point>()', []]]]
INFO:root:ok: FuncFamilyInfo [funcs='[<__main__.FuncInfo object at 0x10cc24810>]' ; isconstructor='False' ; jname='detect']
INFO:root:function: ['cv.HOGDescriptor.detectMultiScale', 'void', [], [['Mat', 'img', '', []], ['vector_Rect', 'foundLocations', '', ['/O']], ['vector_double', 'foundWeights', '', ['/O']], ['double', 'hitThreshold', '0', []], ['Size', 'winStride', 'Size()', []], ['Size', 'padding', 'Size()', []], ['double', 'scale', '1.05', []], ['double', 'finalThreshold', '2.0', []], ['bool', 'useMeanshiftGrouping', 'false', []]]]
INFO:root:ok: FuncFamilyInfo [funcs='[<__main__.FuncInfo object at 0x10cc24a50>]' ; isconstructor='False' ; jname='detectMultiScale']
INFO:root:function: ['cv.HOGDescriptor.computeGradient', 'void', [], [['Mat', 'img', '', []], ['Mat', 'grad', '', ['/O']], ['Mat', 'angleOfs', '', ['/O']], ['Size', 'paddingTL', 'Size()', []], ['Size', 'paddingBR', 'Size()', []]]]
INFO:root:ok: FuncFamilyInfo [funcs='[<__main__.FuncInfo object at 0x10cc24d10>]' ; isconstructor='False' ; jname='computeGradient']
INFO:root:function: ['cv.HOGDescriptor.getDefaultPeopleDetector', 'vector_float', ['/S'], []]
INFO:root:ok: FuncFamilyInfo [funcs='[<__main__.FuncInfo object at 0x10cc24ed0>]' ; isconstructor='False' ; jname='getDefaultPeopleDetector']
INFO:root:function: ['cv.HOGDescriptor.getDaimlerPeopleDetector', 'vector_float', ['/S'], []]
INFO:root:ok: FuncFamilyInfo [funcs='[<__main__.FuncInfo object at 0x10cc24f10>]' ; isconstructor='False' ; jname='getDaimlerPeopleDetector']
INFO:root:=== Header: /Users/swinston/Mirada/lib/c/opencv/modules/objdetect/include/opencv2/objdetect/detection_based_tracker.hpp
INFO:root:=== Namespaces: set(['', 'cv'])
INFO:root:constant: ['const cv.DetectionBasedTracker.DETECTED_NOT_SHOWN_YET', '0', [], []]
INFO:root:class not found: ConstInfo [addedManually='False' ; classname='DetectionBasedTracker' ; classpath='DetectionBasedTracker' ; cname='DETECTED_NOT_SHOWN_YET' ; name='DETECTED_NOT_SHOWN_YET' ; namespace='cv' ; value='0']
INFO:root:constant: ['const cv.DetectionBasedTracker.DETECTED', '1', [], []]
INFO:root:class not found: ConstInfo [addedManually='False' ; classname='DetectionBasedTracker' ; classpath='DetectionBasedTracker' ; cname='DETECTED' ; name='DETECTED' ; namespace='cv' ; value='1']
INFO:root:constant: ['const cv.DetectionBasedTracker.DETECTED_TEMPORARY_LOST', '2', [], []]
INFO:root:class not found: ConstInfo [addedManually='False' ; classname='DetectionBasedTracker' ; classpath='DetectionBasedTracker' ; cname='DETECTED_TEMPORARY_LOST' ; name='DETECTED_TEMPORARY_LOST' ; namespace='cv' ; value='2']
INFO:root:constant: ['const cv.DetectionBasedTracker.WRONG_OBJECT', '3', [], []]
INFO:root:class not found: ConstInfo [addedManually='False' ; classname='DetectionBasedTracker' ; classpath='DetectionBasedTracker' ; cname='WRONG_OBJECT' ; name='WRONG_OBJECT' ; namespace='cv' ; value='3']
INFO:root:=== Header: /Users/swinston/Mirada/lib/c/opencv/modules/objdetect/include/opencv2/objdetect/objdetect.hpp
INFO:root:=== Namespaces: set(['', 'cv'])
