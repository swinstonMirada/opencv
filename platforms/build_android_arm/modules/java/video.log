INFO:root:class: ['class Video', '', [], []]
INFO:root:ok: ClassInfo [base='' ; classname='' ; classpath='' ; cname='Video' ; consts='[]' ; imports='set([])' ; jname='Video' ; methods='{}' ; methods_suffixes='{}' ; name='Video' ; namespace='' ; private_consts='[<__main__.ConstInfo object at 0x1062c5410>, <__main__.ConstInfo object at 0x1062c5450>]' ; props='[]']
INFO:root:=== Header: /Users/swinston/Mirada/lib/c/opencv/modules/video/include/opencv2/video/tracking_c.h
INFO:root:=== Namespaces: set([''])
INFO:root:=== Header: /Users/swinston/Mirada/lib/c/opencv/modules/video/include/opencv2/video.hpp
INFO:root:=== Namespaces: set(['', 'cv'])
INFO:root:=== Header: /Users/swinston/Mirada/lib/c/opencv/modules/video/include/opencv2/video/background_segm.hpp
INFO:root:=== Namespaces: set(['', 'cv'])
INFO:root:class: ['class cv.BackgroundSubtractor', ': cv::Algorithm', [], []]
INFO:root:ok: ClassInfo [base='Algorithm' ; classname='' ; classpath='' ; cname='BackgroundSubtractor' ; consts='[]' ; imports='set(['org.opencv.core.Algorithm'])' ; jname='BackgroundSubtractor' ; methods='{}' ; methods_suffixes='{}' ; name='BackgroundSubtractor' ; namespace='cv' ; private_consts='[]' ; props='[]']
INFO:root:function: ['cv.BackgroundSubtractor.apply', 'void', [], [['Mat', 'image', '', []], ['Mat', 'fgmask', '', ['/O']], ['double', 'learningRate', '-1', []]]]
INFO:root:ok: FuncFamilyInfo [funcs='[<__main__.FuncInfo object at 0x1062c5710>]' ; isconstructor='False' ; jname='apply']
INFO:root:function: ['cv.BackgroundSubtractor.getBackgroundImage', 'void', [], [['Mat', 'backgroundImage', '', ['/O']]]]
INFO:root:ok: FuncFamilyInfo [funcs='[<__main__.FuncInfo object at 0x1062c5890>]' ; isconstructor='False' ; jname='getBackgroundImage']
INFO:root:class: ['class cv.BackgroundSubtractorMOG2', ': cv::BackgroundSubtractor', [], []]
INFO:root:ok: ClassInfo [base='BackgroundSubtractor' ; classname='' ; classpath='' ; cname='BackgroundSubtractorMOG2' ; consts='[]' ; imports='set([])' ; jname='BackgroundSubtractorMOG2' ; methods='{}' ; methods_suffixes='{}' ; name='BackgroundSubtractorMOG2' ; namespace='cv' ; private_consts='[]' ; props='[]']
INFO:root:function: ['cv.BackgroundSubtractorMOG2.getHistory', 'int', [], []]
INFO:root:ok: FuncFamilyInfo [funcs='[<__main__.FuncInfo object at 0x1062c5a90>]' ; isconstructor='False' ; jname='getHistory']
INFO:root:function: ['cv.BackgroundSubtractorMOG2.setHistory', 'void', [], [['int', 'history', '', []]]]
INFO:root:ok: FuncFamilyInfo [funcs='[<__main__.FuncInfo object at 0x1062c5ad0>]' ; isconstructor='False' ; jname='setHistory']
INFO:root:function: ['cv.BackgroundSubtractorMOG2.getNMixtures', 'int', [], []]
INFO:root:ok: FuncFamilyInfo [funcs='[<__main__.FuncInfo object at 0x1062c5c50>]' ; isconstructor='False' ; jname='getNMixtures']
INFO:root:function: ['cv.BackgroundSubtractorMOG2.setNMixtures', 'void', [], [['int', 'nmixtures', '', []]]]
INFO:root:ok: FuncFamilyInfo [funcs='[<__main__.FuncInfo object at 0x1062c5d10>]' ; isconstructor='False' ; jname='setNMixtures']
INFO:root:function: ['cv.BackgroundSubtractorMOG2.getBackgroundRatio', 'double', [], []]
INFO:root:ok: FuncFamilyInfo [funcs='[<__main__.FuncInfo object at 0x1062c5e10>]' ; isconstructor='False' ; jname='getBackgroundRatio']
INFO:root:function: ['cv.BackgroundSubtractorMOG2.setBackgroundRatio', 'void', [], [['double', 'ratio', '', []]]]
INFO:root:ok: FuncFamilyInfo [funcs='[<__main__.FuncInfo object at 0x1062c5e50>]' ; isconstructor='False' ; jname='setBackgroundRatio']
INFO:root:function: ['cv.BackgroundSubtractorMOG2.getVarThreshold', 'double', [], []]
INFO:root:ok: FuncFamilyInfo [funcs='[<__main__.FuncInfo object at 0x1062c5fd0>]' ; isconstructor='False' ; jname='getVarThreshold']
INFO:root:function: ['cv.BackgroundSubtractorMOG2.setVarThreshold', 'void', [], [['double', 'varThreshold', '', []]]]
INFO:root:ok: FuncFamilyInfo [funcs='[<__main__.FuncInfo object at 0x1062c7050>]' ; isconstructor='False' ; jname='setVarThreshold']
INFO:root:function: ['cv.BackgroundSubtractorMOG2.getVarThresholdGen', 'double', [], []]
INFO:root:ok: FuncFamilyInfo [funcs='[<__main__.FuncInfo object at 0x1062c71d0>]' ; isconstructor='False' ; jname='getVarThresholdGen']
INFO:root:function: ['cv.BackgroundSubtractorMOG2.setVarThresholdGen', 'void', [], [['double', 'varThresholdGen', '', []]]]
INFO:root:ok: FuncFamilyInfo [funcs='[<__main__.FuncInfo object at 0x1062c7210>]' ; isconstructor='False' ; jname='setVarThresholdGen']
INFO:root:function: ['cv.BackgroundSubtractorMOG2.getVarInit', 'double', [], []]
INFO:root:ok: FuncFamilyInfo [funcs='[<__main__.FuncInfo object at 0x1062c7390>]' ; isconstructor='False' ; jname='getVarInit']
INFO:root:function: ['cv.BackgroundSubtractorMOG2.setVarInit', 'void', [], [['double', 'varInit', '', []]]]
INFO:root:ok: FuncFamilyInfo [funcs='[<__main__.FuncInfo object at 0x1062c73d0>]' ; isconstructor='False' ; jname='setVarInit']
INFO:root:function: ['cv.BackgroundSubtractorMOG2.getVarMin', 'double', [], []]
INFO:root:ok: FuncFamilyInfo [funcs='[<__main__.FuncInfo object at 0x1062c7550>]' ; isconstructor='False' ; jname='getVarMin']
INFO:root:function: ['cv.BackgroundSubtractorMOG2.setVarMin', 'void', [], [['double', 'varMin', '', []]]]
INFO:root:ok: FuncFamilyInfo [funcs='[<__main__.FuncInfo object at 0x1062c7610>]' ; isconstructor='False' ; jname='setVarMin']
INFO:root:function: ['cv.BackgroundSubtractorMOG2.getVarMax', 'double', [], []]
INFO:root:ok: FuncFamilyInfo [funcs='[<__main__.FuncInfo object at 0x1062c7710>]' ; isconstructor='False' ; jname='getVarMax']
INFO:root:function: ['cv.BackgroundSubtractorMOG2.setVarMax', 'void', [], [['double', 'varMax', '', []]]]
INFO:root:ok: FuncFamilyInfo [funcs='[<__main__.FuncInfo object at 0x1062c77d0>]' ; isconstructor='False' ; jname='setVarMax']
INFO:root:function: ['cv.BackgroundSubtractorMOG2.getComplexityReductionThreshold', 'double', [], []]
INFO:root:ok: FuncFamilyInfo [funcs='[<__main__.FuncInfo object at 0x1062c78d0>]' ; isconstructor='False' ; jname='getComplexityReductionThreshold']
INFO:root:function: ['cv.BackgroundSubtractorMOG2.setComplexityReductionThreshold', 'void', [], [['double', 'ct', '', []]]]
INFO:root:ok: FuncFamilyInfo [funcs='[<__main__.FuncInfo object at 0x1062c7990>]' ; isconstructor='False' ; jname='setComplexityReductionThreshold']
INFO:root:function: ['cv.BackgroundSubtractorMOG2.getDetectShadows', 'bool', [], []]
INFO:root:ok: FuncFamilyInfo [funcs='[<__main__.FuncInfo object at 0x1062c7a90>]' ; isconstructor='False' ; jname='getDetectShadows']
INFO:root:function: ['cv.BackgroundSubtractorMOG2.setDetectShadows', 'void', [], [['bool', 'detectShadows', '', []]]]
INFO:root:ok: FuncFamilyInfo [funcs='[<__main__.FuncInfo object at 0x1062c7b50>]' ; isconstructor='False' ; jname='setDetectShadows']
INFO:root:function: ['cv.BackgroundSubtractorMOG2.getShadowValue', 'int', [], []]
INFO:root:ok: FuncFamilyInfo [funcs='[<__main__.FuncInfo object at 0x1062c7c50>]' ; isconstructor='False' ; jname='getShadowValue']
INFO:root:function: ['cv.BackgroundSubtractorMOG2.setShadowValue', 'void', [], [['int', 'value', '', []]]]
INFO:root:ok: FuncFamilyInfo [funcs='[<__main__.FuncInfo object at 0x1062c7c90>]' ; isconstructor='False' ; jname='setShadowValue']
INFO:root:function: ['cv.BackgroundSubtractorMOG2.getShadowThreshold', 'double', [], []]
INFO:root:ok: FuncFamilyInfo [funcs='[<__main__.FuncInfo object at 0x1062c7e10>]' ; isconstructor='False' ; jname='getShadowThreshold']
INFO:root:function: ['cv.BackgroundSubtractorMOG2.setShadowThreshold', 'void', [], [['double', 'threshold', '', []]]]
INFO:root:ok: FuncFamilyInfo [funcs='[<__main__.FuncInfo object at 0x1062c7e50>]' ; isconstructor='False' ; jname='setShadowThreshold']
INFO:root:function: ['cv.createBackgroundSubtractorMOG2', 'Ptr_BackgroundSubtractorMOG2', [], [['int', 'history', '500', []], ['double', 'varThreshold', '16', []], ['bool', 'detectShadows', 'true', []]]]
INFO:root:ok: FuncFamilyInfo [funcs='[<__main__.FuncInfo object at 0x1062c7fd0>]' ; isconstructor='False' ; jname='createBackgroundSubtractorMOG2']
INFO:root:class: ['class cv.BackgroundSubtractorKNN', ': cv::BackgroundSubtractor', [], []]
INFO:root:ok: ClassInfo [base='BackgroundSubtractor' ; classname='' ; classpath='' ; cname='BackgroundSubtractorKNN' ; consts='[]' ; imports='set([])' ; jname='BackgroundSubtractorKNN' ; methods='{}' ; methods_suffixes='{}' ; name='BackgroundSubtractorKNN' ; namespace='cv' ; private_consts='[]' ; props='[]']
INFO:root:function: ['cv.BackgroundSubtractorKNN.getHistory', 'int', [], []]
INFO:root:ok: FuncFamilyInfo [funcs='[<__main__.FuncInfo object at 0x1062d0290>]' ; isconstructor='False' ; jname='getHistory']
INFO:root:function: ['cv.BackgroundSubtractorKNN.setHistory', 'void', [], [['int', 'history', '', []]]]
INFO:root:ok: FuncFamilyInfo [funcs='[<__main__.FuncInfo object at 0x1062d02d0>]' ; isconstructor='False' ; jname='setHistory']
INFO:root:function: ['cv.BackgroundSubtractorKNN.getNSamples', 'int', [], []]
INFO:root:ok: FuncFamilyInfo [funcs='[<__main__.FuncInfo object at 0x1062d0450>]' ; isconstructor='False' ; jname='getNSamples']
INFO:root:function: ['cv.BackgroundSubtractorKNN.setNSamples', 'void', [], [['int', '_nN', '', []]]]
INFO:root:ok: FuncFamilyInfo [funcs='[<__main__.FuncInfo object at 0x1062d0510>]' ; isconstructor='False' ; jname='setNSamples']
INFO:root:function: ['cv.BackgroundSubtractorKNN.getDist2Threshold', 'double', [], []]
INFO:root:ok: FuncFamilyInfo [funcs='[<__main__.FuncInfo object at 0x1062d0610>]' ; isconstructor='False' ; jname='getDist2Threshold']
INFO:root:function: ['cv.BackgroundSubtractorKNN.setDist2Threshold', 'void', [], [['double', '_dist2Threshold', '', []]]]
INFO:root:ok: FuncFamilyInfo [funcs='[<__main__.FuncInfo object at 0x1062d06d0>]' ; isconstructor='False' ; jname='setDist2Threshold']
INFO:root:function: ['cv.BackgroundSubtractorKNN.getkNNSamples', 'int', [], []]
INFO:root:ok: FuncFamilyInfo [funcs='[<__main__.FuncInfo object at 0x1062d07d0>]' ; isconstructor='False' ; jname='getkNNSamples']
INFO:root:function: ['cv.BackgroundSubtractorKNN.setkNNSamples', 'void', [], [['int', '_nkNN', '', []]]]
INFO:root:ok: FuncFamilyInfo [funcs='[<__main__.FuncInfo object at 0x1062d0810>]' ; isconstructor='False' ; jname='setkNNSamples']
INFO:root:function: ['cv.BackgroundSubtractorKNN.getDetectShadows', 'bool', [], []]
INFO:root:ok: FuncFamilyInfo [funcs='[<__main__.FuncInfo object at 0x1062d0990>]' ; isconstructor='False' ; jname='getDetectShadows']
INFO:root:function: ['cv.BackgroundSubtractorKNN.setDetectShadows', 'void', [], [['bool', 'detectShadows', '', []]]]
INFO:root:ok: FuncFamilyInfo [funcs='[<__main__.FuncInfo object at 0x1062d09d0>]' ; isconstructor='False' ; jname='setDetectShadows']
INFO:root:function: ['cv.BackgroundSubtractorKNN.getShadowValue', 'int', [], []]
INFO:root:ok: FuncFamilyInfo [funcs='[<__main__.FuncInfo object at 0x1062d0b50>]' ; isconstructor='False' ; jname='getShadowValue']
INFO:root:function: ['cv.BackgroundSubtractorKNN.setShadowValue', 'void', [], [['int', 'value', '', []]]]
INFO:root:ok: FuncFamilyInfo [funcs='[<__main__.FuncInfo object at 0x1062d0b90>]' ; isconstructor='False' ; jname='setShadowValue']
INFO:root:function: ['cv.BackgroundSubtractorKNN.getShadowThreshold', 'double', [], []]
INFO:root:ok: FuncFamilyInfo [funcs='[<__main__.FuncInfo object at 0x1062d0d10>]' ; isconstructor='False' ; jname='getShadowThreshold']
INFO:root:function: ['cv.BackgroundSubtractorKNN.setShadowThreshold', 'void', [], [['double', 'threshold', '', []]]]
INFO:root:ok: FuncFamilyInfo [funcs='[<__main__.FuncInfo object at 0x1062d0d50>]' ; isconstructor='False' ; jname='setShadowThreshold']
INFO:root:function: ['cv.createBackgroundSubtractorKNN', 'Ptr_BackgroundSubtractorKNN', [], [['int', 'history', '500', []], ['double', 'dist2Threshold', '400.0', []], ['bool', 'detectShadows', 'true', []]]]
INFO:root:ok: FuncFamilyInfo [funcs='[<__main__.FuncInfo object at 0x1062d0ed0>]' ; isconstructor='False' ; jname='createBackgroundSubtractorKNN']
INFO:root:=== Header: /Users/swinston/Mirada/lib/c/opencv/modules/video/include/opencv2/video/tracking.hpp
INFO:root:=== Namespaces: set(['', 'cv'])
INFO:root:constant: ['const cv.OPTFLOW_USE_INITIAL_FLOW', '4', [], []]
INFO:root:ok: ConstInfo [addedManually='False' ; classname='Video' ; classpath='' ; cname='OPTFLOW_USE_INITIAL_FLOW' ; name='OPTFLOW_USE_INITIAL_FLOW' ; namespace='cv' ; value='4']
INFO:root:constant: ['const cv.OPTFLOW_LK_GET_MIN_EIGENVALS', '8', [], []]
INFO:root:ok: ConstInfo [addedManually='False' ; classname='Video' ; classpath='' ; cname='OPTFLOW_LK_GET_MIN_EIGENVALS' ; name='OPTFLOW_LK_GET_MIN_EIGENVALS' ; namespace='cv' ; value='8']
INFO:root:constant: ['const cv.OPTFLOW_FARNEBACK_GAUSSIAN', '256', [], []]
INFO:root:ok: ConstInfo [addedManually='False' ; classname='Video' ; classpath='' ; cname='OPTFLOW_FARNEBACK_GAUSSIAN' ; name='OPTFLOW_FARNEBACK_GAUSSIAN' ; namespace='cv' ; value='256']
INFO:root:function: ['cv.CamShift', 'RotatedRect', [], [['Mat', 'probImage', '', []], ['Rect', 'window', '', ['/IO']], ['TermCriteria', 'criteria', '', []]]]
INFO:root:ok: FuncFamilyInfo [funcs='[<__main__.FuncInfo object at 0x1062d3410>]' ; isconstructor='False' ; jname='CamShift']
INFO:root:function: ['cv.meanShift', 'int', [], [['Mat', 'probImage', '', []], ['Rect', 'window', '', ['/IO']], ['TermCriteria', 'criteria', '', []]]]
INFO:root:ok: FuncFamilyInfo [funcs='[<__main__.FuncInfo object at 0x1062d3610>]' ; isconstructor='False' ; jname='meanShift']
INFO:root:function: ['cv.buildOpticalFlowPyramid', 'int', [], [['Mat', 'img', '', []], ['vector_Mat', 'pyramid', '', ['/O']], ['Size', 'winSize', '', []], ['int', 'maxLevel', '', []], ['bool', 'withDerivatives', 'true', []], ['int', 'pyrBorder', 'BORDER_REFLECT_101', []], ['int', 'derivBorder', 'BORDER_CONSTANT', []], ['bool', 'tryReuseInputImage', 'true', []]]]
INFO:root:ok: FuncFamilyInfo [funcs='[<__main__.FuncInfo object at 0x1062d3750>]' ; isconstructor='False' ; jname='buildOpticalFlowPyramid']
INFO:root:function: ['cv.calcOpticalFlowPyrLK', 'void', [], [['Mat', 'prevImg', '', []], ['Mat', 'nextImg', '', []], ['Mat', 'prevPts', '', []], ['Mat', 'nextPts', '', ['/IO']], ['Mat', 'status', '', ['/O']], ['Mat', 'err', '', ['/O']], ['Size', 'winSize', 'Size(21,21)', []], ['int', 'maxLevel', '3', []], ['TermCriteria', 'criteria', 'TermCriteria(TermCriteria::COUNT+TermCriteria::EPS, 30, 0.01)', []], ['int', 'flags', '0', []], ['double', 'minEigThreshold', '1e-4', []]]]
INFO:root:ok: FuncFamilyInfo [funcs='[<__main__.FuncInfo object at 0x1062d3a10>]' ; isconstructor='False' ; jname='calcOpticalFlowPyrLK']
INFO:root:function: ['cv.calcOpticalFlowFarneback', 'void', [], [['Mat', 'prev', '', []], ['Mat', 'next', '', []], ['Mat', 'flow', '', ['/IO']], ['double', 'pyr_scale', '', []], ['int', 'levels', '', []], ['int', 'winsize', '', []], ['int', 'iterations', '', []], ['int', 'poly_n', '', []], ['double', 'poly_sigma', '', []], ['int', 'flags', '', []]]]
INFO:root:ok: FuncFamilyInfo [funcs='[<__main__.FuncInfo object at 0x1062d3d90>]' ; isconstructor='False' ; jname='calcOpticalFlowFarneback']
INFO:root:function: ['cv.estimateRigidTransform', 'Mat', [], [['Mat', 'src', '', []], ['Mat', 'dst', '', []], ['bool', 'fullAffine', '', []]]]
INFO:root:ok: FuncFamilyInfo [funcs='[<__main__.FuncInfo object at 0x1062c8110>]' ; isconstructor='False' ; jname='estimateRigidTransform']
INFO:root:constant: ['const cv.MOTION_TRANSLATION', '0', [], []]
INFO:root:ok: ConstInfo [addedManually='False' ; classname='Video' ; classpath='' ; cname='MOTION_TRANSLATION' ; name='MOTION_TRANSLATION' ; namespace='cv' ; value='0']
INFO:root:constant: ['const cv.MOTION_EUCLIDEAN', '1', [], []]
INFO:root:ok: ConstInfo [addedManually='False' ; classname='Video' ; classpath='' ; cname='MOTION_EUCLIDEAN' ; name='MOTION_EUCLIDEAN' ; namespace='cv' ; value='1']
INFO:root:constant: ['const cv.MOTION_AFFINE', '2', [], []]
INFO:root:ok: ConstInfo [addedManually='False' ; classname='Video' ; classpath='' ; cname='MOTION_AFFINE' ; name='MOTION_AFFINE' ; namespace='cv' ; value='2']
INFO:root:constant: ['const cv.MOTION_HOMOGRAPHY', '3', [], []]
INFO:root:ok: ConstInfo [addedManually='False' ; classname='Video' ; classpath='' ; cname='MOTION_HOMOGRAPHY' ; name='MOTION_HOMOGRAPHY' ; namespace='cv' ; value='3']
INFO:root:function: ['cv.findTransformECC', 'double', [], [['Mat', 'templateImage', '', []], ['Mat', 'inputImage', '', []], ['Mat', 'warpMatrix', '', ['/IO']], ['int', 'motionType', 'MOTION_AFFINE', []], ['TermCriteria', 'criteria', 'TermCriteria(TermCriteria::COUNT+TermCriteria::EPS, 50, 0.001)', []]]]
INFO:root:ok: FuncFamilyInfo [funcs='[<__main__.FuncInfo object at 0x1062c8410>]' ; isconstructor='False' ; jname='findTransformECC']
INFO:root:class: ['class cv.KalmanFilter', '', [], [['Mat', 'statePre', '', ['/RW']], ['Mat', 'statePost', '', ['/RW']], ['Mat', 'transitionMatrix', '', ['/RW']], ['Mat', 'controlMatrix', '', ['/RW']], ['Mat', 'measurementMatrix', '', ['/RW']], ['Mat', 'processNoiseCov', '', ['/RW']], ['Mat', 'measurementNoiseCov', '', ['/RW']], ['Mat', 'errorCovPre', '', ['/RW']], ['Mat', 'gain', '', ['/RW']], ['Mat', 'errorCovPost', '', ['/RW']]]]
INFO:root:ok: ClassInfo [base='' ; classname='' ; classpath='' ; cname='KalmanFilter' ; consts='[]' ; imports='set([])' ; jname='KalmanFilter' ; methods='{}' ; methods_suffixes='{}' ; name='KalmanFilter' ; namespace='cv' ; private_consts='[]' ; props='[<__main__.ClassPropInfo object at 0x1062c8610>, <__main__.ClassPropInfo object at 0x1062c85d0>, <__main__.ClassPropInfo object at 0x1062c8590>, <__main__.ClassPropInfo object at 0x1062c8650>, <__main__.ClassPropInfo object at 0x1062c8690>, <__main__.ClassPropInfo object at 0x1062c86d0>, <__main__.ClassPropInfo object at 0x1062c8710>, <__main__.ClassPropInfo object at 0x1062c8750>, <__main__.ClassPropInfo object at 0x1062c8790>, <__main__.ClassPropInfo object at 0x1062c87d0>]']
INFO:root:function: ['cv.KalmanFilter.KalmanFilter', '', [], []]
INFO:root:ok: FuncFamilyInfo [funcs='[<__main__.FuncInfo object at 0x1062c8810>]' ; isconstructor='True' ; jname='KalmanFilter']
INFO:root:function: ['cv.KalmanFilter.KalmanFilter', '', [], [['int', 'dynamParams', '', []], ['int', 'measureParams', '', []], ['int', 'controlParams', '0', []], ['int', 'type', 'CV_32F', []]]]
INFO:root:ok: FuncFamilyInfo [funcs='[<__main__.FuncInfo object at 0x1062c8890>]' ; isconstructor='True' ; jname='KalmanFilter']
INFO:root:function: ['cv.KalmanFilter.predict', 'Mat', [], [['Mat', 'control', 'Mat()', []]]]
INFO:root:ok: FuncFamilyInfo [funcs='[<__main__.FuncInfo object at 0x1062c8950>]' ; isconstructor='False' ; jname='predict']
INFO:root:function: ['cv.KalmanFilter.correct', 'Mat', [], [['Mat', 'measurement', '', []]]]
INFO:root:ok: FuncFamilyInfo [funcs='[<__main__.FuncInfo object at 0x1062c8ad0>]' ; isconstructor='False' ; jname='correct']
INFO:root:class: ['class cv.DenseOpticalFlow', ': cv::Algorithm', [], []]
INFO:root:ok: ClassInfo [base='Algorithm' ; classname='' ; classpath='' ; cname='DenseOpticalFlow' ; consts='[]' ; imports='set(['org.opencv.core.Algorithm'])' ; jname='DenseOpticalFlow' ; methods='{}' ; methods_suffixes='{}' ; name='DenseOpticalFlow' ; namespace='cv' ; private_consts='[]' ; props='[]']
INFO:root:function: ['cv.DenseOpticalFlow.calc', 'void', [], [['Mat', 'I0', '', []], ['Mat', 'I1', '', []], ['Mat', 'flow', '', ['/IO']]]]
INFO:root:ok: FuncFamilyInfo [funcs='[<__main__.FuncInfo object at 0x1062c8c10>]' ; isconstructor='False' ; jname='calc']
INFO:root:function: ['cv.DenseOpticalFlow.collectGarbage', 'void', [], []]
INFO:root:ok: FuncFamilyInfo [funcs='[<__main__.FuncInfo object at 0x1062c8c50>]' ; isconstructor='False' ; jname='collectGarbage']
INFO:root:function: ['cv.createOptFlow_DualTVL1', 'Ptr_DenseOpticalFlow', [], []]
INFO:root:ok: FuncFamilyInfo [funcs='[<__main__.FuncInfo object at 0x1062c8d90>]' ; isconstructor='False' ; jname='createOptFlow_DualTVL1']
INFO:root:=== Header: /Users/swinston/Mirada/lib/c/opencv/modules/video/include/opencv2/video/video.hpp
INFO:root:=== Namespaces: set(['', 'cv'])
