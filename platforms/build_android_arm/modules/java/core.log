INFO:root:class: ['class Core', '', [], []]
INFO:root:ok: ClassInfo [base='' ; classname='' ; classpath='' ; cname='Core' ; consts='[<__main__.ConstInfo object at 0x10a756650>, <__main__.ConstInfo object at 0x10a756690>, <__main__.ConstInfo object at 0x10a7566d0>, <__main__.ConstInfo object at 0x10a756710>, <__main__.ConstInfo object at 0x10a756750>, <__main__.ConstInfo object at 0x10a756790>, <__main__.ConstInfo object at 0x10a7567d0>, <__main__.ConstInfo object at 0x10a756810>]' ; imports='set(['java.lang.String'])' ; jname='Core' ; methods='{}' ; methods_suffixes='{}' ; name='Core' ; namespace='' ; private_consts='[<__main__.ConstInfo object at 0x10a756450>, <__main__.ConstInfo object at 0x10a756490>, <__main__.ConstInfo object at 0x10a7564d0>, <__main__.ConstInfo object at 0x10a756510>, <__main__.ConstInfo object at 0x10a756550>, <__main__.ConstInfo object at 0x10a756590>, <__main__.ConstInfo object at 0x10a7565d0>, <__main__.ConstInfo object at 0x10a756610>]' ; props='[]']
INFO:root:=== Header: /Users/swinston/Mirada/lib/c/opencv/modules/core/include/opencv2/core/base.hpp
INFO:root:=== Namespaces: set(['cv.ogl', 'cv.cudev', 'cv.ipp', 'cv.Error', 'cv.cuda', 'cv'])
INFO:root:constant: ['const cv.Error.StsOk', '0', [], []]
INFO:root:ok: ConstInfo [addedManually='False' ; classname='Core' ; classpath='' ; cname='StsOk' ; name='StsOk' ; namespace='cv.Error' ; value='0']
INFO:root:constant: ['const cv.Error.StsBackTrace', '-1', [], []]
INFO:root:ok: ConstInfo [addedManually='False' ; classname='Core' ; classpath='' ; cname='StsBackTrace' ; name='StsBackTrace' ; namespace='cv.Error' ; value='-1']
INFO:root:constant: ['const cv.Error.StsError', '-2', [], []]
INFO:root:ok: ConstInfo [addedManually='False' ; classname='Core' ; classpath='' ; cname='StsError' ; name='StsError' ; namespace='cv.Error' ; value='-2']
INFO:root:constant: ['const cv.Error.StsInternal', '-3', [], []]
INFO:root:ok: ConstInfo [addedManually='False' ; classname='Core' ; classpath='' ; cname='StsInternal' ; name='StsInternal' ; namespace='cv.Error' ; value='-3']
INFO:root:constant: ['const cv.Error.StsNoMem', '-4', [], []]
INFO:root:ok: ConstInfo [addedManually='False' ; classname='Core' ; classpath='' ; cname='StsNoMem' ; name='StsNoMem' ; namespace='cv.Error' ; value='-4']
INFO:root:constant: ['const cv.Error.StsBadArg', '-5', [], []]
INFO:root:ok: ConstInfo [addedManually='False' ; classname='Core' ; classpath='' ; cname='StsBadArg' ; name='StsBadArg' ; namespace='cv.Error' ; value='-5']
INFO:root:constant: ['const cv.Error.StsBadFunc', '-6', [], []]
INFO:root:ok: ConstInfo [addedManually='False' ; classname='Core' ; classpath='' ; cname='StsBadFunc' ; name='StsBadFunc' ; namespace='cv.Error' ; value='-6']
INFO:root:constant: ['const cv.Error.StsNoConv', '-7', [], []]
INFO:root:ok: ConstInfo [addedManually='False' ; classname='Core' ; classpath='' ; cname='StsNoConv' ; name='StsNoConv' ; namespace='cv.Error' ; value='-7']
INFO:root:constant: ['const cv.Error.StsAutoTrace', '-8', [], []]
INFO:root:ok: ConstInfo [addedManually='False' ; classname='Core' ; classpath='' ; cname='StsAutoTrace' ; name='StsAutoTrace' ; namespace='cv.Error' ; value='-8']
INFO:root:constant: ['const cv.Error.HeaderIsNull', '-9', [], []]
INFO:root:ok: ConstInfo [addedManually='False' ; classname='Core' ; classpath='' ; cname='HeaderIsNull' ; name='HeaderIsNull' ; namespace='cv.Error' ; value='-9']
INFO:root:constant: ['const cv.Error.BadImageSize', '-10', [], []]
INFO:root:ok: ConstInfo [addedManually='False' ; classname='Core' ; classpath='' ; cname='BadImageSize' ; name='BadImageSize' ; namespace='cv.Error' ; value='-10']
INFO:root:constant: ['const cv.Error.BadOffset', '-11', [], []]
INFO:root:ok: ConstInfo [addedManually='False' ; classname='Core' ; classpath='' ; cname='BadOffset' ; name='BadOffset' ; namespace='cv.Error' ; value='-11']
INFO:root:constant: ['const cv.Error.BadDataPtr', '-12', [], []]
INFO:root:ok: ConstInfo [addedManually='False' ; classname='Core' ; classpath='' ; cname='BadDataPtr' ; name='BadDataPtr' ; namespace='cv.Error' ; value='-12']
INFO:root:constant: ['const cv.Error.BadStep', '-13', [], []]
INFO:root:ok: ConstInfo [addedManually='False' ; classname='Core' ; classpath='' ; cname='BadStep' ; name='BadStep' ; namespace='cv.Error' ; value='-13']
INFO:root:constant: ['const cv.Error.BadModelOrChSeq', '-14', [], []]
INFO:root:ok: ConstInfo [addedManually='False' ; classname='Core' ; classpath='' ; cname='BadModelOrChSeq' ; name='BadModelOrChSeq' ; namespace='cv.Error' ; value='-14']
INFO:root:constant: ['const cv.Error.BadNumChannels', '-15', [], []]
INFO:root:ok: ConstInfo [addedManually='False' ; classname='Core' ; classpath='' ; cname='BadNumChannels' ; name='BadNumChannels' ; namespace='cv.Error' ; value='-15']
INFO:root:constant: ['const cv.Error.BadNumChannel1U', '-16', [], []]
INFO:root:ok: ConstInfo [addedManually='False' ; classname='Core' ; classpath='' ; cname='BadNumChannel1U' ; name='BadNumChannel1U' ; namespace='cv.Error' ; value='-16']
INFO:root:constant: ['const cv.Error.BadDepth', '-17', [], []]
INFO:root:ok: ConstInfo [addedManually='False' ; classname='Core' ; classpath='' ; cname='BadDepth' ; name='BadDepth' ; namespace='cv.Error' ; value='-17']
INFO:root:constant: ['const cv.Error.BadAlphaChannel', '-18', [], []]
INFO:root:ok: ConstInfo [addedManually='False' ; classname='Core' ; classpath='' ; cname='BadAlphaChannel' ; name='BadAlphaChannel' ; namespace='cv.Error' ; value='-18']
INFO:root:constant: ['const cv.Error.BadOrder', '-19', [], []]
INFO:root:ok: ConstInfo [addedManually='False' ; classname='Core' ; classpath='' ; cname='BadOrder' ; name='BadOrder' ; namespace='cv.Error' ; value='-19']
INFO:root:constant: ['const cv.Error.BadOrigin', '-20', [], []]
INFO:root:ok: ConstInfo [addedManually='False' ; classname='Core' ; classpath='' ; cname='BadOrigin' ; name='BadOrigin' ; namespace='cv.Error' ; value='-20']
INFO:root:constant: ['const cv.Error.BadAlign', '-21', [], []]
INFO:root:ok: ConstInfo [addedManually='False' ; classname='Core' ; classpath='' ; cname='BadAlign' ; name='BadAlign' ; namespace='cv.Error' ; value='-21']
INFO:root:constant: ['const cv.Error.BadCallBack', '-22', [], []]
INFO:root:ok: ConstInfo [addedManually='False' ; classname='Core' ; classpath='' ; cname='BadCallBack' ; name='BadCallBack' ; namespace='cv.Error' ; value='-22']
INFO:root:constant: ['const cv.Error.BadTileSize', '-23', [], []]
INFO:root:ok: ConstInfo [addedManually='False' ; classname='Core' ; classpath='' ; cname='BadTileSize' ; name='BadTileSize' ; namespace='cv.Error' ; value='-23']
INFO:root:constant: ['const cv.Error.BadCOI', '-24', [], []]
INFO:root:ok: ConstInfo [addedManually='False' ; classname='Core' ; classpath='' ; cname='BadCOI' ; name='BadCOI' ; namespace='cv.Error' ; value='-24']
INFO:root:constant: ['const cv.Error.BadROISize', '-25', [], []]
INFO:root:ok: ConstInfo [addedManually='False' ; classname='Core' ; classpath='' ; cname='BadROISize' ; name='BadROISize' ; namespace='cv.Error' ; value='-25']
INFO:root:constant: ['const cv.Error.MaskIsTiled', '-26', [], []]
INFO:root:ok: ConstInfo [addedManually='False' ; classname='Core' ; classpath='' ; cname='MaskIsTiled' ; name='MaskIsTiled' ; namespace='cv.Error' ; value='-26']
INFO:root:constant: ['const cv.Error.StsNullPtr', '-27', [], []]
INFO:root:ok: ConstInfo [addedManually='False' ; classname='Core' ; classpath='' ; cname='StsNullPtr' ; name='StsNullPtr' ; namespace='cv.Error' ; value='-27']
INFO:root:constant: ['const cv.Error.StsVecLengthErr', '-28', [], []]
INFO:root:ok: ConstInfo [addedManually='False' ; classname='Core' ; classpath='' ; cname='StsVecLengthErr' ; name='StsVecLengthErr' ; namespace='cv.Error' ; value='-28']
INFO:root:constant: ['const cv.Error.StsFilterStructContentErr', '-29', [], []]
INFO:root:ok: ConstInfo [addedManually='False' ; classname='Core' ; classpath='' ; cname='StsFilterStructContentErr' ; name='StsFilterStructContentErr' ; namespace='cv.Error' ; value='-29']
INFO:root:constant: ['const cv.Error.StsKernelStructContentErr', '-30', [], []]
INFO:root:ok: ConstInfo [addedManually='False' ; classname='Core' ; classpath='' ; cname='StsKernelStructContentErr' ; name='StsKernelStructContentErr' ; namespace='cv.Error' ; value='-30']
INFO:root:constant: ['const cv.Error.StsFilterOffsetErr', '-31', [], []]
INFO:root:ok: ConstInfo [addedManually='False' ; classname='Core' ; classpath='' ; cname='StsFilterOffsetErr' ; name='StsFilterOffsetErr' ; namespace='cv.Error' ; value='-31']
INFO:root:constant: ['const cv.Error.StsBadSize', '-201', [], []]
INFO:root:ok: ConstInfo [addedManually='False' ; classname='Core' ; classpath='' ; cname='StsBadSize' ; name='StsBadSize' ; namespace='cv.Error' ; value='-201']
INFO:root:constant: ['const cv.Error.StsDivByZero', '-202', [], []]
INFO:root:ok: ConstInfo [addedManually='False' ; classname='Core' ; classpath='' ; cname='StsDivByZero' ; name='StsDivByZero' ; namespace='cv.Error' ; value='-202']
INFO:root:constant: ['const cv.Error.StsInplaceNotSupported', '-203', [], []]
INFO:root:ok: ConstInfo [addedManually='False' ; classname='Core' ; classpath='' ; cname='StsInplaceNotSupported' ; name='StsInplaceNotSupported' ; namespace='cv.Error' ; value='-203']
INFO:root:constant: ['const cv.Error.StsObjectNotFound', '-204', [], []]
INFO:root:ok: ConstInfo [addedManually='False' ; classname='Core' ; classpath='' ; cname='StsObjectNotFound' ; name='StsObjectNotFound' ; namespace='cv.Error' ; value='-204']
INFO:root:constant: ['const cv.Error.StsUnmatchedFormats', '-205', [], []]
INFO:root:ok: ConstInfo [addedManually='False' ; classname='Core' ; classpath='' ; cname='StsUnmatchedFormats' ; name='StsUnmatchedFormats' ; namespace='cv.Error' ; value='-205']
INFO:root:constant: ['const cv.Error.StsBadFlag', '-206', [], []]
INFO:root:ok: ConstInfo [addedManually='False' ; classname='Core' ; classpath='' ; cname='StsBadFlag' ; name='StsBadFlag' ; namespace='cv.Error' ; value='-206']
INFO:root:constant: ['const cv.Error.StsBadPoint', '-207', [], []]
INFO:root:ok: ConstInfo [addedManually='False' ; classname='Core' ; classpath='' ; cname='StsBadPoint' ; name='StsBadPoint' ; namespace='cv.Error' ; value='-207']
INFO:root:constant: ['const cv.Error.StsBadMask', '-208', [], []]
INFO:root:ok: ConstInfo [addedManually='False' ; classname='Core' ; classpath='' ; cname='StsBadMask' ; name='StsBadMask' ; namespace='cv.Error' ; value='-208']
INFO:root:constant: ['const cv.Error.StsUnmatchedSizes', '-209', [], []]
INFO:root:ok: ConstInfo [addedManually='False' ; classname='Core' ; classpath='' ; cname='StsUnmatchedSizes' ; name='StsUnmatchedSizes' ; namespace='cv.Error' ; value='-209']
INFO:root:constant: ['const cv.Error.StsUnsupportedFormat', '-210', [], []]
INFO:root:ok: ConstInfo [addedManually='False' ; classname='Core' ; classpath='' ; cname='StsUnsupportedFormat' ; name='StsUnsupportedFormat' ; namespace='cv.Error' ; value='-210']
INFO:root:constant: ['const cv.Error.StsOutOfRange', '-211', [], []]
INFO:root:ok: ConstInfo [addedManually='False' ; classname='Core' ; classpath='' ; cname='StsOutOfRange' ; name='StsOutOfRange' ; namespace='cv.Error' ; value='-211']
INFO:root:constant: ['const cv.Error.StsParseError', '-212', [], []]
INFO:root:ok: ConstInfo [addedManually='False' ; classname='Core' ; classpath='' ; cname='StsParseError' ; name='StsParseError' ; namespace='cv.Error' ; value='-212']
INFO:root:constant: ['const cv.Error.StsNotImplemented', '-213', [], []]
INFO:root:ok: ConstInfo [addedManually='False' ; classname='Core' ; classpath='' ; cname='StsNotImplemented' ; name='StsNotImplemented' ; namespace='cv.Error' ; value='-213']
INFO:root:constant: ['const cv.Error.StsBadMemBlock', '-214', [], []]
INFO:root:ok: ConstInfo [addedManually='False' ; classname='Core' ; classpath='' ; cname='StsBadMemBlock' ; name='StsBadMemBlock' ; namespace='cv.Error' ; value='-214']
INFO:root:constant: ['const cv.Error.StsAssert', '-215', [], []]
INFO:root:ok: ConstInfo [addedManually='False' ; classname='Core' ; classpath='' ; cname='StsAssert' ; name='StsAssert' ; namespace='cv.Error' ; value='-215']
INFO:root:constant: ['const cv.Error.GpuNotSupported', '-216', [], []]
INFO:root:ok: ConstInfo [addedManually='False' ; classname='Core' ; classpath='' ; cname='GpuNotSupported' ; name='GpuNotSupported' ; namespace='cv.Error' ; value='-216']
INFO:root:constant: ['const cv.Error.GpuApiCallError', '-217', [], []]
INFO:root:ok: ConstInfo [addedManually='False' ; classname='Core' ; classpath='' ; cname='GpuApiCallError' ; name='GpuApiCallError' ; namespace='cv.Error' ; value='-217']
INFO:root:constant: ['const cv.Error.OpenGlNotSupported', '-218', [], []]
INFO:root:ok: ConstInfo [addedManually='False' ; classname='Core' ; classpath='' ; cname='OpenGlNotSupported' ; name='OpenGlNotSupported' ; namespace='cv.Error' ; value='-218']
INFO:root:constant: ['const cv.Error.OpenGlApiCallError', '-219', [], []]
INFO:root:ok: ConstInfo [addedManually='False' ; classname='Core' ; classpath='' ; cname='OpenGlApiCallError' ; name='OpenGlApiCallError' ; namespace='cv.Error' ; value='-219']
INFO:root:constant: ['const cv.Error.OpenCLApiCallError', '-220', [], []]
INFO:root:ok: ConstInfo [addedManually='False' ; classname='Core' ; classpath='' ; cname='OpenCLApiCallError' ; name='OpenCLApiCallError' ; namespace='cv.Error' ; value='-220']
INFO:root:constant: ['const cv.Error.OpenCLDoubleNotSupported', '-221', [], []]
INFO:root:ok: ConstInfo [addedManually='False' ; classname='Core' ; classpath='' ; cname='OpenCLDoubleNotSupported' ; name='OpenCLDoubleNotSupported' ; namespace='cv.Error' ; value='-221']
INFO:root:constant: ['const cv.Error.OpenCLInitError', '-222', [], []]
INFO:root:ok: ConstInfo [addedManually='False' ; classname='Core' ; classpath='' ; cname='OpenCLInitError' ; name='OpenCLInitError' ; namespace='cv.Error' ; value='-222']
INFO:root:constant: ['const cv.Error.OpenCLNoAMDBlasFft', '-223', [], []]
INFO:root:ok: ConstInfo [addedManually='False' ; classname='Core' ; classpath='' ; cname='OpenCLNoAMDBlasFft' ; name='OpenCLNoAMDBlasFft' ; namespace='cv.Error' ; value='-223']
INFO:root:constant: ['const cv.DECOMP_LU', '0', [], []]
INFO:root:ok: ConstInfo [addedManually='False' ; classname='Core' ; classpath='' ; cname='DECOMP_LU' ; name='DECOMP_LU' ; namespace='cv' ; value='0']
INFO:root:constant: ['const cv.DECOMP_SVD', '1', [], []]
INFO:root:ok: ConstInfo [addedManually='False' ; classname='Core' ; classpath='' ; cname='DECOMP_SVD' ; name='DECOMP_SVD' ; namespace='cv' ; value='1']
INFO:root:constant: ['const cv.DECOMP_EIG', '2', [], []]
INFO:root:ok: ConstInfo [addedManually='False' ; classname='Core' ; classpath='' ; cname='DECOMP_EIG' ; name='DECOMP_EIG' ; namespace='cv' ; value='2']
INFO:root:constant: ['const cv.DECOMP_CHOLESKY', '3', [], []]
INFO:root:ok: ConstInfo [addedManually='False' ; classname='Core' ; classpath='' ; cname='DECOMP_CHOLESKY' ; name='DECOMP_CHOLESKY' ; namespace='cv' ; value='3']
INFO:root:constant: ['const cv.DECOMP_QR', '4', [], []]
INFO:root:ok: ConstInfo [addedManually='False' ; classname='Core' ; classpath='' ; cname='DECOMP_QR' ; name='DECOMP_QR' ; namespace='cv' ; value='4']
INFO:root:constant: ['const cv.DECOMP_NORMAL', '16', [], []]
INFO:root:ok: ConstInfo [addedManually='False' ; classname='Core' ; classpath='' ; cname='DECOMP_NORMAL' ; name='DECOMP_NORMAL' ; namespace='cv' ; value='16']
INFO:root:constant: ['const cv.NORM_INF', '1', [], []]
INFO:root:ok: ConstInfo [addedManually='False' ; classname='Core' ; classpath='' ; cname='NORM_INF' ; name='NORM_INF' ; namespace='cv' ; value='1']
INFO:root:constant: ['const cv.NORM_L1', '2', [], []]
INFO:root:ok: ConstInfo [addedManually='False' ; classname='Core' ; classpath='' ; cname='NORM_L1' ; name='NORM_L1' ; namespace='cv' ; value='2']
INFO:root:constant: ['const cv.NORM_L2', '4', [], []]
INFO:root:ok: ConstInfo [addedManually='False' ; classname='Core' ; classpath='' ; cname='NORM_L2' ; name='NORM_L2' ; namespace='cv' ; value='4']
INFO:root:constant: ['const cv.NORM_L2SQR', '5', [], []]
INFO:root:ok: ConstInfo [addedManually='False' ; classname='Core' ; classpath='' ; cname='NORM_L2SQR' ; name='NORM_L2SQR' ; namespace='cv' ; value='5']
INFO:root:constant: ['const cv.NORM_HAMMING', '6', [], []]
INFO:root:ok: ConstInfo [addedManually='False' ; classname='Core' ; classpath='' ; cname='NORM_HAMMING' ; name='NORM_HAMMING' ; namespace='cv' ; value='6']
INFO:root:constant: ['const cv.NORM_HAMMING2', '7', [], []]
INFO:root:ok: ConstInfo [addedManually='False' ; classname='Core' ; classpath='' ; cname='NORM_HAMMING2' ; name='NORM_HAMMING2' ; namespace='cv' ; value='7']
INFO:root:constant: ['const cv.NORM_TYPE_MASK', '7', [], []]
INFO:root:ok: ConstInfo [addedManually='False' ; classname='Core' ; classpath='' ; cname='NORM_TYPE_MASK' ; name='NORM_TYPE_MASK' ; namespace='cv' ; value='7']
INFO:root:constant: ['const cv.NORM_RELATIVE', '8', [], []]
INFO:root:ok: ConstInfo [addedManually='False' ; classname='Core' ; classpath='' ; cname='NORM_RELATIVE' ; name='NORM_RELATIVE' ; namespace='cv' ; value='8']
INFO:root:constant: ['const cv.NORM_MINMAX', '32', [], []]
INFO:root:ok: ConstInfo [addedManually='False' ; classname='Core' ; classpath='' ; cname='NORM_MINMAX' ; name='NORM_MINMAX' ; namespace='cv' ; value='32']
INFO:root:constant: ['const cv.CMP_EQ', '0', [], []]
INFO:root:ok: ConstInfo [addedManually='False' ; classname='Core' ; classpath='' ; cname='CMP_EQ' ; name='CMP_EQ' ; namespace='cv' ; value='0']
INFO:root:constant: ['const cv.CMP_GT', '1', [], []]
INFO:root:ok: ConstInfo [addedManually='False' ; classname='Core' ; classpath='' ; cname='CMP_GT' ; name='CMP_GT' ; namespace='cv' ; value='1']
INFO:root:constant: ['const cv.CMP_GE', '2', [], []]
INFO:root:ok: ConstInfo [addedManually='False' ; classname='Core' ; classpath='' ; cname='CMP_GE' ; name='CMP_GE' ; namespace='cv' ; value='2']
INFO:root:constant: ['const cv.CMP_LT', '3', [], []]
INFO:root:ok: ConstInfo [addedManually='False' ; classname='Core' ; classpath='' ; cname='CMP_LT' ; name='CMP_LT' ; namespace='cv' ; value='3']
INFO:root:constant: ['const cv.CMP_LE', '4', [], []]
INFO:root:ok: ConstInfo [addedManually='False' ; classname='Core' ; classpath='' ; cname='CMP_LE' ; name='CMP_LE' ; namespace='cv' ; value='4']
INFO:root:constant: ['const cv.CMP_NE', '5', [], []]
INFO:root:ok: ConstInfo [addedManually='False' ; classname='Core' ; classpath='' ; cname='CMP_NE' ; name='CMP_NE' ; namespace='cv' ; value='5']
INFO:root:constant: ['const cv.GEMM_1_T', '1', [], []]
INFO:root:ok: ConstInfo [addedManually='False' ; classname='Core' ; classpath='' ; cname='GEMM_1_T' ; name='GEMM_1_T' ; namespace='cv' ; value='1']
INFO:root:constant: ['const cv.GEMM_2_T', '2', [], []]
INFO:root:ok: ConstInfo [addedManually='False' ; classname='Core' ; classpath='' ; cname='GEMM_2_T' ; name='GEMM_2_T' ; namespace='cv' ; value='2']
INFO:root:constant: ['const cv.GEMM_3_T', '4', [], []]
INFO:root:ok: ConstInfo [addedManually='False' ; classname='Core' ; classpath='' ; cname='GEMM_3_T' ; name='GEMM_3_T' ; namespace='cv' ; value='4']
INFO:root:constant: ['const cv.DFT_INVERSE', '1', [], []]
INFO:root:ok: ConstInfo [addedManually='False' ; classname='Core' ; classpath='' ; cname='DFT_INVERSE' ; name='DFT_INVERSE' ; namespace='cv' ; value='1']
INFO:root:constant: ['const cv.DFT_SCALE', '2', [], []]
INFO:root:ok: ConstInfo [addedManually='False' ; classname='Core' ; classpath='' ; cname='DFT_SCALE' ; name='DFT_SCALE' ; namespace='cv' ; value='2']
INFO:root:constant: ['const cv.DFT_ROWS', '4', [], []]
INFO:root:ok: ConstInfo [addedManually='False' ; classname='Core' ; classpath='' ; cname='DFT_ROWS' ; name='DFT_ROWS' ; namespace='cv' ; value='4']
INFO:root:constant: ['const cv.DFT_COMPLEX_OUTPUT', '16', [], []]
INFO:root:ok: ConstInfo [addedManually='False' ; classname='Core' ; classpath='' ; cname='DFT_COMPLEX_OUTPUT' ; name='DFT_COMPLEX_OUTPUT' ; namespace='cv' ; value='16']
INFO:root:constant: ['const cv.DFT_REAL_OUTPUT', '32', [], []]
INFO:root:ok: ConstInfo [addedManually='False' ; classname='Core' ; classpath='' ; cname='DFT_REAL_OUTPUT' ; name='DFT_REAL_OUTPUT' ; namespace='cv' ; value='32']
INFO:root:constant: ['const cv.DCT_INVERSE', 'DFT_INVERSE', [], []]
INFO:root:ok: ConstInfo [addedManually='False' ; classname='Core' ; classpath='' ; cname='DCT_INVERSE' ; name='DCT_INVERSE' ; namespace='cv' ; value='DFT_INVERSE']
INFO:root:constant: ['const cv.DCT_ROWS', 'DFT_ROWS', [], []]
INFO:root:ok: ConstInfo [addedManually='False' ; classname='Core' ; classpath='' ; cname='DCT_ROWS' ; name='DCT_ROWS' ; namespace='cv' ; value='DFT_ROWS']
INFO:root:constant: ['const cv.BORDER_CONSTANT', '0', [], []]
INFO:root:ok: ConstInfo [addedManually='False' ; classname='Core' ; classpath='' ; cname='BORDER_CONSTANT' ; name='BORDER_CONSTANT' ; namespace='cv' ; value='0']
INFO:root:constant: ['const cv.BORDER_REPLICATE', '1', [], []]
INFO:root:ok: ConstInfo [addedManually='False' ; classname='Core' ; classpath='' ; cname='BORDER_REPLICATE' ; name='BORDER_REPLICATE' ; namespace='cv' ; value='1']
INFO:root:constant: ['const cv.BORDER_REFLECT', '2', [], []]
INFO:root:ok: ConstInfo [addedManually='False' ; classname='Core' ; classpath='' ; cname='BORDER_REFLECT' ; name='BORDER_REFLECT' ; namespace='cv' ; value='2']
INFO:root:constant: ['const cv.BORDER_WRAP', '3', [], []]
INFO:root:ok: ConstInfo [addedManually='False' ; classname='Core' ; classpath='' ; cname='BORDER_WRAP' ; name='BORDER_WRAP' ; namespace='cv' ; value='3']
INFO:root:constant: ['const cv.BORDER_REFLECT_101', '4', [], []]
INFO:root:ok: ConstInfo [addedManually='False' ; classname='Core' ; classpath='' ; cname='BORDER_REFLECT_101' ; name='BORDER_REFLECT_101' ; namespace='cv' ; value='4']
INFO:root:constant: ['const cv.BORDER_TRANSPARENT', '5', [], []]
INFO:root:ok: ConstInfo [addedManually='False' ; classname='Core' ; classpath='' ; cname='BORDER_TRANSPARENT' ; name='BORDER_TRANSPARENT' ; namespace='cv' ; value='5']
INFO:root:constant: ['const cv.BORDER_REFLECT101', 'BORDER_REFLECT_101', [], []]
INFO:root:ok: ConstInfo [addedManually='False' ; classname='Core' ; classpath='' ; cname='BORDER_REFLECT101' ; name='BORDER_REFLECT101' ; namespace='cv' ; value='BORDER_REFLECT_101']
INFO:root:constant: ['const cv.BORDER_DEFAULT', 'BORDER_REFLECT_101', [], []]
INFO:root:ok: ConstInfo [addedManually='False' ; classname='Core' ; classpath='' ; cname='BORDER_DEFAULT' ; name='BORDER_DEFAULT' ; namespace='cv' ; value='BORDER_REFLECT_101']
INFO:root:constant: ['const cv.BORDER_ISOLATED', '16', [], []]
INFO:root:ok: ConstInfo [addedManually='False' ; classname='Core' ; classpath='' ; cname='BORDER_ISOLATED' ; name='BORDER_ISOLATED' ; namespace='cv' ; value='16']
INFO:root:function: ['cv.cubeRoot', 'float', [], [['float', 'val', '', []]]]
INFO:root:ok: FuncFamilyInfo [funcs='[<__main__.FuncInfo object at 0x10a766f90>]' ; isconstructor='False' ; jname='cubeRoot']
INFO:root:function: ['cv.fastAtan2', 'float', [], [['float', 'y', '', []], ['float', 'x', '', []]]]
INFO:root:ok: FuncFamilyInfo [funcs='[<__main__.FuncInfo object at 0x10a766e90>]' ; isconstructor='False' ; jname='fastAtan2']
INFO:root:=== Header: /Users/swinston/Mirada/lib/c/opencv/modules/core/include/opencv2/core.hpp
INFO:root:=== Namespaces: set(['cv.ogl', 'cv.cudev', 'cv.ipp', 'cv.Error', 'cv.cuda', 'cv'])
INFO:root:constant: ['const cv.SORT_EVERY_ROW', '0', [], []]
INFO:root:ok: ConstInfo [addedManually='False' ; classname='Core' ; classpath='' ; cname='SORT_EVERY_ROW' ; name='SORT_EVERY_ROW' ; namespace='cv' ; value='0']
INFO:root:constant: ['const cv.SORT_EVERY_COLUMN', '1', [], []]
INFO:root:ok: ConstInfo [addedManually='False' ; classname='Core' ; classpath='' ; cname='SORT_EVERY_COLUMN' ; name='SORT_EVERY_COLUMN' ; namespace='cv' ; value='1']
INFO:root:constant: ['const cv.SORT_ASCENDING', '0', [], []]
INFO:root:ok: ConstInfo [addedManually='False' ; classname='Core' ; classpath='' ; cname='SORT_ASCENDING' ; name='SORT_ASCENDING' ; namespace='cv' ; value='0']
INFO:root:constant: ['const cv.SORT_DESCENDING', '16', [], []]
INFO:root:ok: ConstInfo [addedManually='False' ; classname='Core' ; classpath='' ; cname='SORT_DESCENDING' ; name='SORT_DESCENDING' ; namespace='cv' ; value='16']
INFO:root:constant: ['const cv.COVAR_SCRAMBLED', '0', [], []]
INFO:root:ok: ConstInfo [addedManually='False' ; classname='Core' ; classpath='' ; cname='COVAR_SCRAMBLED' ; name='COVAR_SCRAMBLED' ; namespace='cv' ; value='0']
INFO:root:constant: ['const cv.COVAR_NORMAL', '1', [], []]
INFO:root:ok: ConstInfo [addedManually='False' ; classname='Core' ; classpath='' ; cname='COVAR_NORMAL' ; name='COVAR_NORMAL' ; namespace='cv' ; value='1']
INFO:root:constant: ['const cv.COVAR_USE_AVG', '2', [], []]
INFO:root:ok: ConstInfo [addedManually='False' ; classname='Core' ; classpath='' ; cname='COVAR_USE_AVG' ; name='COVAR_USE_AVG' ; namespace='cv' ; value='2']
INFO:root:constant: ['const cv.COVAR_SCALE', '4', [], []]
INFO:root:ok: ConstInfo [addedManually='False' ; classname='Core' ; classpath='' ; cname='COVAR_SCALE' ; name='COVAR_SCALE' ; namespace='cv' ; value='4']
INFO:root:constant: ['const cv.COVAR_ROWS', '8', [], []]
INFO:root:ok: ConstInfo [addedManually='False' ; classname='Core' ; classpath='' ; cname='COVAR_ROWS' ; name='COVAR_ROWS' ; namespace='cv' ; value='8']
INFO:root:constant: ['const cv.COVAR_COLS', '16', [], []]
INFO:root:ok: ConstInfo [addedManually='False' ; classname='Core' ; classpath='' ; cname='COVAR_COLS' ; name='COVAR_COLS' ; namespace='cv' ; value='16']
INFO:root:constant: ['const cv.KMEANS_RANDOM_CENTERS', '0', [], []]
INFO:root:ok: ConstInfo [addedManually='False' ; classname='Core' ; classpath='' ; cname='KMEANS_RANDOM_CENTERS' ; name='KMEANS_RANDOM_CENTERS' ; namespace='cv' ; value='0']
INFO:root:constant: ['const cv.KMEANS_PP_CENTERS', '2', [], []]
INFO:root:ok: ConstInfo [addedManually='False' ; classname='Core' ; classpath='' ; cname='KMEANS_PP_CENTERS' ; name='KMEANS_PP_CENTERS' ; namespace='cv' ; value='2']
INFO:root:constant: ['const cv.KMEANS_USE_INITIAL_LABELS', '1', [], []]
INFO:root:ok: ConstInfo [addedManually='False' ; classname='Core' ; classpath='' ; cname='KMEANS_USE_INITIAL_LABELS' ; name='KMEANS_USE_INITIAL_LABELS' ; namespace='cv' ; value='1']
INFO:root:constant: ['const cv.FILLED', '-1', [], []]
INFO:root:manual: ConstInfo [addedManually='False' ; classname='Core' ; classpath='' ; cname='FILLED' ; name='FILLED' ; namespace='cv' ; value='-1']
INFO:root:constant: ['const cv.LINE_4', '4', [], []]
INFO:root:ok: ConstInfo [addedManually='False' ; classname='Core' ; classpath='' ; cname='LINE_4' ; name='LINE_4' ; namespace='cv' ; value='4']
INFO:root:constant: ['const cv.LINE_8', '8', [], []]
INFO:root:ok: ConstInfo [addedManually='False' ; classname='Core' ; classpath='' ; cname='LINE_8' ; name='LINE_8' ; namespace='cv' ; value='8']
INFO:root:constant: ['const cv.LINE_AA', '16', [], []]
INFO:root:ok: ConstInfo [addedManually='False' ; classname='Core' ; classpath='' ; cname='LINE_AA' ; name='LINE_AA' ; namespace='cv' ; value='16']
INFO:root:constant: ['const cv.FONT_HERSHEY_SIMPLEX', '0', [], []]
INFO:root:ok: ConstInfo [addedManually='False' ; classname='Core' ; classpath='' ; cname='FONT_HERSHEY_SIMPLEX' ; name='FONT_HERSHEY_SIMPLEX' ; namespace='cv' ; value='0']
INFO:root:constant: ['const cv.FONT_HERSHEY_PLAIN', '1', [], []]
INFO:root:ok: ConstInfo [addedManually='False' ; classname='Core' ; classpath='' ; cname='FONT_HERSHEY_PLAIN' ; name='FONT_HERSHEY_PLAIN' ; namespace='cv' ; value='1']
INFO:root:constant: ['const cv.FONT_HERSHEY_DUPLEX', '2', [], []]
INFO:root:ok: ConstInfo [addedManually='False' ; classname='Core' ; classpath='' ; cname='FONT_HERSHEY_DUPLEX' ; name='FONT_HERSHEY_DUPLEX' ; namespace='cv' ; value='2']
INFO:root:constant: ['const cv.FONT_HERSHEY_COMPLEX', '3', [], []]
INFO:root:ok: ConstInfo [addedManually='False' ; classname='Core' ; classpath='' ; cname='FONT_HERSHEY_COMPLEX' ; name='FONT_HERSHEY_COMPLEX' ; namespace='cv' ; value='3']
INFO:root:constant: ['const cv.FONT_HERSHEY_TRIPLEX', '4', [], []]
INFO:root:ok: ConstInfo [addedManually='False' ; classname='Core' ; classpath='' ; cname='FONT_HERSHEY_TRIPLEX' ; name='FONT_HERSHEY_TRIPLEX' ; namespace='cv' ; value='4']
INFO:root:constant: ['const cv.FONT_HERSHEY_COMPLEX_SMALL', '5', [], []]
INFO:root:ok: ConstInfo [addedManually='False' ; classname='Core' ; classpath='' ; cname='FONT_HERSHEY_COMPLEX_SMALL' ; name='FONT_HERSHEY_COMPLEX_SMALL' ; namespace='cv' ; value='5']
INFO:root:constant: ['const cv.FONT_HERSHEY_SCRIPT_SIMPLEX', '6', [], []]
INFO:root:ok: ConstInfo [addedManually='False' ; classname='Core' ; classpath='' ; cname='FONT_HERSHEY_SCRIPT_SIMPLEX' ; name='FONT_HERSHEY_SCRIPT_SIMPLEX' ; namespace='cv' ; value='6']
INFO:root:constant: ['const cv.FONT_HERSHEY_SCRIPT_COMPLEX', '7', [], []]
INFO:root:ok: ConstInfo [addedManually='False' ; classname='Core' ; classpath='' ; cname='FONT_HERSHEY_SCRIPT_COMPLEX' ; name='FONT_HERSHEY_SCRIPT_COMPLEX' ; namespace='cv' ; value='7']
INFO:root:constant: ['const cv.FONT_ITALIC', '16', [], []]
INFO:root:ok: ConstInfo [addedManually='False' ; classname='Core' ; classpath='' ; cname='FONT_ITALIC' ; name='FONT_ITALIC' ; namespace='cv' ; value='16']
INFO:root:constant: ['const cv.REDUCE_SUM', '0', [], []]
INFO:root:manual: ConstInfo [addedManually='False' ; classname='Core' ; classpath='' ; cname='REDUCE_SUM' ; name='REDUCE_SUM' ; namespace='cv' ; value='0']
INFO:root:constant: ['const cv.REDUCE_AVG', '1', [], []]
INFO:root:manual: ConstInfo [addedManually='False' ; classname='Core' ; classpath='' ; cname='REDUCE_AVG' ; name='REDUCE_AVG' ; namespace='cv' ; value='1']
INFO:root:constant: ['const cv.REDUCE_MAX', '2', [], []]
INFO:root:manual: ConstInfo [addedManually='False' ; classname='Core' ; classpath='' ; cname='REDUCE_MAX' ; name='REDUCE_MAX' ; namespace='cv' ; value='2']
INFO:root:constant: ['const cv.REDUCE_MIN', '3', [], []]
INFO:root:manual: ConstInfo [addedManually='False' ; classname='Core' ; classpath='' ; cname='REDUCE_MIN' ; name='REDUCE_MIN' ; namespace='cv' ; value='3']
INFO:root:function: ['cv.borderInterpolate', 'int', [], [['int', 'p', '', []], ['int', 'len', '', []], ['int', 'borderType', '', []]]]
INFO:root:ok: FuncFamilyInfo [funcs='[<__main__.FuncInfo object at 0x10a760750>]' ; isconstructor='False' ; jname='borderInterpolate']
INFO:root:function: ['cv.copyMakeBorder', 'void', [], [['Mat', 'src', '', []], ['Mat', 'dst', '', ['/O']], ['int', 'top', '', []], ['int', 'bottom', '', []], ['int', 'left', '', []], ['int', 'right', '', []], ['int', 'borderType', '', []], ['Scalar', 'value', 'Scalar()', []]]]
INFO:root:ok: FuncFamilyInfo [funcs='[<__main__.FuncInfo object at 0x10a7607d0>]' ; isconstructor='False' ; jname='copyMakeBorder']
INFO:root:function: ['cv.add', 'void', [], [['Mat', 'src1', '', []], ['Mat', 'src2', '', []], ['Mat', 'dst', '', ['/O']], ['Mat', 'mask', 'Mat()', []], ['int', 'dtype', '-1', []]]]
INFO:root:ok: FuncFamilyInfo [funcs='[<__main__.FuncInfo object at 0x10a766190>]' ; isconstructor='False' ; jname='add']
INFO:root:function: ['cv.subtract', 'void', [], [['Mat', 'src1', '', []], ['Mat', 'src2', '', []], ['Mat', 'dst', '', ['/O']], ['Mat', 'mask', 'Mat()', []], ['int', 'dtype', '-1', []]]]
INFO:root:ok: FuncFamilyInfo [funcs='[<__main__.FuncInfo object at 0x10a75b210>]' ; isconstructor='False' ; jname='subtract']
INFO:root:function: ['cv.multiply', 'void', [], [['Mat', 'src1', '', []], ['Mat', 'src2', '', []], ['Mat', 'dst', '', ['/O']], ['double', 'scale', '1', []], ['int', 'dtype', '-1', []]]]
INFO:root:ok: FuncFamilyInfo [funcs='[<__main__.FuncInfo object at 0x10a75b3d0>]' ; isconstructor='False' ; jname='multiply']
INFO:root:function: ['cv.divide', 'void', [], [['Mat', 'src1', '', []], ['Mat', 'src2', '', []], ['Mat', 'dst', '', ['/O']], ['double', 'scale', '1', []], ['int', 'dtype', '-1', []]]]
INFO:root:ok: FuncFamilyInfo [funcs='[<__main__.FuncInfo object at 0x10a75b590>]' ; isconstructor='False' ; jname='divide']
INFO:root:function: ['cv.divide', 'void', [], [['double', 'scale', '', []], ['Mat', 'src2', '', []], ['Mat', 'dst', '', ['/O']], ['int', 'dtype', '-1', []]]]
INFO:root:ok: FuncFamilyInfo [funcs='[<__main__.FuncInfo object at 0x10a75b750>]' ; isconstructor='False' ; jname='divide']
INFO:root:function: ['cv.scaleAdd', 'void', [], [['Mat', 'src1', '', []], ['double', 'alpha', '', []], ['Mat', 'src2', '', []], ['Mat', 'dst', '', ['/O']]]]
INFO:root:ok: FuncFamilyInfo [funcs='[<__main__.FuncInfo object at 0x10a75b790>]' ; isconstructor='False' ; jname='scaleAdd']
INFO:root:function: ['cv.addWeighted', 'void', [], [['Mat', 'src1', '', []], ['double', 'alpha', '', []], ['Mat', 'src2', '', []], ['double', 'beta', '', []], ['double', 'gamma', '', []], ['Mat', 'dst', '', ['/O']], ['int', 'dtype', '-1', []]]]
INFO:root:ok: FuncFamilyInfo [funcs='[<__main__.FuncInfo object at 0x10a75ba10>]' ; isconstructor='False' ; jname='addWeighted']
INFO:root:function: ['cv.convertScaleAbs', 'void', [], [['Mat', 'src', '', []], ['Mat', 'dst', '', ['/O']], ['double', 'alpha', '1', []], ['double', 'beta', '0', []]]]
INFO:root:ok: FuncFamilyInfo [funcs='[<__main__.FuncInfo object at 0x10a75bc50>]' ; isconstructor='False' ; jname='convertScaleAbs']
INFO:root:function: ['cv.LUT', 'void', [], [['Mat', 'src', '', []], ['Mat', 'lut', '', []], ['Mat', 'dst', '', ['/O']]]]
INFO:root:ok: FuncFamilyInfo [funcs='[<__main__.FuncInfo object at 0x10a75bdd0>]' ; isconstructor='False' ; jname='LUT']
INFO:root:function: ['cv.sum', 'Scalar', ['=sumElems'], [['Mat', 'src', '', []]]]
INFO:root:ok: FuncFamilyInfo [funcs='[<__main__.FuncInfo object at 0x10a75bf10>]' ; isconstructor='False' ; jname='sumElems']
INFO:root:function: ['cv.countNonZero', 'int', [], [['Mat', 'src', '', []]]]
INFO:root:ok: FuncFamilyInfo [funcs='[<__main__.FuncInfo object at 0x10a75bfd0>]' ; isconstructor='False' ; jname='countNonZero']
INFO:root:function: ['cv.findNonZero', 'void', [], [['Mat', 'src', '', []], ['Mat', 'idx', '', ['/O']]]]
INFO:root:ok: FuncFamilyInfo [funcs='[<__main__.FuncInfo object at 0x10a7710d0>]' ; isconstructor='False' ; jname='findNonZero']
INFO:root:function: ['cv.mean', 'Scalar', [], [['Mat', 'src', '', []], ['Mat', 'mask', 'Mat()', []]]]
INFO:root:ok: FuncFamilyInfo [funcs='[<__main__.FuncInfo object at 0x10a7711d0>]' ; isconstructor='False' ; jname='mean']
INFO:root:function: ['cv.meanStdDev', 'void', [], [['Mat', 'src', '', []], ['Mat', 'mean', '', ['/O']], ['Mat', 'stddev', '', ['/O']], ['Mat', 'mask', 'Mat()', []]]]
INFO:root:ok: FuncFamilyInfo [funcs='[<__main__.FuncInfo object at 0x10a771e10>]' ; isconstructor='False' ; jname='meanStdDev']
INFO:root:function: ['cv.norm', 'double', [], [['Mat', 'src1', '', []], ['int', 'normType', 'NORM_L2', []], ['Mat', 'mask', 'Mat()', []]]]
INFO:root:ok: FuncFamilyInfo [funcs='[<__main__.FuncInfo object at 0x10a771f90>]' ; isconstructor='False' ; jname='norm']
INFO:root:function: ['cv.norm', 'double', [], [['Mat', 'src1', '', []], ['Mat', 'src2', '', []], ['int', 'normType', 'NORM_L2', []], ['Mat', 'mask', 'Mat()', []]]]
INFO:root:ok: FuncFamilyInfo [funcs='[<__main__.FuncInfo object at 0x10a764110>]' ; isconstructor='False' ; jname='norm']
INFO:root:function: ['cv.PSNR', 'double', [], [['Mat', 'src1', '', []], ['Mat', 'src2', '', []]]]
INFO:root:ok: FuncFamilyInfo [funcs='[<__main__.FuncInfo object at 0x10a7641d0>]' ; isconstructor='False' ; jname='PSNR']
INFO:root:function: ['cv.batchDistance', 'void', [], [['Mat', 'src1', '', []], ['Mat', 'src2', '', []], ['Mat', 'dist', '', ['/O']], ['int', 'dtype', '', []], ['Mat', 'nidx', '', ['/O']], ['int', 'normType', 'NORM_L2', []], ['int', 'K', '0', []], ['Mat', 'mask', 'Mat()', []], ['int', 'update', '0', []], ['bool', 'crosscheck', 'false', []]]]
INFO:root:ok: FuncFamilyInfo [funcs='[<__main__.FuncInfo object at 0x10a764350>]' ; isconstructor='False' ; jname='batchDistance']
INFO:root:function: ['cv.normalize', 'void', [], [['Mat', 'src', '', []], ['Mat', 'dst', '', ['/IO']], ['double', 'alpha', '1', []], ['double', 'beta', '0', []], ['int', 'norm_type', 'NORM_L2', []], ['int', 'dtype', '-1', []], ['Mat', 'mask', 'Mat()', []]]]
INFO:root:ok: FuncFamilyInfo [funcs='[<__main__.FuncInfo object at 0x10a764650>]' ; isconstructor='False' ; jname='normalize']
INFO:root:function: ['cv.minMaxLoc', 'void', [], [['Mat', 'src', '', []], ['double*', 'minVal', '', ['/O']], ['double*', 'maxVal', '0', ['/O']], ['Point*', 'minLoc', '0', ['/O']], ['Point*', 'maxLoc', '0', ['/O']], ['Mat', 'mask', 'Mat()', []]]]
INFO:root:manual: FuncFamilyInfo [funcs='[<__main__.FuncInfo object at 0x10a764890>]' ; isconstructor='False' ; jname='minMaxLoc']
INFO:root:function: ['cv.reduce', 'void', [], [['Mat', 'src', '', []], ['Mat', 'dst', '', ['/O']], ['int', 'dim', '', []], ['int', 'rtype', '', []], ['int', 'dtype', '-1', []]]]
INFO:root:ok: FuncFamilyInfo [funcs='[<__main__.FuncInfo object at 0x10a764890>]' ; isconstructor='False' ; jname='reduce']
INFO:root:function: ['cv.merge', 'void', [], [['vector_Mat', 'mv', '', []], ['Mat', 'dst', '', ['/O']]]]
INFO:root:ok: FuncFamilyInfo [funcs='[<__main__.FuncInfo object at 0x10a7648d0>]' ; isconstructor='False' ; jname='merge']
INFO:root:function: ['cv.split', 'void', [], [['Mat', 'm', '', []], ['vector_Mat', 'mv', '', ['/O']]]]
INFO:root:ok: FuncFamilyInfo [funcs='[<__main__.FuncInfo object at 0x10a764b50>]' ; isconstructor='False' ; jname='split']
INFO:root:function: ['cv.mixChannels', 'void', [], [['vector_Mat', 'src', '', []], ['vector_Mat', 'dst', '', ['/IO']], ['vector_int', 'fromTo', '', []]]]
INFO:root:ok: FuncFamilyInfo [funcs='[<__main__.FuncInfo object at 0x10a764c50>]' ; isconstructor='False' ; jname='mixChannels']
INFO:root:function: ['cv.extractChannel', 'void', [], [['Mat', 'src', '', []], ['Mat', 'dst', '', ['/O']], ['int', 'coi', '', []]]]
INFO:root:ok: FuncFamilyInfo [funcs='[<__main__.FuncInfo object at 0x10a764d90>]' ; isconstructor='False' ; jname='extractChannel']
INFO:root:function: ['cv.insertChannel', 'void', [], [['Mat', 'src', '', []], ['Mat', 'dst', '', ['/IO']], ['int', 'coi', '', []]]]
INFO:root:ok: FuncFamilyInfo [funcs='[<__main__.FuncInfo object at 0x10a764ed0>]' ; isconstructor='False' ; jname='insertChannel']
INFO:root:function: ['cv.flip', 'void', [], [['Mat', 'src', '', []], ['Mat', 'dst', '', ['/O']], ['int', 'flipCode', '', []]]]
INFO:root:ok: FuncFamilyInfo [funcs='[<__main__.FuncInfo object at 0x10a765050>]' ; isconstructor='False' ; jname='flip']
INFO:root:function: ['cv.repeat', 'void', [], [['Mat', 'src', '', []], ['int', 'ny', '', []], ['int', 'nx', '', []], ['Mat', 'dst', '', ['/O']]]]
INFO:root:ok: FuncFamilyInfo [funcs='[<__main__.FuncInfo object at 0x10a765190>]' ; isconstructor='False' ; jname='repeat']
INFO:root:function: ['cv.hconcat', 'void', [], [['vector_Mat', 'src', '', []], ['Mat', 'dst', '', ['/O']]]]
INFO:root:ok: FuncFamilyInfo [funcs='[<__main__.FuncInfo object at 0x10a765310>]' ; isconstructor='False' ; jname='hconcat']
INFO:root:function: ['cv.vconcat', 'void', [], [['vector_Mat', 'src', '', []], ['Mat', 'dst', '', ['/O']]]]
INFO:root:ok: FuncFamilyInfo [funcs='[<__main__.FuncInfo object at 0x10a765410>]' ; isconstructor='False' ; jname='vconcat']
INFO:root:function: ['cv.bitwise_and', 'void', [], [['Mat', 'src1', '', []], ['Mat', 'src2', '', []], ['Mat', 'dst', '', ['/O']], ['Mat', 'mask', 'Mat()', []]]]
INFO:root:ok: FuncFamilyInfo [funcs='[<__main__.FuncInfo object at 0x10a765510>]' ; isconstructor='False' ; jname='bitwise_and']
INFO:root:function: ['cv.bitwise_or', 'void', [], [['Mat', 'src1', '', []], ['Mat', 'src2', '', []], ['Mat', 'dst', '', ['/O']], ['Mat', 'mask', 'Mat()', []]]]
INFO:root:ok: FuncFamilyInfo [funcs='[<__main__.FuncInfo object at 0x10a765690>]' ; isconstructor='False' ; jname='bitwise_or']
INFO:root:function: ['cv.bitwise_xor', 'void', [], [['Mat', 'src1', '', []], ['Mat', 'src2', '', []], ['Mat', 'dst', '', ['/O']], ['Mat', 'mask', 'Mat()', []]]]
INFO:root:ok: FuncFamilyInfo [funcs='[<__main__.FuncInfo object at 0x10a765810>]' ; isconstructor='False' ; jname='bitwise_xor']
INFO:root:function: ['cv.bitwise_not', 'void', [], [['Mat', 'src', '', []], ['Mat', 'dst', '', ['/O']], ['Mat', 'mask', 'Mat()', []]]]
INFO:root:ok: FuncFamilyInfo [funcs='[<__main__.FuncInfo object at 0x10a765990>]' ; isconstructor='False' ; jname='bitwise_not']
INFO:root:function: ['cv.absdiff', 'void', [], [['Mat', 'src1', '', []], ['Mat', 'src2', '', []], ['Mat', 'dst', '', ['/O']]]]
INFO:root:ok: FuncFamilyInfo [funcs='[<__main__.FuncInfo object at 0x10a765ad0>]' ; isconstructor='False' ; jname='absdiff']
INFO:root:function: ['cv.inRange', 'void', [], [['Mat', 'src', '', []], ['Mat', 'lowerb', '', []], ['Mat', 'upperb', '', []], ['Mat', 'dst', '', ['/O']]]]
INFO:root:ok: FuncFamilyInfo [funcs='[<__main__.FuncInfo object at 0x10a765c10>]' ; isconstructor='False' ; jname='inRange']
INFO:root:function: ['cv.compare', 'void', [], [['Mat', 'src1', '', []], ['Mat', 'src2', '', []], ['Mat', 'dst', '', ['/O']], ['int', 'cmpop', '', []]]]
INFO:root:ok: FuncFamilyInfo [funcs='[<__main__.FuncInfo object at 0x10a765d90>]' ; isconstructor='False' ; jname='compare']
INFO:root:function: ['cv.min', 'void', [], [['Mat', 'src1', '', []], ['Mat', 'src2', '', []], ['Mat', 'dst', '', ['/O']]]]
INFO:root:ok: FuncFamilyInfo [funcs='[<__main__.FuncInfo object at 0x10a765f10>]' ; isconstructor='False' ; jname='min']
INFO:root:function: ['cv.max', 'void', [], [['Mat', 'src1', '', []], ['Mat', 'src2', '', []], ['Mat', 'dst', '', ['/O']]]]
INFO:root:ok: FuncFamilyInfo [funcs='[<__main__.FuncInfo object at 0x10a767090>]' ; isconstructor='False' ; jname='max']
INFO:root:function: ['cv.sqrt', 'void', [], [['Mat', 'src', '', []], ['Mat', 'dst', '', ['/O']]]]
INFO:root:ok: FuncFamilyInfo [funcs='[<__main__.FuncInfo object at 0x10a7671d0>]' ; isconstructor='False' ; jname='sqrt']
INFO:root:function: ['cv.pow', 'void', [], [['Mat', 'src', '', []], ['double', 'power', '', []], ['Mat', 'dst', '', ['/O']]]]
INFO:root:ok: FuncFamilyInfo [funcs='[<__main__.FuncInfo object at 0x10a7672d0>]' ; isconstructor='False' ; jname='pow']
INFO:root:function: ['cv.exp', 'void', [], [['Mat', 'src', '', []], ['Mat', 'dst', '', ['/O']]]]
INFO:root:ok: FuncFamilyInfo [funcs='[<__main__.FuncInfo object at 0x10a767410>]' ; isconstructor='False' ; jname='exp']
INFO:root:function: ['cv.log', 'void', [], [['Mat', 'src', '', []], ['Mat', 'dst', '', ['/O']]]]
INFO:root:ok: FuncFamilyInfo [funcs='[<__main__.FuncInfo object at 0x10a767510>]' ; isconstructor='False' ; jname='log']
INFO:root:function: ['cv.polarToCart', 'void', [], [['Mat', 'magnitude', '', []], ['Mat', 'angle', '', []], ['Mat', 'x', '', ['/O']], ['Mat', 'y', '', ['/O']], ['bool', 'angleInDegrees', 'false', []]]]
INFO:root:ok: FuncFamilyInfo [funcs='[<__main__.FuncInfo object at 0x10a767610>]' ; isconstructor='False' ; jname='polarToCart']
INFO:root:function: ['cv.cartToPolar', 'void', [], [['Mat', 'x', '', []], ['Mat', 'y', '', []], ['Mat', 'magnitude', '', ['/O']], ['Mat', 'angle', '', ['/O']], ['bool', 'angleInDegrees', 'false', []]]]
INFO:root:ok: FuncFamilyInfo [funcs='[<__main__.FuncInfo object at 0x10a7677d0>]' ; isconstructor='False' ; jname='cartToPolar']
INFO:root:function: ['cv.phase', 'void', [], [['Mat', 'x', '', []], ['Mat', 'y', '', []], ['Mat', 'angle', '', ['/O']], ['bool', 'angleInDegrees', 'false', []]]]
INFO:root:ok: FuncFamilyInfo [funcs='[<__main__.FuncInfo object at 0x10a767990>]' ; isconstructor='False' ; jname='phase']
INFO:root:function: ['cv.magnitude', 'void', [], [['Mat', 'x', '', []], ['Mat', 'y', '', []], ['Mat', 'magnitude', '', ['/O']]]]
INFO:root:ok: FuncFamilyInfo [funcs='[<__main__.FuncInfo object at 0x10a767b10>]' ; isconstructor='False' ; jname='magnitude']
INFO:root:function: ['cv.checkRange', 'bool', [], [['Mat', 'a', '', []], ['bool', 'quiet', 'true', []], ['Point*', 'pos', '0', ['/O']], ['double', 'minVal', '-DBL_MAX', []], ['double', 'maxVal', 'DBL_MAX', []]]]
INFO:root:ok: FuncFamilyInfo [funcs='[<__main__.FuncInfo object at 0x10a767c50>]' ; isconstructor='False' ; jname='checkRange']
INFO:root:function: ['cv.patchNaNs', 'void', [], [['Mat', 'a', '', ['/IO']], ['double', 'val', '0', []]]]
INFO:root:ok: FuncFamilyInfo [funcs='[<__main__.FuncInfo object at 0x10a767e10>]' ; isconstructor='False' ; jname='patchNaNs']
INFO:root:function: ['cv.gemm', 'void', [], [['Mat', 'src1', '', []], ['Mat', 'src2', '', []], ['double', 'alpha', '', []], ['Mat', 'src3', '', []], ['double', 'beta', '', []], ['Mat', 'dst', '', ['/O']], ['int', 'flags', '0', []]]]
INFO:root:ok: FuncFamilyInfo [funcs='[<__main__.FuncInfo object at 0x10a767f10>]' ; isconstructor='False' ; jname='gemm']
INFO:root:function: ['cv.mulTransposed', 'void', [], [['Mat', 'src', '', []], ['Mat', 'dst', '', ['/O']], ['bool', 'aTa', '', []], ['Mat', 'delta', 'Mat()', []], ['double', 'scale', '1', []], ['int', 'dtype', '-1', []]]]
INFO:root:ok: FuncFamilyInfo [funcs='[<__main__.FuncInfo object at 0x10a75d190>]' ; isconstructor='False' ; jname='mulTransposed']
INFO:root:function: ['cv.transpose', 'void', [], [['Mat', 'src', '', []], ['Mat', 'dst', '', ['/O']]]]
INFO:root:ok: FuncFamilyInfo [funcs='[<__main__.FuncInfo object at 0x10a75d390>]' ; isconstructor='False' ; jname='transpose']
INFO:root:function: ['cv.transform', 'void', [], [['Mat', 'src', '', []], ['Mat', 'dst', '', ['/O']], ['Mat', 'm', '', []]]]
INFO:root:ok: FuncFamilyInfo [funcs='[<__main__.FuncInfo object at 0x10a75d490>]' ; isconstructor='False' ; jname='transform']
INFO:root:function: ['cv.perspectiveTransform', 'void', [], [['Mat', 'src', '', []], ['Mat', 'dst', '', ['/O']], ['Mat', 'm', '', []]]]
INFO:root:ok: FuncFamilyInfo [funcs='[<__main__.FuncInfo object at 0x10a75d5d0>]' ; isconstructor='False' ; jname='perspectiveTransform']
INFO:root:function: ['cv.completeSymm', 'void', [], [['Mat', 'mtx', '', ['/IO']], ['bool', 'lowerToUpper', 'false', []]]]
INFO:root:ok: FuncFamilyInfo [funcs='[<__main__.FuncInfo object at 0x10a75d750>]' ; isconstructor='False' ; jname='completeSymm']
INFO:root:function: ['cv.setIdentity', 'void', [], [['Mat', 'mtx', '', ['/IO']], ['Scalar', 's', 'Scalar(1)', []]]]
INFO:root:ok: FuncFamilyInfo [funcs='[<__main__.FuncInfo object at 0x10a75d850>]' ; isconstructor='False' ; jname='setIdentity']
INFO:root:function: ['cv.determinant', 'double', [], [['Mat', 'mtx', '', []]]]
INFO:root:ok: FuncFamilyInfo [funcs='[<__main__.FuncInfo object at 0x10a75d950>]' ; isconstructor='False' ; jname='determinant']
INFO:root:function: ['cv.trace', 'Scalar', [], [['Mat', 'mtx', '', []]]]
INFO:root:ok: FuncFamilyInfo [funcs='[<__main__.FuncInfo object at 0x10a75da10>]' ; isconstructor='False' ; jname='trace']
INFO:root:function: ['cv.invert', 'double', [], [['Mat', 'src', '', []], ['Mat', 'dst', '', ['/O']], ['int', 'flags', 'DECOMP_LU', []]]]
INFO:root:ok: FuncFamilyInfo [funcs='[<__main__.FuncInfo object at 0x10a75dad0>]' ; isconstructor='False' ; jname='invert']
INFO:root:function: ['cv.solve', 'bool', [], [['Mat', 'src1', '', []], ['Mat', 'src2', '', []], ['Mat', 'dst', '', ['/O']], ['int', 'flags', 'DECOMP_LU', []]]]
INFO:root:ok: FuncFamilyInfo [funcs='[<__main__.FuncInfo object at 0x10a75dc10>]' ; isconstructor='False' ; jname='solve']
INFO:root:function: ['cv.sort', 'void', [], [['Mat', 'src', '', []], ['Mat', 'dst', '', ['/O']], ['int', 'flags', '', []]]]
INFO:root:ok: FuncFamilyInfo [funcs='[<__main__.FuncInfo object at 0x10a75dd90>]' ; isconstructor='False' ; jname='sort']
INFO:root:function: ['cv.sortIdx', 'void', [], [['Mat', 'src', '', []], ['Mat', 'dst', '', ['/O']], ['int', 'flags', '', []]]]
INFO:root:ok: FuncFamilyInfo [funcs='[<__main__.FuncInfo object at 0x10a75ded0>]' ; isconstructor='False' ; jname='sortIdx']
INFO:root:function: ['cv.solveCubic', 'int', [], [['Mat', 'coeffs', '', []], ['Mat', 'roots', '', ['/O']]]]
INFO:root:ok: FuncFamilyInfo [funcs='[<__main__.FuncInfo object at 0x10a75e050>]' ; isconstructor='False' ; jname='solveCubic']
INFO:root:function: ['cv.solvePoly', 'double', [], [['Mat', 'coeffs', '', []], ['Mat', 'roots', '', ['/O']], ['int', 'maxIters', '300', []]]]
INFO:root:ok: FuncFamilyInfo [funcs='[<__main__.FuncInfo object at 0x10a75e150>]' ; isconstructor='False' ; jname='solvePoly']
INFO:root:function: ['cv.eigen', 'bool', [], [['Mat', 'src', '', []], ['Mat', 'eigenvalues', '', ['/O']], ['Mat', 'eigenvectors', 'Mat()', ['/O']]]]
INFO:root:ok: FuncFamilyInfo [funcs='[<__main__.FuncInfo object at 0x10a75e290>]' ; isconstructor='False' ; jname='eigen']
INFO:root:function: ['cv.calcCovarMatrix', 'void', [], [['Mat', 'samples', '', []], ['Mat', 'covar', '', ['/O']], ['Mat', 'mean', '', ['/IO']], ['int', 'flags', '', []], ['int', 'ctype', 'CV_64F', []]]]
INFO:root:ok: FuncFamilyInfo [funcs='[<__main__.FuncInfo object at 0x10a75e3d0>]' ; isconstructor='False' ; jname='calcCovarMatrix']
INFO:root:function: ['cv.PCACompute', 'void', [], [['Mat', 'data', '', []], ['Mat', 'mean', '', ['/IO']], ['Mat', 'eigenvectors', '', ['/O']], ['int', 'maxComponents', '0', []]]]
INFO:root:ok: FuncFamilyInfo [funcs='[<__main__.FuncInfo object at 0x10a75e590>]' ; isconstructor='False' ; jname='PCACompute']
INFO:root:function: ['cv.PCACompute', 'void', [], [['Mat', 'data', '', []], ['Mat', 'mean', '', ['/IO']], ['Mat', 'eigenvectors', '', ['/O']], ['double', 'retainedVariance', '', []]]]
INFO:root:ok: FuncFamilyInfo [funcs='[<__main__.FuncInfo object at 0x10a75e710>]' ; isconstructor='False' ; jname='PCACompute']
INFO:root:function: ['cv.PCAProject', 'void', [], [['Mat', 'data', '', []], ['Mat', 'mean', '', []], ['Mat', 'eigenvectors', '', []], ['Mat', 'result', '', ['/O']]]]
INFO:root:ok: FuncFamilyInfo [funcs='[<__main__.FuncInfo object at 0x10a75e750>]' ; isconstructor='False' ; jname='PCAProject']
INFO:root:function: ['cv.PCABackProject', 'void', [], [['Mat', 'data', '', []], ['Mat', 'mean', '', []], ['Mat', 'eigenvectors', '', []], ['Mat', 'result', '', ['/O']]]]
INFO:root:ok: FuncFamilyInfo [funcs='[<__main__.FuncInfo object at 0x10a75e9d0>]' ; isconstructor='False' ; jname='PCABackProject']
INFO:root:function: ['cv.SVDecomp', 'void', [], [['Mat', 'src', '', []], ['Mat', 'w', '', ['/O']], ['Mat', 'u', '', ['/O']], ['Mat', 'vt', '', ['/O']], ['int', 'flags', '0', []]]]
INFO:root:ok: FuncFamilyInfo [funcs='[<__main__.FuncInfo object at 0x10a75eb50>]' ; isconstructor='False' ; jname='SVDecomp']
INFO:root:function: ['cv.SVBackSubst', 'void', [], [['Mat', 'w', '', []], ['Mat', 'u', '', []], ['Mat', 'vt', '', []], ['Mat', 'rhs', '', []], ['Mat', 'dst', '', ['/O']]]]
INFO:root:ok: FuncFamilyInfo [funcs='[<__main__.FuncInfo object at 0x10a75ed10>]' ; isconstructor='False' ; jname='SVBackSubst']
INFO:root:function: ['cv.Mahalanobis', 'double', [], [['Mat', 'v1', '', []], ['Mat', 'v2', '', []], ['Mat', 'icovar', '', []]]]
INFO:root:ok: FuncFamilyInfo [funcs='[<__main__.FuncInfo object at 0x10a75eed0>]' ; isconstructor='False' ; jname='Mahalanobis']
INFO:root:function: ['cv.dft', 'void', [], [['Mat', 'src', '', []], ['Mat', 'dst', '', ['/O']], ['int', 'flags', '0', []], ['int', 'nonzeroRows', '0', []]]]
INFO:root:ok: FuncFamilyInfo [funcs='[<__main__.FuncInfo object at 0x10a762050>]' ; isconstructor='False' ; jname='dft']
INFO:root:function: ['cv.idft', 'void', [], [['Mat', 'src', '', []], ['Mat', 'dst', '', ['/O']], ['int', 'flags', '0', []], ['int', 'nonzeroRows', '0', []]]]
INFO:root:ok: FuncFamilyInfo [funcs='[<__main__.FuncInfo object at 0x10a7621d0>]' ; isconstructor='False' ; jname='idft']
INFO:root:function: ['cv.dct', 'void', [], [['Mat', 'src', '', []], ['Mat', 'dst', '', ['/O']], ['int', 'flags', '0', []]]]
INFO:root:ok: FuncFamilyInfo [funcs='[<__main__.FuncInfo object at 0x10a762350>]' ; isconstructor='False' ; jname='dct']
INFO:root:function: ['cv.idct', 'void', [], [['Mat', 'src', '', []], ['Mat', 'dst', '', ['/O']], ['int', 'flags', '0', []]]]
INFO:root:ok: FuncFamilyInfo [funcs='[<__main__.FuncInfo object at 0x10a762490>]' ; isconstructor='False' ; jname='idct']
INFO:root:function: ['cv.mulSpectrums', 'void', [], [['Mat', 'a', '', []], ['Mat', 'b', '', []], ['Mat', 'c', '', ['/O']], ['int', 'flags', '', []], ['bool', 'conjB', 'false', []]]]
INFO:root:ok: FuncFamilyInfo [funcs='[<__main__.FuncInfo object at 0x10a7625d0>]' ; isconstructor='False' ; jname='mulSpectrums']
INFO:root:function: ['cv.getOptimalDFTSize', 'int', [], [['int', 'vecsize', '', []]]]
INFO:root:ok: FuncFamilyInfo [funcs='[<__main__.FuncInfo object at 0x10a762790>]' ; isconstructor='False' ; jname='getOptimalDFTSize']
INFO:root:function: ['cv.kmeans', 'double', [], [['Mat', 'data', '', []], ['int', 'K', '', []], ['Mat', 'bestLabels', '', ['/IO']], ['TermCriteria', 'criteria', '', []], ['int', 'attempts', '', []], ['int', 'flags', '', []], ['Mat', 'centers', 'Mat()', ['/O']]]]
INFO:root:ok: FuncFamilyInfo [funcs='[<__main__.FuncInfo object at 0x10a762850>]' ; isconstructor='False' ; jname='kmeans']
INFO:root:function: ['cv.randu', 'void', [], [['Mat', 'dst', '', ['/IO']], ['Mat', 'low', '', []], ['Mat', 'high', '', []]]]
INFO:root:ok: FuncFamilyInfo [funcs='[<__main__.FuncInfo object at 0x10a762a90>]' ; isconstructor='False' ; jname='randu']
INFO:root:function: ['cv.randn', 'void', [], [['Mat', 'dst', '', ['/IO']], ['Mat', 'mean', '', []], ['Mat', 'stddev', '', []]]]
INFO:root:ok: FuncFamilyInfo [funcs='[<__main__.FuncInfo object at 0x10a762bd0>]' ; isconstructor='False' ; jname='randn']
INFO:root:function: ['cv.randShuffle', 'void', [], [['Mat', 'dst', '', ['/IO']], ['double', 'iterFactor', '1.', []], ['RNG*', 'rng', '0', []]]]
INFO:root:ok: FuncFamilyInfo [funcs='[<__main__.FuncInfo object at 0x10a762d10>]' ; isconstructor='False' ; jname='randShuffle']
INFO:root:constant: ['const cv.PCA.DATA_AS_ROW', '0', [], []]
INFO:root:class not found: ConstInfo [addedManually='False' ; classname='PCA' ; classpath='PCA' ; cname='DATA_AS_ROW' ; name='DATA_AS_ROW' ; namespace='cv' ; value='0']
INFO:root:constant: ['const cv.PCA.DATA_AS_COL', '1', [], []]
INFO:root:class not found: ConstInfo [addedManually='False' ; classname='PCA' ; classpath='PCA' ; cname='DATA_AS_COL' ; name='DATA_AS_COL' ; namespace='cv' ; value='1']
INFO:root:constant: ['const cv.PCA.USE_AVG', '2', [], []]
INFO:root:class not found: ConstInfo [addedManually='False' ; classname='PCA' ; classpath='PCA' ; cname='USE_AVG' ; name='USE_AVG' ; namespace='cv' ; value='2']
INFO:root:constant: ['const cv.SVD.MODIFY_A', '1', [], []]
INFO:root:class not found: ConstInfo [addedManually='False' ; classname='SVD' ; classpath='SVD' ; cname='MODIFY_A' ; name='MODIFY_A' ; namespace='cv' ; value='1']
INFO:root:constant: ['const cv.SVD.NO_UV', '2', [], []]
INFO:root:class not found: ConstInfo [addedManually='False' ; classname='SVD' ; classpath='SVD' ; cname='NO_UV' ; name='NO_UV' ; namespace='cv' ; value='2']
INFO:root:constant: ['const cv.SVD.FULL_UV', '4', [], []]
INFO:root:class not found: ConstInfo [addedManually='False' ; classname='SVD' ; classpath='SVD' ; cname='FULL_UV' ; name='FULL_UV' ; namespace='cv' ; value='4']
INFO:root:constant: ['const cv.RNG.UNIFORM', '0', [], []]
INFO:root:class not found: ConstInfo [addedManually='False' ; classname='RNG' ; classpath='RNG' ; cname='UNIFORM' ; name='UNIFORM' ; namespace='cv' ; value='0']
INFO:root:constant: ['const cv.RNG.NORMAL', '1', [], []]
INFO:root:class not found: ConstInfo [addedManually='False' ; classname='RNG' ; classpath='RNG' ; cname='NORMAL' ; name='NORMAL' ; namespace='cv' ; value='1']
INFO:root:constant: ['const cv.Formatter.FMT_DEFAULT', '0', [], []]
INFO:root:class not found: ConstInfo [addedManually='False' ; classname='Formatter' ; classpath='Formatter' ; cname='FMT_DEFAULT' ; name='FMT_DEFAULT' ; namespace='cv' ; value='0']
INFO:root:constant: ['const cv.Formatter.FMT_MATLAB', '1', [], []]
INFO:root:class not found: ConstInfo [addedManually='False' ; classname='Formatter' ; classpath='Formatter' ; cname='FMT_MATLAB' ; name='FMT_MATLAB' ; namespace='cv' ; value='1']
INFO:root:constant: ['const cv.Formatter.FMT_CSV', '2', [], []]
INFO:root:class not found: ConstInfo [addedManually='False' ; classname='Formatter' ; classpath='Formatter' ; cname='FMT_CSV' ; name='FMT_CSV' ; namespace='cv' ; value='2']
INFO:root:constant: ['const cv.Formatter.FMT_PYTHON', '3', [], []]
INFO:root:class not found: ConstInfo [addedManually='False' ; classname='Formatter' ; classpath='Formatter' ; cname='FMT_PYTHON' ; name='FMT_PYTHON' ; namespace='cv' ; value='3']
INFO:root:constant: ['const cv.Formatter.FMT_NUMPY', '4', [], []]
INFO:root:class not found: ConstInfo [addedManually='False' ; classname='Formatter' ; classpath='Formatter' ; cname='FMT_NUMPY' ; name='FMT_NUMPY' ; namespace='cv' ; value='4']
INFO:root:constant: ['const cv.Formatter.FMT_C', '5', [], []]
INFO:root:class not found: ConstInfo [addedManually='False' ; classname='Formatter' ; classpath='Formatter' ; cname='FMT_C' ; name='FMT_C' ; namespace='cv' ; value='5']
INFO:root:class: ['class cv.Algorithm', '', [], []]
INFO:root:ok: ClassInfo [base='' ; classname='' ; classpath='' ; cname='Algorithm' ; consts='[]' ; imports='set([])' ; jname='Algorithm' ; methods='{}' ; methods_suffixes='{}' ; name='Algorithm' ; namespace='cv' ; private_consts='[]' ; props='[]']
INFO:root:function: ['cv.Algorithm.getInt', 'int', [], [['String', 'name', '', []]]]
INFO:root:ok: FuncFamilyInfo [funcs='[<__main__.FuncInfo object at 0x10a762f50>]' ; isconstructor='False' ; jname='getInt']
INFO:root:function: ['cv.Algorithm.getDouble', 'double', [], [['String', 'name', '', []]]]
INFO:root:ok: FuncFamilyInfo [funcs='[<__main__.FuncInfo object at 0x10a762e50>]' ; isconstructor='False' ; jname='getDouble']
INFO:root:function: ['cv.Algorithm.getBool', 'bool', [], [['String', 'name', '', []]]]
INFO:root:ok: FuncFamilyInfo [funcs='[<__main__.FuncInfo object at 0x10a76b050>]' ; isconstructor='False' ; jname='getBool']
INFO:root:function: ['cv.Algorithm.getString', 'String', [], [['String', 'name', '', []]]]
INFO:root:ok: FuncFamilyInfo [funcs='[<__main__.FuncInfo object at 0x10a76b090>]' ; isconstructor='False' ; jname='getString']
INFO:root:function: ['cv.Algorithm.getMat', 'Mat', [], [['String', 'name', '', []]]]
INFO:root:ok: FuncFamilyInfo [funcs='[<__main__.FuncInfo object at 0x10a76b150>]' ; isconstructor='False' ; jname='getMat']
INFO:root:function: ['cv.Algorithm.getMatVector', 'vector_Mat', [], [['String', 'name', '', []]]]
INFO:root:ok: FuncFamilyInfo [funcs='[<__main__.FuncInfo object at 0x10a76b210>]' ; isconstructor='False' ; jname='getMatVector']
INFO:root:function: ['cv.Algorithm.getAlgorithm', 'Ptr_Algorithm', [], [['String', 'name', '', []]]]
INFO:root:ok: FuncFamilyInfo [funcs='[<__main__.FuncInfo object at 0x10a76b2d0>]' ; isconstructor='False' ; jname='getAlgorithm']
INFO:root:function: ['cv.Algorithm.setInt', 'void', [], [['String', 'name', '', []], ['int', 'value', '', []]]]
INFO:root:ok: FuncFamilyInfo [funcs='[<__main__.FuncInfo object at 0x10a76b410>]' ; isconstructor='False' ; jname='setInt']
INFO:root:function: ['cv.Algorithm.setDouble', 'void', [], [['String', 'name', '', []], ['double', 'value', '', []]]]
INFO:root:ok: FuncFamilyInfo [funcs='[<__main__.FuncInfo object at 0x10a76b450>]' ; isconstructor='False' ; jname='setDouble']
INFO:root:function: ['cv.Algorithm.setBool', 'void', [], [['String', 'name', '', []], ['bool', 'value', '', []]]]
INFO:root:ok: FuncFamilyInfo [funcs='[<__main__.FuncInfo object at 0x10a76b550>]' ; isconstructor='False' ; jname='setBool']
INFO:root:function: ['cv.Algorithm.setString', 'void', [], [['String', 'name', '', []], ['String', 'value', '', []]]]
INFO:root:ok: FuncFamilyInfo [funcs='[<__main__.FuncInfo object at 0x10a76b6d0>]' ; isconstructor='False' ; jname='setString']
INFO:root:function: ['cv.Algorithm.setMat', 'void', [], [['String', 'name', '', []], ['Mat', 'value', '', []]]]
INFO:root:ok: FuncFamilyInfo [funcs='[<__main__.FuncInfo object at 0x10a76b750>]' ; isconstructor='False' ; jname='setMat']
INFO:root:function: ['cv.Algorithm.setMatVector', 'void', [], [['String', 'name', '', []], ['vector_Mat', 'value', '', []]]]
INFO:root:ok: FuncFamilyInfo [funcs='[<__main__.FuncInfo object at 0x10a76b8d0>]' ; isconstructor='False' ; jname='setMatVector']
INFO:root:function: ['cv.Algorithm.setAlgorithm', 'void', [], [['String', 'name', '', []], ['Ptr_Algorithm', 'value', '', []]]]
INFO:root:ok: FuncFamilyInfo [funcs='[<__main__.FuncInfo object at 0x10a76ba10>]' ; isconstructor='False' ; jname='setAlgorithm']
INFO:root:function: ['cv.Algorithm.paramHelp', 'String', [], [['String', 'name', '', []]]]
INFO:root:ok: FuncFamilyInfo [funcs='[<__main__.FuncInfo object at 0x10a76bb10>]' ; isconstructor='False' ; jname='paramHelp']
INFO:root:function: ['cv.Algorithm.paramType', 'int', [], [['String', 'name', '', []]]]
INFO:root:ok: FuncFamilyInfo [funcs='[<__main__.FuncInfo object at 0x10a76bbd0>]' ; isconstructor='False' ; jname='paramType']
INFO:root:function: ['cv.Algorithm.getParams', 'void', [], [['vector_String', 'names', '', ['/O']]]]
INFO:root:ok: FuncFamilyInfo [funcs='[<__main__.FuncInfo object at 0x10a76bc10>]' ; isconstructor='False' ; jname='getParams']
INFO:root:function: ['cv.Algorithm.getList', 'void', ['/S'], [['vector_String', 'algorithms', '', ['/O']]]]
INFO:root:ok: FuncFamilyInfo [funcs='[<__main__.FuncInfo object at 0x10a76bd50>]' ; isconstructor='False' ; jname='getList']
INFO:root:function: ['cv.Algorithm._create', 'Ptr_Algorithm', ['/S'], [['String', 'name', '', []]]]
INFO:root:ok: FuncFamilyInfo [funcs='[<__main__.FuncInfo object at 0x10a76be10>]' ; isconstructor='False' ; jname='_create']
INFO:root:constant: ['const cv.Param.INT', '0', [], []]
INFO:root:class not found: ConstInfo [addedManually='False' ; classname='Param' ; classpath='Param' ; cname='INT' ; name='INT' ; namespace='cv' ; value='0']
INFO:root:constant: ['const cv.Param.BOOLEAN', '1', [], []]
INFO:root:class not found: ConstInfo [addedManually='False' ; classname='Param' ; classpath='Param' ; cname='BOOLEAN' ; name='BOOLEAN' ; namespace='cv' ; value='1']
INFO:root:constant: ['const cv.Param.REAL', '2', [], []]
INFO:root:class not found: ConstInfo [addedManually='False' ; classname='Param' ; classpath='Param' ; cname='REAL' ; name='REAL' ; namespace='cv' ; value='2']
INFO:root:constant: ['const cv.Param.STRING', '3', [], []]
INFO:root:class not found: ConstInfo [addedManually='False' ; classname='Param' ; classpath='Param' ; cname='STRING' ; name='STRING' ; namespace='cv' ; value='3']
INFO:root:constant: ['const cv.Param.MAT', '4', [], []]
INFO:root:class not found: ConstInfo [addedManually='False' ; classname='Param' ; classpath='Param' ; cname='MAT' ; name='MAT' ; namespace='cv' ; value='4']
INFO:root:constant: ['const cv.Param.MAT_VECTOR', '5', [], []]
INFO:root:class not found: ConstInfo [addedManually='False' ; classname='Param' ; classpath='Param' ; cname='MAT_VECTOR' ; name='MAT_VECTOR' ; namespace='cv' ; value='5']
INFO:root:constant: ['const cv.Param.ALGORITHM', '6', [], []]
INFO:root:class not found: ConstInfo [addedManually='False' ; classname='Param' ; classpath='Param' ; cname='ALGORITHM' ; name='ALGORITHM' ; namespace='cv' ; value='6']
INFO:root:constant: ['const cv.Param.FLOAT', '7', [], []]
INFO:root:class not found: ConstInfo [addedManually='False' ; classname='Param' ; classpath='Param' ; cname='FLOAT' ; name='FLOAT' ; namespace='cv' ; value='7']
INFO:root:constant: ['const cv.Param.UNSIGNED_INT', '8', [], []]
INFO:root:class not found: ConstInfo [addedManually='False' ; classname='Param' ; classpath='Param' ; cname='UNSIGNED_INT' ; name='UNSIGNED_INT' ; namespace='cv' ; value='8']
INFO:root:constant: ['const cv.Param.UINT64', '9', [], []]
INFO:root:class not found: ConstInfo [addedManually='False' ; classname='Param' ; classpath='Param' ; cname='UINT64' ; name='UINT64' ; namespace='cv' ; value='9']
INFO:root:constant: ['const cv.Param.UCHAR', '11', [], []]
INFO:root:class not found: ConstInfo [addedManually='False' ; classname='Param' ; classpath='Param' ; cname='UCHAR' ; name='UCHAR' ; namespace='cv' ; value='11']
INFO:root:=== Header: /Users/swinston/Mirada/lib/c/opencv/modules/core/include/opencv2/core/utility.hpp
INFO:root:=== Namespaces: set(['cv.ogl', 'cv.cudev', 'cv.ipp', 'cv.Error', 'cv.cuda', 'cv'])
INFO:root:function: ['cv.getBuildInformation', 'String', [], []]
INFO:root:ok: FuncFamilyInfo [funcs='[<__main__.FuncInfo object at 0x10a771350>]' ; isconstructor='False' ; jname='getBuildInformation']
INFO:root:function: ['cv.getTickCount', 'int64', [], []]
INFO:root:ok: FuncFamilyInfo [funcs='[<__main__.FuncInfo object at 0x10a771310>]' ; isconstructor='False' ; jname='getTickCount']
INFO:root:function: ['cv.getTickFrequency', 'double', [], []]
INFO:root:ok: FuncFamilyInfo [funcs='[<__main__.FuncInfo object at 0x10a7713d0>]' ; isconstructor='False' ; jname='getTickFrequency']
INFO:root:function: ['cv.getCPUTickCount', 'int64', [], []]
INFO:root:ok: FuncFamilyInfo [funcs='[<__main__.FuncInfo object at 0x10a771410>]' ; isconstructor='False' ; jname='getCPUTickCount']
INFO:root:constant: ['const cv.CPU_MMX', '1', [], []]
INFO:root:ok: ConstInfo [addedManually='False' ; classname='Core' ; classpath='' ; cname='CPU_MMX' ; name='CPU_MMX' ; namespace='cv' ; value='1']
INFO:root:constant: ['const cv.CPU_SSE', '2', [], []]
INFO:root:ok: ConstInfo [addedManually='False' ; classname='Core' ; classpath='' ; cname='CPU_SSE' ; name='CPU_SSE' ; namespace='cv' ; value='2']
INFO:root:constant: ['const cv.CPU_SSE2', '3', [], []]
INFO:root:ok: ConstInfo [addedManually='False' ; classname='Core' ; classpath='' ; cname='CPU_SSE2' ; name='CPU_SSE2' ; namespace='cv' ; value='3']
INFO:root:constant: ['const cv.CPU_SSE3', '4', [], []]
INFO:root:ok: ConstInfo [addedManually='False' ; classname='Core' ; classpath='' ; cname='CPU_SSE3' ; name='CPU_SSE3' ; namespace='cv' ; value='4']
INFO:root:constant: ['const cv.CPU_SSSE3', '5', [], []]
INFO:root:ok: ConstInfo [addedManually='False' ; classname='Core' ; classpath='' ; cname='CPU_SSSE3' ; name='CPU_SSSE3' ; namespace='cv' ; value='5']
INFO:root:constant: ['const cv.CPU_SSE4_1', '6', [], []]
INFO:root:ok: ConstInfo [addedManually='False' ; classname='Core' ; classpath='' ; cname='CPU_SSE4_1' ; name='CPU_SSE4_1' ; namespace='cv' ; value='6']
INFO:root:constant: ['const cv.CPU_SSE4_2', '7', [], []]
INFO:root:ok: ConstInfo [addedManually='False' ; classname='Core' ; classpath='' ; cname='CPU_SSE4_2' ; name='CPU_SSE4_2' ; namespace='cv' ; value='7']
INFO:root:constant: ['const cv.CPU_POPCNT', '8', [], []]
INFO:root:ok: ConstInfo [addedManually='False' ; classname='Core' ; classpath='' ; cname='CPU_POPCNT' ; name='CPU_POPCNT' ; namespace='cv' ; value='8']
INFO:root:constant: ['const cv.CPU_AVX', '10', [], []]
INFO:root:ok: ConstInfo [addedManually='False' ; classname='Core' ; classpath='' ; cname='CPU_AVX' ; name='CPU_AVX' ; namespace='cv' ; value='10']
INFO:root:constant: ['const cv.CPU_NEON', '11', [], []]
INFO:root:ok: ConstInfo [addedManually='False' ; classname='Core' ; classpath='' ; cname='CPU_NEON' ; name='CPU_NEON' ; namespace='cv' ; value='11']
INFO:root:function: ['cv.checkHardwareSupport', 'bool', [], [['int', 'feature', '', []]]]
INFO:root:manual: FuncFamilyInfo [funcs='[<__main__.FuncInfo object at 0x10a7717d0>]' ; isconstructor='False' ; jname='checkHardwareSupport']
INFO:root:function: ['cv.getNumberOfCPUs', 'int', [], []]
INFO:root:ok: FuncFamilyInfo [funcs='[<__main__.FuncInfo object at 0x10a771710>]' ; isconstructor='False' ; jname='getNumberOfCPUs']
INFO:root:function: ['cv.setUseOptimized', 'void', [], [['bool', 'onoff', '', []]]]
INFO:root:manual: FuncFamilyInfo [funcs='[<__main__.FuncInfo object at 0x10a7717d0>]' ; isconstructor='False' ; jname='setUseOptimized']
INFO:root:function: ['cv.useOptimized', 'bool', [], []]
INFO:root:manual: FuncFamilyInfo [funcs='[<__main__.FuncInfo object at 0x10a7717d0>]' ; isconstructor='False' ; jname='useOptimized']
INFO:root:=== Header: /Users/swinston/Mirada/lib/c/opencv/modules/core/../java/generator/src/cpp/core_manual.hpp
INFO:root:=== Namespaces: set(['cv.ogl', 'cv.cudev', 'cv.ipp', 'cv.Error', 'cv.cuda', 'cv'])
INFO:root:function: ['cv.setErrorVerbosity', 'void', [], [['bool', 'verbose', '', []]]]
INFO:root:ok: FuncFamilyInfo [funcs='[<__main__.FuncInfo object at 0x10a771850>]' ; isconstructor='False' ; jname='setErrorVerbosity']
INFO:root:function: ['cv.add', 'void', [], [['Mat', 'src1', '', []], ['Scalar', 'src2', '', []], ['Mat', 'dst', '', ['/O']], ['Mat', 'mask', 'Mat()', []], ['int', 'dtype', '-1', []]]]
INFO:root:ok: FuncFamilyInfo [funcs='[<__main__.FuncInfo object at 0x10a771890>]' ; isconstructor='False' ; jname='add']
INFO:root:function: ['cv.subtract', 'void', [], [['Mat', 'src1', '', []], ['Scalar', 'src2', '', []], ['Mat', 'dst', '', ['/O']], ['Mat', 'mask', 'Mat()', []], ['int', 'dtype', '-1', []]]]
INFO:root:ok: FuncFamilyInfo [funcs='[<__main__.FuncInfo object at 0x10a771990>]' ; isconstructor='False' ; jname='subtract']
INFO:root:function: ['cv.multiply', 'void', [], [['Mat', 'src1', '', []], ['Scalar', 'src2', '', []], ['Mat', 'dst', '', ['/O']], ['double', 'scale', '1', []], ['int', 'dtype', '-1', []]]]
INFO:root:ok: FuncFamilyInfo [funcs='[<__main__.FuncInfo object at 0x10a771b50>]' ; isconstructor='False' ; jname='multiply']
INFO:root:function: ['cv.divide', 'void', [], [['Mat', 'src1', '', []], ['Scalar', 'src2', '', []], ['Mat', 'dst', '', ['/O']], ['double', 'scale', '1', []], ['int', 'dtype', '-1', []]]]
INFO:root:ok: FuncFamilyInfo [funcs='[<__main__.FuncInfo object at 0x10a771d10>]' ; isconstructor='False' ; jname='divide']
INFO:root:function: ['cv.absdiff', 'void', [], [['Mat', 'src1', '', []], ['Scalar', 'src2', '', []], ['Mat', 'dst', '', ['/O']]]]
INFO:root:ok: FuncFamilyInfo [funcs='[<__main__.FuncInfo object at 0x10a760950>]' ; isconstructor='False' ; jname='absdiff']
INFO:root:function: ['cv.compare', 'void', [], [['Mat', 'src1', '', []], ['Scalar', 'src2', '', []], ['Mat', 'dst', '', ['/O']], ['int', 'cmpop', '', []]]]
INFO:root:ok: FuncFamilyInfo [funcs='[<__main__.FuncInfo object at 0x10a76bf90>]' ; isconstructor='False' ; jname='compare']
INFO:root:function: ['cv.min', 'void', [], [['Mat', 'src1', '', []], ['Scalar', 'src2', '', []], ['Mat', 'dst', '', ['/O']]]]
INFO:root:ok: FuncFamilyInfo [funcs='[<__main__.FuncInfo object at 0x10a76e1d0>]' ; isconstructor='False' ; jname='min']
INFO:root:function: ['cv.max', 'void', [], [['Mat', 'src1', '', []], ['Scalar', 'src2', '', []], ['Mat', 'dst', '', ['/O']]]]
INFO:root:ok: FuncFamilyInfo [funcs='[<__main__.FuncInfo object at 0x10a76e2d0>]' ; isconstructor='False' ; jname='max']
